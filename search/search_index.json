{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5173\u4e8e\u4f5c\u8005 \u8ba1\u7b97\u673a\u4e13\u4e1a\u54b8\u9c7c","title":"\u4e3b\u9875"},{"location":"#_1","text":"\u8ba1\u7b97\u673a\u4e13\u4e1a\u54b8\u9c7c","title":"\u5173\u4e8e\u4f5c\u8005"},{"location":"content/bookreport/BabyTakeYourTime_LongYingtai/","text":"\u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b\u4e66\u8bb0 \u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b\u4e66\u8bc4","title":"\u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b\u2014\u2014\u9f99\u5e94\u53f0"},{"location":"content/bookreport/BabyTakeYourTime_LongYingtai/#_1","text":"","title":"\u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b\u4e66\u8bb0"},{"location":"content/bookreport/BabyTakeYourTime_LongYingtai/#_2","text":"","title":"\u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b\u4e66\u8bc4"},{"location":"content/bookreport/DearAndreas_LongYingtai/","text":"\u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\u4e2d\u7684\u4e00\u4e9b\u6709\u8da3\u7684\u8bdd \u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\u8bfb\u540e\u611f","title":"\u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\u2014\u2014\u9f99\u5e94\u53f0"},{"location":"content/bookreport/DearAndreas_LongYingtai/#_1","text":"","title":"\u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\u4e2d\u7684\u4e00\u4e9b\u6709\u8da3\u7684\u8bdd"},{"location":"content/bookreport/DearAndreas_LongYingtai/#_2","text":"","title":"\u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\u8bfb\u540e\u611f"},{"location":"content/diary/2021/","text":"01 \u6708 01 \u65e5 \u642d\u5efa\u4e86\u535a\u5ba2\uff1f\u4e5f\u4e0d\u77e5\u5230\u662f\u4e0d\u662f\u53eb\u535a\u5ba2\uff0c\u5148\u7528\u7740\u518d\u8bf4\u3002 01 \u6708 02 \u65e5 pip install xgboost pip install catboost lj xgboost.whl catboost.iso nb \u600e\u4e48\u90e8\u7f72\u5230GitHub\u4e0a\uff0c\u88c2\u5f00\uff0c\u4e00\u665a\u4e0a\u6ca1\u641e\u51fa\u6765\uff0c\u6de6! md \u7ec8\u4e8e\u6210\u529f\u7684\u4e0a\u4f20\u5230GitHub\u4e86 NICE! 01 \u6708 03 \u65e5 \u4eca\u5929\u53c8\u662f\u5728\u5b89\u88c5\u8f6f\u4ef6\u4e2d\u8ff7\u832b\u7684\u4e00\u5929\uff0c\u4eca\u5929\u5b89\u88c5tensorflow\u3002 \u7ed3\u8bba\uff1a\u6e05\u534e\u955c\u50cfdown\uff0c\u8c46\u74e3\u955c\u50cfUp\uff01\uff01\uff01 https://pypi.douban.com/simple/ 01 \u6708 04 \u65e5 \u54a3 01 \u6708 05 \u65e5 \u60f3\u628a\u4e00\u4ef6\u4e8b\u60c5\u505a\u5b8c\u7f8e\uff0c\u4f46\u662f\u603b\u662f\u6700\u4e0d\u5b8c\u7f8e\u3002\u9700\u8981\u89c4\u5212\uff01\uff01\uff01 01 \u6708 06 \u65e5 \u54a3 01 \u6708 07 \u65e5 \u54a3 01 \u6708 08 \u65e5 \u8bfb\u5b8c\u4e86\u9f99\u5e94\u53f0\u7684\u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\uff0c\u968f\u611f\u5728\u8def\u4e0a\u3002 01 \u6708 09 \u65e5 \u590d\u53d8\u4f5c\u4e1aover 01 \u6708 10 \u65e5 \u53c8\u8ba4\u8bc6\u4e86\u4e00\u904d\u73ed\u7ea7\u540c\u5b66\uff0c\u5f00\u5fc3\uff01 \u627e\u5230\u4e86\u4e00\u4e2ahttps://www.linerider.com/\u597d\u73a9\u7684\u7f51\u7ad9\uff01 01 \u6708 11 \u65e5 LOL\u5927\u4e71\u6597\u8bc4\u5206\u4e0a10\uff01 \u770b\u5b8c\u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b 01 \u6708 12 \u65e5 \u9a6c\u539f\u597d\u591a\u554a\uff01 01 \u6708 13 \u65e5 \u73a9\u7684\u5f88\u618b\u5c48\u3002 01 \u6708 14 \u65e5 \u201c\u5f53\u7537\u4eba\u5f97\u5230\u4e86\u7ea2\u73ab\u7470\uff0c\u5979\u5c31\u53d8\u6210\u4e86\u4e00\u62b9\u868a\u5b50\u8840\uff0c\u767d\u73ab\u7470\u5219\u6210\u4e3a\u7a97\u524d\u768e\u6d01\u7684\u767d\u6708\u5149\uff0c\u8ba9\u4ed6\u53ef\u671b\u4e0d\u53ef\u53ca\uff1b\u800c\u5f53\u7537\u4eba\u5f97\u5230\u4e86\u767d\u73ab\u7470\uff0c\u5979\u5c31\u6210\u4e3a\u4e00\u7c92\u5927\u7c73\u996d\u7c92\uff0c\u800c\u7ea2\u73ab\u7470\u5219\u6210\u4e3a\u4ed6\u80f8\u524d\u7684\u6731\u7802\u75e3\uff0c\u662f\u6c38\u8fdc\u7684\u75db\uff0c\u6c38\u8fdc\u7684\u8bb0\u53f7\u3002\u201d\u2014\u2014\u2014\u2014\u5f20\u7231\u73b2\u300a\u7ea2\u73ab\u7470\u4e0e\u767d\u73ab\u7470\u300b 01 \u6708 15 \u65e5 \u54a3 01 \u6708 16 \u65e5 \u54a3 01 \u6708 17 \u65e5 \u54a3 01 \u6708 18 \u65e5 \u54a3 01 \u6708 19 \u65e5 \u54a3 01 \u6708 20 \u65e5 \u54a3 01 \u6708 21 \u65e5 \u54a3 01 \u6708 22 \u65e5 \u590d\u53d8\u51fd\u6570\u8003\u8bd5\u771f\u7684\u7b80\u5355\u3002 01 \u6708 23 \u65e5 \u8003\u5b8c\uff0c\u56de\u5bb6 01 \u6708 24 \u65e5 \u521d\u4e00\u6570\u5b66\u662f\u771f\u7684\u7b80\u5355\uff0c\u9ad8\u4e8c\u6570\u5b66\u662f\u771f\u7684\u96be\u3002 md 01 \u6708 25 \u65e5 \u5c0f\u5730\u65b9\u7684\u6253\u5370\u5e97\u771f\u7684\u8d35\uff0c\u5c31\u5f88\u79bb\u8c31\u3002 \u9ad8\u4e2d\u540c\u5b66\u88ab\u9a9a\u6270\u4e86\uff0c\u8fd9\u662f\u6211\u6ca1\u60f3\u7684\u3002\u5979\u751a\u81f3\u5728\u5f53\u670d\u52a1\u5458\u7684\u65f6\u5019\u8fd8\u9047\u5230\u4e86\u9ad8\u4e2d\u540c\u5b66\u7684\u5bb6\u957f\u54c8\u54c8\u54c8\u54c8\u3002 01 \u6708 26 \u65e5 \u6628\u65e5\u7ec3\u5b57\u6253\u5361\u7b2c\u4e00\u5929\u3002 \u4e50\u6e38\u539f \u674e\u5546\u9690 \u5411\u665a\u610f\u4e0d\u9002 \u9a71\u8f66\u767b\u53e4\u539f \u5915\u9633\u65e0\u9650\u597d \u53ea\u662f\u8fd1\u9ec4\u660f 01 \u6708 27 \u65e5 \u54a3 01 \u6708 28 \u65e5 \u54a3 01 \u6708 29 \u65e5 \u54a3 01 \u6708 30 \u65e5 \u5236\u5b9a\u8003\u7814\u4e00\u8f6e\u590d\u4e60\u8ba1\u5212\uff0c2-3\u6708\u4e3a\u4e00\u8f6e\u590d\u4e60\u65f6\u95f4\u3002 \u8bb0\u5f55\u6bcf\u5929\u5b66\u4e60\u60c5\u51b5\uff0c\u4e00\u5468\u603b\u7ed3\u4e00\u6b21\uff0c\u6bcf\u5468\u516d\u4e3a\u4e00\u5468\u67e5\u6f0f\u8865\u7f3a\u65f6\u95f4\u3002 01 \u6708 31 \u65e5 \u54a3 02 \u6708 01 \u65e5 \u65e9\u4e0a7\uff1a30\u5f00\u59cb\u4e00\u5929\u7684\u5b66\u4e60\u3002 20min\u82f1\u5355\u8bcd\u4e00\u8f6eover 8\uff1a20-8\uff1a40\u592a\u56f0\u4e86\uff0c\u7761\u4e862333 8\uff1a00-10\uff1a40\u6570\u5b6693-115p \u7ec3\u5b5720min\uff0c11\uff1a00\u5403\u996d 11\uff1a45\u7ec3\u5b57\u7ed3\u675f 12\uff1a00-14\uff1a00\u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u7ae0\u5269\u4e2a\u603b\u7ed3 14\uff1a00-15\uff1a00\u8fd0\u52a81h 15\uff1a00-15\uff1a10\u8ba1\u7f51\u4e00\u5269\u4f59\u770b\u5b8c 15\uff1a10-15\uff1a50\u4f11\u606f 15\uff1a50-16\uff1a50leetcode0001 17\uff1a00-17\uff1a40\u665a\u996d 17\uff1a40-18\uff1a20\u82f1\u8bed\u9605\u8bfb\uff0c\u592a\u6162\u4e86 18\uff1a20-19\uff1a00\u82f1\u8bed\u4e8c\u8f6e 19\uff1a10-20\uff1a00\u767e\u5e74\u5b64\u72ec 20\uff1a00-20\uff1a20\u56f0\u4e86md 20\uff1a20-21\uff1a00\u6570\u5b66116-125p \u5b66\u4e60\u603b\u65f6\u957f\uff1a20+140+20+20+120+10+60+40+40+50+40=560min \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u9ad8\u6548\u7684\u4e00\u5929\uff0c\u5f88\u6ee1\u610f\uff0c\u90e8\u5206\u4efb\u52a1\u6548\u7387\u4e0d\u662f\u5f88\u9ad8\uff0c\u53ef\u4ee5\u6539\u8fdb\u3002\u5b89\u6392\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\uff0c\u5e76\u8d85\u989d\u5b8c\u6210\u90e8\u5206\u6570\u5b66\u3002\u51b2\uff01 02 \u6708 02 \u65e5 \u65e9\u4e0a7\uff1a30\u5f00\u59cb\u4e00\u5929\u7684\u5b66\u4e60\uff0cyeah\uff01 7\uff1a30-7\uff1a50\u82f1\u8bed\u5355\u8bcd\u4e00\u8f6e 8\uff1a00-10\uff1a00\u6570\u5b66125-146p 8\uff1a35-8\uff1a55zzz~ 10\uff1a00-10\uff1a40\u8ba1\u7f51part 11\uff1a00-12\uff1a00\u5348\u9910\u52a0\u53d6\u5feb\u9012\uff0c\u8fd9\u6bb5\u65f6\u95f4\u5c31\u7ec3\u4e86\u4e24\u4e2a\u5b57\uff0c\u88c2\u5f00\u3002 12\uff1a00-13\uff1a30\u8ba1\u7f51over 13\uff1a30-14\uff1a00leetcode 14\uff1a00-15\uff1a00\u8fd0\u52a8 15\uff1a00-15\uff1a30\u4f11\u606f 15\uff1a30-16\uff1a30leetcode 16\uff1a30-16\uff1a50\u7ec3\u5b57 16\uff1a50-17\uff1a10\u5403\u996d 17\uff1a10-19\uff1a30\u526a\u811a\u8dbe\u7532\uff0c\u4e70\u6c34\u679c\uff0c\u4e70\u9762\u5305 19\uff1a30-20\uff1a20\u7ec3\u5b57 20\uff1a20-20\uff1a40\u82f1\u9605\u8bfb 20\uff1a40-21\uff1a40\u5355\u8bcd\u4e8c\u8f6e \u5b66\u4e60\u603b\u65f6\u957f\uff1a20+100+40+90+30+60+20+50+20+60=490min \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u4e0b\u5348\u5dee\u70b9\u5b66\u5d29\u4e86\uff0c\u8fd8\u597d\u633a\u4f4f\u4e86\uff0c\u7a33\u3002\u51b2\uff01\u76f8\u6bd4\u4e8e\u6628\u5929\u5b66\u4e60\u65f6\u957f\u53d8\u5c11\u4e8670min\uff0c\u5173\u952e\u5728\u6570\u5b66\u90e8\u5206\u5728\u6628\u5929\u5b66\u6389\u4e86\uff0c\u8bf4\u5b9e\u8bdd\uff0c\u5fd9\u91cc\u5077\u95f2\u8fd8\u633a\u723d\u7684\u3002 02 \u6708 03 \u65e5 \u4eca\u5929\u540c\u6837\u662f7\uff1a30\u5f00\u5b66\uff0c\u4eca\u5929\u7684\u4efb\u52a1\u6bd4\u8f83\u7d27\u5f20\uff0c\u4eca\u665a\u8981\u51fa\u53bb\u901b\u8d85\u5e02\u548c\u770b\u7535\u5f71\uff0c\u767d\u5929\u5f97\u6293\u7d27\u4e86\u3002 7\uff1a30-7\uff1a40\u542f\u52a8\u7535\u8111\uff0c\u6253\u5f00\u4e00\u4e9b\u4e1c\u897f 7\uff1a40-8\uff1a05\u82f1\u53551 8\uff1a05-8\uff1a50\u6570147-157p \u4f11\u606f10min 9\uff1a00-11\uff1a00\u8ba1\u7f51part 11\uff1a30-13\uff1a30leetcode 13\uff1a30-14\uff1a00\u8ba1\u7f51 14\uff1a00-14\uff1a10\u8fd0\u52a8 14\uff1a10-15\uff1a00\u8ba1\u7f51 15\uff1a00-15\uff1a30\u4f11\u606f 15\uff1a30-16\uff1a40\u6570157-171p 16\uff1a40-16\uff1a55leetcode \u5b66\u4e60\u603b\u65f6\u957f\uff1a25+45+120+120+30+50+70=460 \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u4e0d\u884c\u4e86\uff0c\u8ba1\u7f51\u548c\u6570\u5b66\u90fd\u5f00\u59cb\u8d8a\u6765\u8d8a\u590d\u6742\u4e86\uff0c\u4eca\u65e5\u5b66\u4e60\u6548\u7387\u6781\u4f4e\uff0c\u76f4\u63a5\u88c2\u5f00\uff0c\u4ee3\u7801\u4e5f\u8c03\u8bd5\u4e86\u5f88\u4e45\uff0cmd\u665a\u4e0a\u57fa\u672c\u6ca1\u6709\u65f6\u95f4\u5b66\u4e60\u3002 \u4eca\u65e5\u6b20\u503a\uff1a\u8ba1\u7f51\u94fe\u8def\u5c42\u5269\u4f59\uff0c\u6570\u5b66\u5e38\u5fae\u5206\u65b9\u7a0b\u7684\u4e60\u9898\uff08\u4e3b\u8981\u662f\u4e0d\u61c2\u8fd9\u4e00\u5757\u5185\u5bb9\uff09\uff0c\u82f1\u9605\u8bfb\uff0c\u7ec3\u5b57\u3002\u6de6\uff0c\u5149\u5217\u51fa\u6765\u5c31\u597d\u591a\u3002 02 \u6708 04 \u65e5 \u4eca\u5929\u7761\u8fc7\u4e86\uff0c\u76f4\u63a5\u6ca1\u542c\u89c1\u95f9\u949f\uff0c8\u70b9\u5f00\u59cb\u5b66\u4e60\u3002 8\uff1a00-9\uff1a45\uff08\u8865\uff09\u82f1\u5355\u4e8c\u8f6e 8\uff1a40-9\uff1a20zzz~ 9\uff1a45-10\uff1a35\u82f1\u5355\u4e00\u8f6e 10\uff1a35-11\uff1a00leetcode 12\u70b9\u5f00\u59cb\u5b66\u4e60 12\uff1a00-13\uff1a40\uff08\u8865\uff09\u8ba1\u7f51 13\uff1a40-14\uff1a00\u4f11\u606f 14\uff1a00-14\uff1a50\u8fd0\u52a8\u52a0\u4f11\u606f 14\uff1a50-15\uff1a45\uff08\u8865\uff09\u8ba1\u7f51 16\uff1a00-16\uff1a50\uff08\u8865\uff09\u8ba1\u7f51 17\uff1a20-18\uff1a00\uff08\u8865\uff09\u8ba1\u7f51 19\uff1a30-20\uff1a10\u82f1\u5355\u4e8c\u8f6e 20\uff1a25-20\uff1a50\uff08\u8865\uff09\u82f1\u9605 21\uff1a10-21\uff1a30\u82f1\u9605 \u5b66\u4e60\u603b\u65f6\u957f\uff1a65+50+25+100+55+50+40+40+25+20=450min \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u53ef\u4ee5\uff0c\u575a\u6301\u4f4f\u4e86\uff0c\u52a0\u6cb9\uff0c\u51b2 \u4eca\u65e5\u7d2f\u8ba1\u6b20\u503a\uff1a\u6570\u4e00\u7ae0\uff0c\u8ba1\u7f51\u4e00\u7ae0\uff0c\u7ec3\u5b57\u4e24\u5929\uff0c\u6570\u5e38\u5fae\u5206\u65b9\u7a0b\u3002 02 \u6708 05 \u65e5 7\uff1a25\u5f00\u5b66 7\uff1a25-8\uff1a05\u82f1\u5355\u4e00\u8f6e 8\uff1a05-9\uff1a00\uff08\u8865\uff09\u6570179-189p 9\uff1a40-10\uff1a05\u82f1\u9605 10\uff1a05-10\uff1a35\uff08\u8865\uff09\u6570189-196p 12\uff1a30-13\uff1a40\uff08\u8865\uff09\u8ba1\u7f51 13\uff1a40-14\uff1a00\u4f11\u606f 14\uff1a00-14\uff1a40\uff08\u8865\uff09\u8ba1\u7f51 14\uff1a40-15\uff1a00\u4f11\u606f 15\uff1a00-16\uff1a00\uff08\u8865\uff09\u8ba1\u7f51 16\uff1a30-17\uff1a20leetcode 21\uff1a10-21\uff1a50leetcode \u5b66\u4e60\u603b\u65f6\u957f\uff1a40+55+25+30+70+40+60+50+40=410min \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u73a9\u624b\u673a\u6b21\u6570\u660e\u663e\u589e\u591a\uff0c\u9891\u7e41\u7684\u4f11\u606f\u3002 \u4eca\u65e5\u7d2f\u8ba1\u6b20\u503a\uff1a\u6570\u4e00\u7ae0\uff0c\u8ba1\u7f511.5\u7ae0\uff0c\u7ec3\u5b57\u4e09\u5929\uff0c\u82f1\u5355\u4e8c\u8f6e\uff0c\u6570\u5e38\u5fae\u5206\u65b9\u7a0b\u3002\u3002\u3002 02 \u6708 06 \u65e5 7\uff1a20-8\uff1a00leetcode 8\uff1a00-8\uff1a30\u82f1\u9605 8\uff1a30-9\uff1a10\u82f1\u5355 9\uff1a10-10\uff1a00\u4f11\u606f 10\uff1a00-11\uff1a00\u82f1\u5355 12\uff1a00-12\uff1a20\u82f1\u5355 14\uff1a50-16\uff1a50\uff08\u8865\uff09\u6570\u5b66 17\uff1a40-18\uff1a05\uff08\u8865\uff09\u6570\u5b66 19\uff1a20-19\uff1a30\uff08\u8865\uff09\u6570\u5b66 19\uff1a30-20\uff1a25\u82f1\u5355\u4e8c\u8f6e 20\uff1a25-20\uff1a50math 21\uff1a10-21\uff1a30math \u5b66\u4e60\u603b\u65f6\u957f\uff1a40+30+40+60+20+120+25+10+55+25+20=485min \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u73a9\u624b\u673a\u6b21\u6570\u589e\u591a\uff0c\u4e14\u65f6\u95f4\u53d8\u957f\uff0c\u5b66\u4e60\u79ef\u6781\u6027\u4e0b\u964d\uff0c\u6de6\uff01 \u4eca\u65e5\u7d2f\u8ba1\u6b20\u503a\uff1amath-1\uff0ccn-2.5\uff0c\u7ec3\u5b574\u5929\uff0c\u6570\u5e38\u5fae\u5206\u65b9\u7a0b\u3002 02 \u6708 07 \u65e5 8:00getup 8:20-8:45leetcode","title":"Y2021"},{"location":"content/leetcode/0001/","text":"\u9898\u76ee \u4e24\u6570\u4e4b\u548c \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c target\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 \u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 \u6837\u4f8b \u8f93\u5165\uff1anums = [2,7,11,15], target = 9 \u8f93\u51fa\uff1a[0,1] \u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002 \u9898\u76ee\u5927\u610f \u627e\u5230\u4e24\u4e2a\u6570\u5b57\u548c\u7b49\u4e8e\u76ee\u6807\u6570\u5b57\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u4e0b\u6807\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u66b4\u529b\uff0c\u53cc\u5c42for\u5faa\u73af\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc724.86%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(2)\uff0c\u8d85\u8fc793.48%\u3002 C++\u601d\u8def\u4e8c \u4f7f\u7528map\u91cd\u65b0\u5b58\u50a8\uff0c\u7528\u4e00\u904dfor\u6765\u5bfb\u627e\u9700\u8981\u6570\u5b57\u3002 \u56e0\u4e3a\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u5b57\u6765\u8bf4\uff0c\u5b83\u7684\u914d\u5bf9\u7684\u6570\u5b57\u4e00\u5b9a\u5728\u4ed6\u7684\u524d\u9762\uff0c\u6240\u4ee5\u4e00\u8fb9for\u5faa\u73af\u8db3\u591f\u3002 \u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0cmap\u7684find\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(logN)\uff0c\u8d85\u8fc799%\u3002\u6700\u6709\u5229\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528O(1)\u7684\u7a7a\u95f4\uff0c\u6700\u4e0d\u5229\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528O(n-1)\u7684\u7a7a\u95f4\uff0c\u8d85\u8fc785%\u3002 Python\u601d\u8def\u4e00 \u4f7f\u7528List\u81ea\u5e26\u7684\u4e00\u4e9b\u65b9\u6cd5\uff0c\u5982in\u65b9\u6cd5\u53ef\u4ee5\u5224\u65ad\u67d0\u4e2a\u503c\u662f\u5426\u5728\u5217\u8868\u4e2d\uff0cindex\u65b9\u6cd5\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u4e0b\u6807\u3002 in\u5728\u5217\u8868\u4e2d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(N)\u7684\uff0cindex\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\u7684\uff0c\u8d85\u8fc726.55%\uff0cin\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u672a\u77e5(?)\uff0cindex\u7a7a\u95f4\u590d\u6742\u5ea6\u672a\u77e5(?)\uff0c\u8d85\u8fc745.45%\u3002 Python\u601d\u8def\u4e8c \u540cC++\u601d\u8def\u4e8c\u3002 \u65f6\u95f4\u8d85\u8fc749.20%\uff0c\u7a7a\u95f4\u8d85\u8fc757.44%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { int len=nums.size(); vector<int> ans; for(int i=0;i<len-1;++i){ for(int j=i+1;j<len;++j){ if(nums[i]+nums[j]==target){ ans.push_back(i);ans.push_back(j); } } } return ans; } }; C++\u601d\u8def\u4e8c class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { map<int,int> m; for(int i=0;i<nums.size();++i){ map<int,int>::iterator it; it=m.find(target-nums[i]); if(it!=m.end()){ return {it->second,i}; } m[nums[i]]=i; } return {}; } }; Python\u601d\u8def\u4e00 class Solution: def twoSum(self, nums: List[int], target: int) -> List[int]: for i in range(len(nums)): if target-nums[i] in nums: j=nums.index(target-nums[i]) if j!=i: return [i,j] Python\u601d\u8def\u4e8c class Solution: def twoSum(self, nums, target): hashmap={} for index,num in enumerate(nums): ano=target-num if ano in hashmap: return [hashmap[ano],index] hashmap[num]=index return None","title":"XD0001"},{"location":"content/leetcode/0001/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0001/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c target\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 \u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002","title":"\u4e24\u6570\u4e4b\u548c"},{"location":"content/leetcode/0001/#_3","text":"\u8f93\u5165\uff1anums = [2,7,11,15], target = 9 \u8f93\u51fa\uff1a[0,1] \u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0001/#_4","text":"\u627e\u5230\u4e24\u4e2a\u6570\u5b57\u548c\u7b49\u4e8e\u76ee\u6807\u6570\u5b57\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u4e0b\u6807\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0001/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0001/#c","text":"\u66b4\u529b\uff0c\u53cc\u5c42for\u5faa\u73af\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc724.86%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(2)\uff0c\u8d85\u8fc793.48%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0001/#c_1","text":"\u4f7f\u7528map\u91cd\u65b0\u5b58\u50a8\uff0c\u7528\u4e00\u904dfor\u6765\u5bfb\u627e\u9700\u8981\u6570\u5b57\u3002 \u56e0\u4e3a\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u5b57\u6765\u8bf4\uff0c\u5b83\u7684\u914d\u5bf9\u7684\u6570\u5b57\u4e00\u5b9a\u5728\u4ed6\u7684\u524d\u9762\uff0c\u6240\u4ee5\u4e00\u8fb9for\u5faa\u73af\u8db3\u591f\u3002 \u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0cmap\u7684find\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(logN)\uff0c\u8d85\u8fc799%\u3002\u6700\u6709\u5229\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528O(1)\u7684\u7a7a\u95f4\uff0c\u6700\u4e0d\u5229\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528O(n-1)\u7684\u7a7a\u95f4\uff0c\u8d85\u8fc785%\u3002","title":"C++\u601d\u8def\u4e8c"},{"location":"content/leetcode/0001/#python","text":"\u4f7f\u7528List\u81ea\u5e26\u7684\u4e00\u4e9b\u65b9\u6cd5\uff0c\u5982in\u65b9\u6cd5\u53ef\u4ee5\u5224\u65ad\u67d0\u4e2a\u503c\u662f\u5426\u5728\u5217\u8868\u4e2d\uff0cindex\u65b9\u6cd5\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u4e0b\u6807\u3002 in\u5728\u5217\u8868\u4e2d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(N)\u7684\uff0cindex\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\u7684\uff0c\u8d85\u8fc726.55%\uff0cin\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u672a\u77e5(?)\uff0cindex\u7a7a\u95f4\u590d\u6742\u5ea6\u672a\u77e5(?)\uff0c\u8d85\u8fc745.45%\u3002","title":"Python\u601d\u8def\u4e00"},{"location":"content/leetcode/0001/#python_1","text":"\u540cC++\u601d\u8def\u4e8c\u3002 \u65f6\u95f4\u8d85\u8fc749.20%\uff0c\u7a7a\u95f4\u8d85\u8fc757.44%\u3002","title":"Python\u601d\u8def\u4e8c"},{"location":"content/leetcode/0001/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0001/#c_2","text":"class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { int len=nums.size(); vector<int> ans; for(int i=0;i<len-1;++i){ for(int j=i+1;j<len;++j){ if(nums[i]+nums[j]==target){ ans.push_back(i);ans.push_back(j); } } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0001/#c_3","text":"class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { map<int,int> m; for(int i=0;i<nums.size();++i){ map<int,int>::iterator it; it=m.find(target-nums[i]); if(it!=m.end()){ return {it->second,i}; } m[nums[i]]=i; } return {}; } };","title":"C++\u601d\u8def\u4e8c"},{"location":"content/leetcode/0001/#python_2","text":"class Solution: def twoSum(self, nums: List[int], target: int) -> List[int]: for i in range(len(nums)): if target-nums[i] in nums: j=nums.index(target-nums[i]) if j!=i: return [i,j]","title":"Python\u601d\u8def\u4e00"},{"location":"content/leetcode/0001/#python_3","text":"class Solution: def twoSum(self, nums, target): hashmap={} for index,num in enumerate(nums): ano=target-num if ano in hashmap: return [hashmap[ano],index] hashmap[num]=index return None","title":"Python\u601d\u8def\u4e8c"},{"location":"content/leetcode/0002/","text":"\u9898\u76ee \u4e24\u6570\u76f8\u52a0 \u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002 \u6837\u4f8b \u8f93\u5165\uff1al1 = [2,4,3], l2 = [5,6,4] \u8f93\u51fa\uff1a[7,0,8] \u89e3\u91ca\uff1a342 + 465 = 807. \u9898\u76ee\u5927\u610f \u9898\u76ee\u7528\u94fe\u8868\u53cd\u5e8f\u5b58\u50a8\u4e86\u4e24\u4e2a\u6570\uff0c\u9700\u8981\u7528\u94fe\u8868\u8f93\u51fa\u76f8\u52a0\u4e4b\u540e\u7684\u7ed3\u679c\u53cd\u5e8f\u8f93\u51fa\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u76f4\u63a5\u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u52a0\uff0c\u5728\u4e00\u4e2a\u6570\u52a0\u5b8c\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u5269\u4f59\u7684\u52a00\u5373\u53ef\uff0c\u6700\u540e\u591a\u51fa\u6765\u7684\u8fdb\u4f4d\u5728\u8fdb\u884c\u4e00\u6b65\u64cd\u4f5c\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc785.09%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc784.61%\u3002 Python\u601d\u8def\u4e00 \u540cC++\u601d\u8def\u4e00\uff0c\u65f6\u95f4\u8d85\u8fc799.22%\uff0c\u7a7a\u95f4\u8d85\u8fc718.23% Java\u601d\u8def\u4e00 \u540cC++\u601d\u8def\u4e00\uff0c\u65f6\u95f4\u8d85\u8fc799.93%\uff0c\u7a7a\u95f4\u8d85\u8fc715.76%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { int len1=0,len2=0; ListNode *p=new ListNode(-1),*q=p; int tmp=0; while(l1||l2){ int val1=l1?l1->val:0; int val2=l2?l2->val:0; int sum=val1+val2+tmp; tmp=sum/10; q->next=new ListNode(sum%10); q=q->next; if(l1!=nullptr){ l1=l1->next; } if(l2!=nullptr){ l2=l2->next; } } if(tmp==1){ q->next=new ListNode(1); } return p->next; } }; Python\u601d\u8def\u4e00 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: tmp=0 p=ListNode(-1) q=p while(l1 or l2): val1=l1.val if l1 else 0 val2=l2.val if l2 else 0 cnt=val1+val2+tmp # print(tmp) tmp=cnt//10 q.next=ListNode(cnt%10) q=q.next if l1: l1=l1.next if l2: l2=l2.next if tmp==1: q.next=ListNode(1) return p.next Java\u601d\u8def\u4e00 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { int tmp=0; ListNode p=new ListNode(-1); ListNode q=p; while(l1!=null||l2!=null){ int val1=l1!=null?l1.val:0; int val2=l2!=null?l2.val:0; int sum=tmp+val1+val2; tmp=sum/10; q.next=new ListNode(sum%10); q=q.next; if(l1!=null){ l1=l1.next; } if(l2!=null){ l2=l2.next; } } if(tmp==1){ q.next=new ListNode(1); } return p.next; } }","title":"XD0002"},{"location":"content/leetcode/0002/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0002/#_2","text":"\u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002","title":"\u4e24\u6570\u76f8\u52a0"},{"location":"content/leetcode/0002/#_3","text":"\u8f93\u5165\uff1al1 = [2,4,3], l2 = [5,6,4] \u8f93\u51fa\uff1a[7,0,8] \u89e3\u91ca\uff1a342 + 465 = 807.","title":"\u6837\u4f8b"},{"location":"content/leetcode/0002/#_4","text":"\u9898\u76ee\u7528\u94fe\u8868\u53cd\u5e8f\u5b58\u50a8\u4e86\u4e24\u4e2a\u6570\uff0c\u9700\u8981\u7528\u94fe\u8868\u8f93\u51fa\u76f8\u52a0\u4e4b\u540e\u7684\u7ed3\u679c\u53cd\u5e8f\u8f93\u51fa\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0002/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0002/#c","text":"\u76f4\u63a5\u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u52a0\uff0c\u5728\u4e00\u4e2a\u6570\u52a0\u5b8c\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u5269\u4f59\u7684\u52a00\u5373\u53ef\uff0c\u6700\u540e\u591a\u51fa\u6765\u7684\u8fdb\u4f4d\u5728\u8fdb\u884c\u4e00\u6b65\u64cd\u4f5c\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc785.09%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc784.61%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0002/#python","text":"\u540cC++\u601d\u8def\u4e00\uff0c\u65f6\u95f4\u8d85\u8fc799.22%\uff0c\u7a7a\u95f4\u8d85\u8fc718.23%","title":"Python\u601d\u8def\u4e00"},{"location":"content/leetcode/0002/#java","text":"\u540cC++\u601d\u8def\u4e00\uff0c\u65f6\u95f4\u8d85\u8fc799.93%\uff0c\u7a7a\u95f4\u8d85\u8fc715.76%\u3002","title":"Java\u601d\u8def\u4e00"},{"location":"content/leetcode/0002/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0002/#c_1","text":"/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { int len1=0,len2=0; ListNode *p=new ListNode(-1),*q=p; int tmp=0; while(l1||l2){ int val1=l1?l1->val:0; int val2=l2?l2->val:0; int sum=val1+val2+tmp; tmp=sum/10; q->next=new ListNode(sum%10); q=q->next; if(l1!=nullptr){ l1=l1->next; } if(l2!=nullptr){ l2=l2->next; } } if(tmp==1){ q->next=new ListNode(1); } return p->next; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0002/#python_1","text":"# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: tmp=0 p=ListNode(-1) q=p while(l1 or l2): val1=l1.val if l1 else 0 val2=l2.val if l2 else 0 cnt=val1+val2+tmp # print(tmp) tmp=cnt//10 q.next=ListNode(cnt%10) q=q.next if l1: l1=l1.next if l2: l2=l2.next if tmp==1: q.next=ListNode(1) return p.next","title":"Python\u601d\u8def\u4e00"},{"location":"content/leetcode/0002/#java_1","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { int tmp=0; ListNode p=new ListNode(-1); ListNode q=p; while(l1!=null||l2!=null){ int val1=l1!=null?l1.val:0; int val2=l2!=null?l2.val:0; int sum=tmp+val1+val2; tmp=sum/10; q.next=new ListNode(sum%10); q=q.next; if(l1!=null){ l1=l1.next; } if(l2!=null){ l2=l2.next; } } if(tmp==1){ q.next=new ListNode(1); } return p.next; } }","title":"Java\u601d\u8def\u4e00"},{"location":"content/leetcode/0003/","text":"\u9898\u76ee \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b57\u4e32 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u6837\u4f8b \u8f93\u5165: s = \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u9898\u76ee\u5927\u610f \u5bfb\u627e\u4e00\u4e2a\u8fde\u7eed\u7684\uff0c\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u4e32\uff0c\u8f93\u51fa\u5176\u957f\u5ea6\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u7528map\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u51fa\u73b0\u91cd\u590d\u5c31\u66f4\u65b0\uff0c\u5e76\u66f4\u65b0\u6700\u957f\u4e32\u957f\u5ea6\uff0c\u7528\u4e00\u4e2a\u53d8\u91cf\u6807\u8bb0\u4f46\u524d\u5b57\u4e32\u7684\u4f4d\u7f6e\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc770.16%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(Llen(s))\uff0c\u5b57\u7b26\u4e32\u4e2d\u91cd\u590d\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u8d85\u8fc765%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int lengthOfLongestSubstring(string s) { int len=s.length(); int ans=0; map<int,int> m; int tmp=1; for(int i=0;i<len;++i){ if(m[s[i]]){ ans=max(ans,i+1-tmp); tmp=max(tmp,m[s[i]]+1); } m[s[i]]=i+1; } if(tmp){ ans=max(ans,len+1-tmp); } return ans; } };","title":"XD0003"},{"location":"content/leetcode/0003/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0003/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002","title":"\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b57\u4e32"},{"location":"content/leetcode/0003/#_3","text":"\u8f93\u5165: s = \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0003/#_4","text":"\u5bfb\u627e\u4e00\u4e2a\u8fde\u7eed\u7684\uff0c\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u4e32\uff0c\u8f93\u51fa\u5176\u957f\u5ea6\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0003/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0003/#c","text":"\u7528map\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u51fa\u73b0\u91cd\u590d\u5c31\u66f4\u65b0\uff0c\u5e76\u66f4\u65b0\u6700\u957f\u4e32\u957f\u5ea6\uff0c\u7528\u4e00\u4e2a\u53d8\u91cf\u6807\u8bb0\u4f46\u524d\u5b57\u4e32\u7684\u4f4d\u7f6e\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc770.16%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(Llen(s))\uff0c\u5b57\u7b26\u4e32\u4e2d\u91cd\u590d\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u8d85\u8fc765%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0003/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0003/#c_1","text":"class Solution { public: int lengthOfLongestSubstring(string s) { int len=s.length(); int ans=0; map<int,int> m; int tmp=1; for(int i=0;i<len;++i){ if(m[s[i]]){ ans=max(ans,i+1-tmp); tmp=max(tmp,m[s[i]]+1); } m[s[i]]=i+1; } if(tmp){ ans=max(ans,len+1-tmp); } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0004/","text":"\u9898\u76ee \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 nums1 \u548c nums2\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002 \u8fdb\u9636\uff1a\u4f60\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log (m+n)) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f \u6837\u4f8b \u8f93\u5165\uff1anums1 = [1,3], nums2 = [2] \u8f93\u51fa\uff1a2.00000 \u89e3\u91ca\uff1a\u5408\u5e76\u6570\u7ec4 = [1,2,3] \uff0c\u4e2d\u4f4d\u6570 2 \u9898\u76ee\u5927\u610f \u7ed9\u4e24\u4e2a\u6570\u7ec4\uff0c\u627e\u4e24\u4e2a\u6570\u7ec4\u5408\u5e76\u540e\u7684\u4e2d\u4f4d\u6570\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u5148\u5408\u5e76\uff0c\u518d\u6392\u5e8f\uff0c\u518d\u627e\u4e2d\u95f4\u7684\u6570\u3002insert\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0csort\u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(NlogN)\uff0c\u65f6\u95f4\u8d85\u8fc779.27%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc786.34%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) { nums1.insert(nums1.end(),nums2.begin(),nums2.end()); sort(nums1.begin(),nums1.end()); int len=nums1.size(); double ans=0; if(len%2==0){ ans=(nums1[len/2]+nums1[len/2-1])/2.0; }else{ ans=nums1[(len-1)/2]; } return ans; } };","title":"XD0004"},{"location":"content/leetcode/0004/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0004/#_2","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 nums1 \u548c nums2\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002 \u8fdb\u9636\uff1a\u4f60\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log (m+n)) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f","title":"\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570"},{"location":"content/leetcode/0004/#_3","text":"\u8f93\u5165\uff1anums1 = [1,3], nums2 = [2] \u8f93\u51fa\uff1a2.00000 \u89e3\u91ca\uff1a\u5408\u5e76\u6570\u7ec4 = [1,2,3] \uff0c\u4e2d\u4f4d\u6570 2","title":"\u6837\u4f8b"},{"location":"content/leetcode/0004/#_4","text":"\u7ed9\u4e24\u4e2a\u6570\u7ec4\uff0c\u627e\u4e24\u4e2a\u6570\u7ec4\u5408\u5e76\u540e\u7684\u4e2d\u4f4d\u6570\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0004/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0004/#c","text":"\u5148\u5408\u5e76\uff0c\u518d\u6392\u5e8f\uff0c\u518d\u627e\u4e2d\u95f4\u7684\u6570\u3002insert\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0csort\u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(NlogN)\uff0c\u65f6\u95f4\u8d85\u8fc779.27%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc786.34%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0004/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0004/#c_1","text":"class Solution { public: double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) { nums1.insert(nums1.end(),nums2.begin(),nums2.end()); sort(nums1.begin(),nums1.end()); int len=nums1.size(); double ans=0; if(len%2==0){ ans=(nums1[len/2]+nums1[len/2-1])/2.0; }else{ ans=nums1[(len-1)/2]; } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0005/","text":"\u9898\u76ee \u6700\u957f\u56de\u6587\u5b50\u4e32 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002 \u6837\u4f8b \u8f93\u5165\uff1as = \"babad\" \u8f93\u51fa\uff1a\"bab\" \u89e3\u91ca\uff1a\"aba\" \u540c\u6837\u662f\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848\u3002 \u9898\u76ee\u5927\u610f \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\uff0c\u8f93\u51fa\u5b83\u7684\u5927\u5c0f\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 manacher\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc793.39%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc772.05% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: string longestPalindrome(string s) { if(size(s)<2)return s; string str=\"#\"; for(auto& x:s){ str+=x; str+='#'; } int sz=size(str); vector<int> p(sz); int start=0; int maxlen=0; int id=0; int mx=0; for(int i=0;i<sz;++i){ if(i<mx){ p[i]=min((mx-i),p[2*id-i]); }else if(i==mx){ p[i]=1; } while(i>=p[i]&&str[i-p[i]]==str[i+p[i]]){ ++p[i]; } if(mx<i+p[i]){ id=i; mx=i+p[i]; } if(p[i]-1>maxlen){ start=i; maxlen=p[i]-1; } } return s.substr((start-p[start]+1)/2,maxlen); } };","title":"XD0005"},{"location":"content/leetcode/0005/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0005/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"content/leetcode/0005/#_3","text":"\u8f93\u5165\uff1as = \"babad\" \u8f93\u51fa\uff1a\"bab\" \u89e3\u91ca\uff1a\"aba\" \u540c\u6837\u662f\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848\u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0005/#_4","text":"\u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\uff0c\u8f93\u51fa\u5b83\u7684\u5927\u5c0f\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0005/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0005/#c","text":"manacher\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc793.39%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc772.05%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0005/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0005/#c_1","text":"class Solution { public: string longestPalindrome(string s) { if(size(s)<2)return s; string str=\"#\"; for(auto& x:s){ str+=x; str+='#'; } int sz=size(str); vector<int> p(sz); int start=0; int maxlen=0; int id=0; int mx=0; for(int i=0;i<sz;++i){ if(i<mx){ p[i]=min((mx-i),p[2*id-i]); }else if(i==mx){ p[i]=1; } while(i>=p[i]&&str[i-p[i]]==str[i+p[i]]){ ++p[i]; } if(mx<i+p[i]){ id=i; mx=i+p[i]; } if(p[i]-1>maxlen){ start=i; maxlen=p[i]-1; } } return s.substr((start-p[start]+1)/2,maxlen); } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0006/","text":"\u9898\u76ee Z\u5b57\u5f62\u53d8\u6362 \u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32 s \u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570 numRows \uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c Z \u5b57\u5f62\u6392\u5217\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a \"PAYPALISHIRING\" \u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a P A H N A P L S I I G Y I R \u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a\"PAHNAPLSIIGYIR\"\u3002 \u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a string convert(string s, int numRows); \u6837\u4f8b \u8f93\u5165\uff1as = \"PAYPALISHIRING\", numRows = 3 \u8f93\u51fa\uff1a\"PAHNAPLSIIGYIR\" \u9898\u76ee\u5927\u610f \u7ed9\u5b9a\u539f\u5b57\u7b26\u4e32\u548c\u53d8\u5f62\u9700\u8981\u7684\u884c\u6570\uff0c\u8f93\u51faZ\u53d8\u5f62\u540e\u7684\u7ed3\u679c\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u6839\u636e\u884c\u6570\u521b\u5efa\u76f8\u5e94\u7684\u5bb9\u5668\u5b58\u653e\u6bcf\u4e00\u884c\u7684\u5185\u5bb9\uff0c\u6700\u540e\u62fc\u63a5\u8f93\u51fa\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc751%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc790%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: string convert(string s, int numRows) { if(numRows==1) return s; string str[1005]; int sz=size(s); int cnt=0; int w=1; for(int i=0;i<sz;++i){ str[cnt]+=s[i]; if(w==1){ cnt++; if(cnt==numRows-1){ w=-1; } }else{ cnt--; if(cnt==0){ w=1; } } } string ans; for(int i=0;i<numRows;++i){ ans.append(str[i]); } return ans; } };","title":"XD0006"},{"location":"content/leetcode/0006/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0006/#z","text":"\u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32 s \u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570 numRows \uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c Z \u5b57\u5f62\u6392\u5217\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a \"PAYPALISHIRING\" \u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a P A H N A P L S I I G Y I R \u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a\"PAHNAPLSIIGYIR\"\u3002 \u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a string convert(string s, int numRows);","title":"Z\u5b57\u5f62\u53d8\u6362"},{"location":"content/leetcode/0006/#_2","text":"\u8f93\u5165\uff1as = \"PAYPALISHIRING\", numRows = 3 \u8f93\u51fa\uff1a\"PAHNAPLSIIGYIR\"","title":"\u6837\u4f8b"},{"location":"content/leetcode/0006/#_3","text":"\u7ed9\u5b9a\u539f\u5b57\u7b26\u4e32\u548c\u53d8\u5f62\u9700\u8981\u7684\u884c\u6570\uff0c\u8f93\u51faZ\u53d8\u5f62\u540e\u7684\u7ed3\u679c\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0006/#_4","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0006/#c","text":"\u6839\u636e\u884c\u6570\u521b\u5efa\u76f8\u5e94\u7684\u5bb9\u5668\u5b58\u653e\u6bcf\u4e00\u884c\u7684\u5185\u5bb9\uff0c\u6700\u540e\u62fc\u63a5\u8f93\u51fa\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc751%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc790%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0006/#_5","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0006/#c_1","text":"class Solution { public: string convert(string s, int numRows) { if(numRows==1) return s; string str[1005]; int sz=size(s); int cnt=0; int w=1; for(int i=0;i<sz;++i){ str[cnt]+=s[i]; if(w==1){ cnt++; if(cnt==numRows-1){ w=-1; } }else{ cnt--; if(cnt==0){ w=1; } } } string ans; for(int i=0;i<numRows;++i){ ans.append(str[i]); } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0007/","text":"\u9898\u76ee \u6574\u6570\u53cd\u8f6c \u7ed9\u4f60\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570 x \uff0c\u8fd4\u56de x \u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u53cd\u8f6c\u540e\u7684\u7ed3\u679c\u3002 \u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u8d85\u8fc7 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4 [\u2212231, 231 \u2212 1] \uff0c\u5c31\u8fd4\u56de 0\u3002 \u5047\u8bbe\u73af\u5883\u4e0d\u5141\u8bb8\u5b58\u50a8 64 \u4f4d\u6574\u6570\uff08\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7\uff09\u3002 \u6837\u4f8b \u8f93\u5165\uff1ax = 123 \u8f93\u51fa\uff1a321 \u9898\u76ee\u5927\u610f \u5c06\u7ed9\u5b9a\u7684\u6b63\u6574\u6570\u6216\u8d1f\u6574\u6570\u53cd\u8f6c\u6210\u4e00\u4e2a\u65b0\u7684\u6570\uff0c\u5982\u679c\u8d85\u51faint\u8303\u56f4\u5c31\u8f93\u51fa0\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u53cd\u8f6c\u8f93\u51fa\uff0c\u8d85\u51fa\u8303\u56f4\u5224\u65ad\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(len(x))\uff0c\u8d85\u8fc7100%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc784.69% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int reverse(int x) { long long ans=0; int mx=0x7fffffff,mi=-mx-1; if(x>0){ while(x){ ans=ans*10+x%10; x/=10; } }else if(x==0){ return 0; }else{ while(x){ ans=ans*10+abs(x%10); x/=10; } ans*=-1; } if(ans>mx||ans<mi){ ans=0; } return ans; } };","title":"XD0007"},{"location":"content/leetcode/0007/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0007/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570 x \uff0c\u8fd4\u56de x \u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u53cd\u8f6c\u540e\u7684\u7ed3\u679c\u3002 \u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u8d85\u8fc7 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4 [\u2212231, 231 \u2212 1] \uff0c\u5c31\u8fd4\u56de 0\u3002 \u5047\u8bbe\u73af\u5883\u4e0d\u5141\u8bb8\u5b58\u50a8 64 \u4f4d\u6574\u6570\uff08\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7\uff09\u3002","title":"\u6574\u6570\u53cd\u8f6c"},{"location":"content/leetcode/0007/#_3","text":"\u8f93\u5165\uff1ax = 123 \u8f93\u51fa\uff1a321","title":"\u6837\u4f8b"},{"location":"content/leetcode/0007/#_4","text":"\u5c06\u7ed9\u5b9a\u7684\u6b63\u6574\u6570\u6216\u8d1f\u6574\u6570\u53cd\u8f6c\u6210\u4e00\u4e2a\u65b0\u7684\u6570\uff0c\u5982\u679c\u8d85\u51faint\u8303\u56f4\u5c31\u8f93\u51fa0\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0007/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0007/#c","text":"\u53cd\u8f6c\u8f93\u51fa\uff0c\u8d85\u51fa\u8303\u56f4\u5224\u65ad\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(len(x))\uff0c\u8d85\u8fc7100%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc784.69%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0007/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0007/#c_1","text":"class Solution { public: int reverse(int x) { long long ans=0; int mx=0x7fffffff,mi=-mx-1; if(x>0){ while(x){ ans=ans*10+x%10; x/=10; } }else if(x==0){ return 0; }else{ while(x){ ans=ans*10+abs(x%10); x/=10; } ans*=-1; } if(ans>mx||ans<mi){ ans=0; } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/template/","text":"\u9898\u76ee \u9898\u76ee\u5927\u610f \u89e3\u9898\u601d\u8def \u4ee3\u7801","title":"template"},{"location":"content/leetcode/template/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/template/#_2","text":"","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/template/#_3","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/template/#_4","text":"","title":"\u4ee3\u7801"}]}