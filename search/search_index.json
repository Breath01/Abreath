{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5173\u4e8e\u4f5c\u8005 \u8ba1\u7b97\u673a\u4e13\u4e1a\u54b8\u9c7c","title":"\u4e3b\u9875"},{"location":"#_1","text":"\u8ba1\u7b97\u673a\u4e13\u4e1a\u54b8\u9c7c","title":"\u5173\u4e8e\u4f5c\u8005"},{"location":"content/bookreport/BabyTakeYourTime_LongYingtai/","text":"\u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b\u4e66\u8bb0 \u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b\u4e66\u8bc4","title":"\u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b\u2014\u2014\u9f99\u5e94\u53f0"},{"location":"content/bookreport/BabyTakeYourTime_LongYingtai/#_1","text":"","title":"\u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b\u4e66\u8bb0"},{"location":"content/bookreport/BabyTakeYourTime_LongYingtai/#_2","text":"","title":"\u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b\u4e66\u8bc4"},{"location":"content/bookreport/DearAndreas_LongYingtai/","text":"\u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\u4e2d\u7684\u4e00\u4e9b\u6709\u8da3\u7684\u8bdd \u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\u8bfb\u540e\u611f","title":"\u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\u2014\u2014\u9f99\u5e94\u53f0"},{"location":"content/bookreport/DearAndreas_LongYingtai/#_1","text":"","title":"\u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\u4e2d\u7684\u4e00\u4e9b\u6709\u8da3\u7684\u8bdd"},{"location":"content/bookreport/DearAndreas_LongYingtai/#_2","text":"","title":"\u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\u8bfb\u540e\u611f"},{"location":"content/bookreport/OneHundredYearOfSolitude_M%C3%A1rquez/","text":"\u672c\u4e66\u4e8e2021\u5e741.23\u65e5\u5f00\u59cb\u9605\u8bfb\uff0c\u4e8e2021\u5e742.7\u65e5\u9605\u8bfb\u5b8c\u6210\u3002","title":"\u300a\u767e\u5e74\u5b64\u72ec\u300b\u2014\u2014\u9a6c\u5c14\u514b\u65af"},{"location":"content/datastruct/SqList/","text":"\u987a\u5e8f\u8868\u76f8\u5173\u77e5\u8bc6\u7b80\u5355\u8bb0\u5f55 C\u987a\u5e8f\u8868\u7684\u9759\u6001\u5206\u914d #include<stdio.h> #include<stdlib.h> #define MaxSize 50 typedef struct{ int data[MaxSize]; int length; }SqList; int main(){ SqList L; L.length=0; for(int i=0;i<51;++i){ if(i>=MaxSize){ break; }else{ L.data[i]=i; L.length++; } } printf(\"%d\\n\",L.length); for(int i=0;i<MaxSize;++i){ printf(\"%d\\n\",L.data[i]); } return 0; } C\u987a\u5e8f\u8868\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u548c\u6269\u5bb9 #include<stdio.h> #include<stdlib.h> #define InitSize 50 typedef struct{ int* data; int MaxSize,length; }SqList; int main(){ SqList L; L.data=(int*)malloc(sizeof(int)*InitSize); L.MaxSize=InitSize; L.length=0; for(int i=0;i<51;++i){ L.length++; L.data[i]=i; if(L.length==L.MaxSize){ SqList temp; L.data=(int*)realloc(L.data,sizeof(int)*InitSize*(L.MaxSize/InitSize+1)); L.MaxSize=InitSize*(L.MaxSize/InitSize+1); } } printf(\"%d\\n\",L.length); for(int i=0;i<51;++i){ printf(\"%d\\n\",L.data[i]); } return 0; } C++\u987a\u5e8f\u8868\u7684\u52a8\u6001\u5206\u914d\u53ca\u6269\u5bb9 #include<bits/stdc++.h> using namespace std; #define InitSize 50 typedef struct{ int* data; int MaxSize,length; }SqList; int main(){ SqList L; L.data=new int[InitSize]; L.MaxSize=InitSize; L.length=0; for(int i=0;i<51;++i){ L.length++; L.data[i]=i; if(L.length==L.MaxSize){ SqList temp; temp.data=new int[InitSize*(L.MaxSize/InitSize+1)]; memcpy(temp.data,L.data,sizeof(int)*L.MaxSize); L.MaxSize=InitSize*(L.MaxSize/InitSize+1); delete[] L.data; L.data=temp.data; } } for(int i=0;i<51;++i){ printf(\"%d\\n\",L.data[i]); } return 0; }","title":"\u7ebf\u6027\u8868\u7684\u6784\u5efa\u548c\u6269\u5bb9"},{"location":"content/datastruct/SqList/#_1","text":"","title":"\u987a\u5e8f\u8868\u76f8\u5173\u77e5\u8bc6\u7b80\u5355\u8bb0\u5f55"},{"location":"content/datastruct/SqList/#c","text":"#include<stdio.h> #include<stdlib.h> #define MaxSize 50 typedef struct{ int data[MaxSize]; int length; }SqList; int main(){ SqList L; L.length=0; for(int i=0;i<51;++i){ if(i>=MaxSize){ break; }else{ L.data[i]=i; L.length++; } } printf(\"%d\\n\",L.length); for(int i=0;i<MaxSize;++i){ printf(\"%d\\n\",L.data[i]); } return 0; }","title":"C\u987a\u5e8f\u8868\u7684\u9759\u6001\u5206\u914d"},{"location":"content/datastruct/SqList/#c_1","text":"#include<stdio.h> #include<stdlib.h> #define InitSize 50 typedef struct{ int* data; int MaxSize,length; }SqList; int main(){ SqList L; L.data=(int*)malloc(sizeof(int)*InitSize); L.MaxSize=InitSize; L.length=0; for(int i=0;i<51;++i){ L.length++; L.data[i]=i; if(L.length==L.MaxSize){ SqList temp; L.data=(int*)realloc(L.data,sizeof(int)*InitSize*(L.MaxSize/InitSize+1)); L.MaxSize=InitSize*(L.MaxSize/InitSize+1); } } printf(\"%d\\n\",L.length); for(int i=0;i<51;++i){ printf(\"%d\\n\",L.data[i]); } return 0; }","title":"C\u987a\u5e8f\u8868\u7684\u52a8\u6001\u5185\u5b58\u5206\u914d\u548c\u6269\u5bb9"},{"location":"content/datastruct/SqList/#c_2","text":"#include<bits/stdc++.h> using namespace std; #define InitSize 50 typedef struct{ int* data; int MaxSize,length; }SqList; int main(){ SqList L; L.data=new int[InitSize]; L.MaxSize=InitSize; L.length=0; for(int i=0;i<51;++i){ L.length++; L.data[i]=i; if(L.length==L.MaxSize){ SqList temp; temp.data=new int[InitSize*(L.MaxSize/InitSize+1)]; memcpy(temp.data,L.data,sizeof(int)*L.MaxSize); L.MaxSize=InitSize*(L.MaxSize/InitSize+1); delete[] L.data; L.data=temp.data; } } for(int i=0;i<51;++i){ printf(\"%d\\n\",L.data[i]); } return 0; }","title":"C++\u987a\u5e8f\u8868\u7684\u52a8\u6001\u5206\u914d\u53ca\u6269\u5bb9"},{"location":"content/diary/2021/","text":"01 \u6708 01 \u65e5 \u642d\u5efa\u4e86\u535a\u5ba2\uff1f\u4e5f\u4e0d\u77e5\u5230\u662f\u4e0d\u662f\u53eb\u535a\u5ba2\uff0c\u5148\u7528\u7740\u518d\u8bf4\u3002 01 \u6708 02 \u65e5 pip install xgboost pip install catboost lj xgboost.whl catboost.iso nb \u600e\u4e48\u90e8\u7f72\u5230GitHub\u4e0a\uff0c\u88c2\u5f00\uff0c\u4e00\u665a\u4e0a\u6ca1\u641e\u51fa\u6765\uff0c\u6de6! md \u7ec8\u4e8e\u6210\u529f\u7684\u4e0a\u4f20\u5230GitHub\u4e86 NICE! 01 \u6708 03 \u65e5 \u4eca\u5929\u53c8\u662f\u5728\u5b89\u88c5\u8f6f\u4ef6\u4e2d\u8ff7\u832b\u7684\u4e00\u5929\uff0c\u4eca\u5929\u5b89\u88c5tensorflow\u3002 \u7ed3\u8bba\uff1a\u6e05\u534e\u955c\u50cfdown\uff0c\u8c46\u74e3\u955c\u50cfUp\uff01\uff01\uff01 https://pypi.douban.com/simple/ 01 \u6708 04 \u65e5 \u54a3 01 \u6708 05 \u65e5 \u60f3\u628a\u4e00\u4ef6\u4e8b\u60c5\u505a\u5b8c\u7f8e\uff0c\u4f46\u662f\u603b\u662f\u6700\u4e0d\u5b8c\u7f8e\u3002\u9700\u8981\u89c4\u5212\uff01\uff01\uff01 01 \u6708 06 \u65e5 \u54a3 01 \u6708 07 \u65e5 \u54a3 01 \u6708 08 \u65e5 \u8bfb\u5b8c\u4e86\u9f99\u5e94\u53f0\u7684\u300a\u4eb2\u7231\u7684\u5b89\u5fb7\u70c8\u300b\uff0c\u968f\u611f\u5728\u8def\u4e0a\u3002 01 \u6708 09 \u65e5 \u590d\u53d8\u4f5c\u4e1aover 01 \u6708 10 \u65e5 \u53c8\u8ba4\u8bc6\u4e86\u4e00\u904d\u73ed\u7ea7\u540c\u5b66\uff0c\u5f00\u5fc3\uff01 \u627e\u5230\u4e86\u4e00\u4e2ahttps://www.linerider.com/\u597d\u73a9\u7684\u7f51\u7ad9\uff01 01 \u6708 11 \u65e5 LOL\u5927\u4e71\u6597\u8bc4\u5206\u4e0a10\uff01 \u770b\u5b8c\u300a\u5b69\u5b50\u4f60\u6162\u6162\u6765\u300b 01 \u6708 12 \u65e5 \u9a6c\u539f\u597d\u591a\u554a\uff01 01 \u6708 13 \u65e5 \u73a9\u7684\u5f88\u618b\u5c48\u3002 01 \u6708 14 \u65e5 \u201c\u5f53\u7537\u4eba\u5f97\u5230\u4e86\u7ea2\u73ab\u7470\uff0c\u5979\u5c31\u53d8\u6210\u4e86\u4e00\u62b9\u868a\u5b50\u8840\uff0c\u767d\u73ab\u7470\u5219\u6210\u4e3a\u7a97\u524d\u768e\u6d01\u7684\u767d\u6708\u5149\uff0c\u8ba9\u4ed6\u53ef\u671b\u4e0d\u53ef\u53ca\uff1b\u800c\u5f53\u7537\u4eba\u5f97\u5230\u4e86\u767d\u73ab\u7470\uff0c\u5979\u5c31\u6210\u4e3a\u4e00\u7c92\u5927\u7c73\u996d\u7c92\uff0c\u800c\u7ea2\u73ab\u7470\u5219\u6210\u4e3a\u4ed6\u80f8\u524d\u7684\u6731\u7802\u75e3\uff0c\u662f\u6c38\u8fdc\u7684\u75db\uff0c\u6c38\u8fdc\u7684\u8bb0\u53f7\u3002\u201d\u2014\u2014\u2014\u2014\u5f20\u7231\u73b2\u300a\u7ea2\u73ab\u7470\u4e0e\u767d\u73ab\u7470\u300b 01 \u6708 15 \u65e5 \u54a3 01 \u6708 16 \u65e5 \u54a3 01 \u6708 17 \u65e5 \u54a3 01 \u6708 18 \u65e5 \u54a3 01 \u6708 19 \u65e5 \u54a3 01 \u6708 20 \u65e5 \u54a3 01 \u6708 21 \u65e5 \u54a3 01 \u6708 22 \u65e5 \u590d\u53d8\u51fd\u6570\u8003\u8bd5\u771f\u7684\u7b80\u5355\u3002 01 \u6708 23 \u65e5 \u8003\u5b8c\uff0c\u56de\u5bb6 01 \u6708 24 \u65e5 \u521d\u4e00\u6570\u5b66\u662f\u771f\u7684\u7b80\u5355\uff0c\u9ad8\u4e8c\u6570\u5b66\u662f\u771f\u7684\u96be\u3002 md 01 \u6708 25 \u65e5 \u5c0f\u5730\u65b9\u7684\u6253\u5370\u5e97\u771f\u7684\u8d35\uff0c\u5c31\u5f88\u79bb\u8c31\u3002 \u9ad8\u4e2d\u540c\u5b66\u88ab\u9a9a\u6270\u4e86\uff0c\u8fd9\u662f\u6211\u6ca1\u60f3\u7684\u3002\u5979\u751a\u81f3\u5728\u5f53\u670d\u52a1\u5458\u7684\u65f6\u5019\u8fd8\u9047\u5230\u4e86\u9ad8\u4e2d\u540c\u5b66\u7684\u5bb6\u957f\u54c8\u54c8\u54c8\u54c8\u3002 01 \u6708 26 \u65e5 \u6628\u65e5\u7ec3\u5b57\u6253\u5361\u7b2c\u4e00\u5929\u3002 \u4e50\u6e38\u539f \u674e\u5546\u9690 \u5411\u665a\u610f\u4e0d\u9002 \u9a71\u8f66\u767b\u53e4\u539f \u5915\u9633\u65e0\u9650\u597d \u53ea\u662f\u8fd1\u9ec4\u660f 01 \u6708 27 \u65e5 \u54a3 01 \u6708 28 \u65e5 \u54a3 01 \u6708 29 \u65e5 \u54a3 01 \u6708 30 \u65e5 \u5236\u5b9a\u8003\u7814\u4e00\u8f6e\u590d\u4e60\u8ba1\u5212\uff0c2-3\u6708\u4e3a\u4e00\u8f6e\u590d\u4e60\u65f6\u95f4\u3002 \u8bb0\u5f55\u6bcf\u5929\u5b66\u4e60\u60c5\u51b5\uff0c\u4e00\u5468\u603b\u7ed3\u4e00\u6b21\uff0c\u6bcf\u5468\u516d\u4e3a\u4e00\u5468\u67e5\u6f0f\u8865\u7f3a\u65f6\u95f4\u3002 01 \u6708 31 \u65e5 \u54a3 02 \u6708 01 \u65e5 \u65e9\u4e0a7\uff1a30\u5f00\u59cb\u4e00\u5929\u7684\u5b66\u4e60\u3002 20min\u82f1\u5355\u8bcd\u4e00\u8f6eover 8\uff1a20-8\uff1a40\u592a\u56f0\u4e86\uff0c\u7761\u4e862333 8\uff1a00-10\uff1a40\u6570\u5b6693-115p \u7ec3\u5b5720min\uff0c11\uff1a00\u5403\u996d 11\uff1a45\u7ec3\u5b57\u7ed3\u675f 12\uff1a00-14\uff1a00\u8ba1\u7b97\u673a\u7f51\u7edc\u7b2c\u4e00\u7ae0\u5269\u4e2a\u603b\u7ed3 14\uff1a00-15\uff1a00\u8fd0\u52a81h 15\uff1a00-15\uff1a10\u8ba1\u7f51\u4e00\u5269\u4f59\u770b\u5b8c 15\uff1a10-15\uff1a50\u4f11\u606f 15\uff1a50-16\uff1a50leetcode0001 17\uff1a00-17\uff1a40\u665a\u996d 17\uff1a40-18\uff1a20\u82f1\u8bed\u9605\u8bfb\uff0c\u592a\u6162\u4e86 18\uff1a20-19\uff1a00\u82f1\u8bed\u4e8c\u8f6e 19\uff1a10-20\uff1a00\u767e\u5e74\u5b64\u72ec 20\uff1a00-20\uff1a20\u56f0\u4e86md 20\uff1a20-21\uff1a00\u6570\u5b66116-125p \u5b66\u4e60\u603b\u65f6\u957f\uff1a20+140+20+20+120+10+60+40+40+50+40=560min \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u9ad8\u6548\u7684\u4e00\u5929\uff0c\u5f88\u6ee1\u610f\uff0c\u90e8\u5206\u4efb\u52a1\u6548\u7387\u4e0d\u662f\u5f88\u9ad8\uff0c\u53ef\u4ee5\u6539\u8fdb\u3002\u5b89\u6392\u4efb\u52a1\u5168\u90e8\u5b8c\u6210\uff0c\u5e76\u8d85\u989d\u5b8c\u6210\u90e8\u5206\u6570\u5b66\u3002\u51b2\uff01 02 \u6708 02 \u65e5 \u65e9\u4e0a7\uff1a30\u5f00\u59cb\u4e00\u5929\u7684\u5b66\u4e60\uff0cyeah\uff01 7\uff1a30-7\uff1a50\u82f1\u8bed\u5355\u8bcd\u4e00\u8f6e 8\uff1a00-10\uff1a00\u6570\u5b66125-146p 8\uff1a35-8\uff1a55zzz~ 10\uff1a00-10\uff1a40\u8ba1\u7f51part 11\uff1a00-12\uff1a00\u5348\u9910\u52a0\u53d6\u5feb\u9012\uff0c\u8fd9\u6bb5\u65f6\u95f4\u5c31\u7ec3\u4e86\u4e24\u4e2a\u5b57\uff0c\u88c2\u5f00\u3002 12\uff1a00-13\uff1a30\u8ba1\u7f51over 13\uff1a30-14\uff1a00leetcode 14\uff1a00-15\uff1a00\u8fd0\u52a8 15\uff1a00-15\uff1a30\u4f11\u606f 15\uff1a30-16\uff1a30leetcode 16\uff1a30-16\uff1a50\u7ec3\u5b57 16\uff1a50-17\uff1a10\u5403\u996d 17\uff1a10-19\uff1a30\u526a\u811a\u8dbe\u7532\uff0c\u4e70\u6c34\u679c\uff0c\u4e70\u9762\u5305 19\uff1a30-20\uff1a20\u7ec3\u5b57 20\uff1a20-20\uff1a40\u82f1\u9605\u8bfb 20\uff1a40-21\uff1a40\u5355\u8bcd\u4e8c\u8f6e \u5b66\u4e60\u603b\u65f6\u957f\uff1a20+100+40+90+30+60+20+50+20+60=490min \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u4e0b\u5348\u5dee\u70b9\u5b66\u5d29\u4e86\uff0c\u8fd8\u597d\u633a\u4f4f\u4e86\uff0c\u7a33\u3002\u51b2\uff01\u76f8\u6bd4\u4e8e\u6628\u5929\u5b66\u4e60\u65f6\u957f\u53d8\u5c11\u4e8670min\uff0c\u5173\u952e\u5728\u6570\u5b66\u90e8\u5206\u5728\u6628\u5929\u5b66\u6389\u4e86\uff0c\u8bf4\u5b9e\u8bdd\uff0c\u5fd9\u91cc\u5077\u95f2\u8fd8\u633a\u723d\u7684\u3002 02 \u6708 03 \u65e5 \u4eca\u5929\u540c\u6837\u662f7\uff1a30\u5f00\u5b66\uff0c\u4eca\u5929\u7684\u4efb\u52a1\u6bd4\u8f83\u7d27\u5f20\uff0c\u4eca\u665a\u8981\u51fa\u53bb\u901b\u8d85\u5e02\u548c\u770b\u7535\u5f71\uff0c\u767d\u5929\u5f97\u6293\u7d27\u4e86\u3002 7\uff1a30-7\uff1a40\u542f\u52a8\u7535\u8111\uff0c\u6253\u5f00\u4e00\u4e9b\u4e1c\u897f 7\uff1a40-8\uff1a05\u82f1\u53551 8\uff1a05-8\uff1a50\u6570147-157p \u4f11\u606f10min 9\uff1a00-11\uff1a00\u8ba1\u7f51part 11\uff1a30-13\uff1a30leetcode 13\uff1a30-14\uff1a00\u8ba1\u7f51 14\uff1a00-14\uff1a10\u8fd0\u52a8 14\uff1a10-15\uff1a00\u8ba1\u7f51 15\uff1a00-15\uff1a30\u4f11\u606f 15\uff1a30-16\uff1a40\u6570157-171p 16\uff1a40-16\uff1a55leetcode \u5b66\u4e60\u603b\u65f6\u957f\uff1a25+45+120+120+30+50+70=460 \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u4e0d\u884c\u4e86\uff0c\u8ba1\u7f51\u548c\u6570\u5b66\u90fd\u5f00\u59cb\u8d8a\u6765\u8d8a\u590d\u6742\u4e86\uff0c\u4eca\u65e5\u5b66\u4e60\u6548\u7387\u6781\u4f4e\uff0c\u76f4\u63a5\u88c2\u5f00\uff0c\u4ee3\u7801\u4e5f\u8c03\u8bd5\u4e86\u5f88\u4e45\uff0cmd\u665a\u4e0a\u57fa\u672c\u6ca1\u6709\u65f6\u95f4\u5b66\u4e60\u3002 \u4eca\u65e5\u6b20\u503a\uff1a\u8ba1\u7f51\u94fe\u8def\u5c42\u5269\u4f59\uff0c\u6570\u5b66\u5e38\u5fae\u5206\u65b9\u7a0b\u7684\u4e60\u9898\uff08\u4e3b\u8981\u662f\u4e0d\u61c2\u8fd9\u4e00\u5757\u5185\u5bb9\uff09\uff0c\u82f1\u9605\u8bfb\uff0c\u7ec3\u5b57\u3002\u6de6\uff0c\u5149\u5217\u51fa\u6765\u5c31\u597d\u591a\u3002 02 \u6708 04 \u65e5 \u4eca\u5929\u7761\u8fc7\u4e86\uff0c\u76f4\u63a5\u6ca1\u542c\u89c1\u95f9\u949f\uff0c8\u70b9\u5f00\u59cb\u5b66\u4e60\u3002 8\uff1a00-9\uff1a45\uff08\u8865\uff09\u82f1\u5355\u4e8c\u8f6e 8\uff1a40-9\uff1a20zzz~ 9\uff1a45-10\uff1a35\u82f1\u5355\u4e00\u8f6e 10\uff1a35-11\uff1a00leetcode 12\u70b9\u5f00\u59cb\u5b66\u4e60 12\uff1a00-13\uff1a40\uff08\u8865\uff09\u8ba1\u7f51 13\uff1a40-14\uff1a00\u4f11\u606f 14\uff1a00-14\uff1a50\u8fd0\u52a8\u52a0\u4f11\u606f 14\uff1a50-15\uff1a45\uff08\u8865\uff09\u8ba1\u7f51 16\uff1a00-16\uff1a50\uff08\u8865\uff09\u8ba1\u7f51 17\uff1a20-18\uff1a00\uff08\u8865\uff09\u8ba1\u7f51 19\uff1a30-20\uff1a10\u82f1\u5355\u4e8c\u8f6e 20\uff1a25-20\uff1a50\uff08\u8865\uff09\u82f1\u9605 21\uff1a10-21\uff1a30\u82f1\u9605 \u5b66\u4e60\u603b\u65f6\u957f\uff1a65+50+25+100+55+50+40+40+25+20=450min \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u53ef\u4ee5\uff0c\u575a\u6301\u4f4f\u4e86\uff0c\u52a0\u6cb9\uff0c\u51b2 \u4eca\u65e5\u7d2f\u8ba1\u6b20\u503a\uff1a\u6570\u4e00\u7ae0\uff0c\u8ba1\u7f51\u4e00\u7ae0\uff0c\u7ec3\u5b57\u4e24\u5929\uff0c\u6570\u5e38\u5fae\u5206\u65b9\u7a0b\u3002 02 \u6708 05 \u65e5 7\uff1a25\u5f00\u5b66 7\uff1a25-8\uff1a05\u82f1\u5355\u4e00\u8f6e 8\uff1a05-9\uff1a00\uff08\u8865\uff09\u6570179-189p 9\uff1a40-10\uff1a05\u82f1\u9605 10\uff1a05-10\uff1a35\uff08\u8865\uff09\u6570189-196p 12\uff1a30-13\uff1a40\uff08\u8865\uff09\u8ba1\u7f51 13\uff1a40-14\uff1a00\u4f11\u606f 14\uff1a00-14\uff1a40\uff08\u8865\uff09\u8ba1\u7f51 14\uff1a40-15\uff1a00\u4f11\u606f 15\uff1a00-16\uff1a00\uff08\u8865\uff09\u8ba1\u7f51 16\uff1a30-17\uff1a20leetcode 21\uff1a10-21\uff1a50leetcode \u5b66\u4e60\u603b\u65f6\u957f\uff1a40+55+25+30+70+40+60+50+40=410min \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u73a9\u624b\u673a\u6b21\u6570\u660e\u663e\u589e\u591a\uff0c\u9891\u7e41\u7684\u4f11\u606f\u3002 \u4eca\u65e5\u7d2f\u8ba1\u6b20\u503a\uff1a\u6570\u4e00\u7ae0\uff0c\u8ba1\u7f511.5\u7ae0\uff0c\u7ec3\u5b57\u4e09\u5929\uff0c\u82f1\u5355\u4e8c\u8f6e\uff0c\u6570\u5e38\u5fae\u5206\u65b9\u7a0b\u3002\u3002\u3002 02 \u6708 06 \u65e5 7\uff1a20-8\uff1a00leetcode 8\uff1a00-8\uff1a30\u82f1\u9605 8\uff1a30-9\uff1a10\u82f1\u5355 9\uff1a10-10\uff1a00\u4f11\u606f 10\uff1a00-11\uff1a00\u82f1\u5355 12\uff1a00-12\uff1a20\u82f1\u5355 14\uff1a50-16\uff1a50\uff08\u8865\uff09\u6570\u5b66 17\uff1a40-18\uff1a05\uff08\u8865\uff09\u6570\u5b66 19\uff1a20-19\uff1a30\uff08\u8865\uff09\u6570\u5b66 19\uff1a30-20\uff1a25\u82f1\u5355\u4e8c\u8f6e 20\uff1a25-20\uff1a50math 21\uff1a10-21\uff1a30math \u5b66\u4e60\u603b\u65f6\u957f\uff1a40+30+40+60+20+120+25+10+55+25+20=485min \u4e00\u65e5\u5b66\u4e60\u603b\u7ed3\uff1a\u73a9\u624b\u673a\u6b21\u6570\u589e\u591a\uff0c\u4e14\u65f6\u95f4\u53d8\u957f\uff0c\u5b66\u4e60\u79ef\u6781\u6027\u4e0b\u964d\uff0c\u6de6\uff01 \u4eca\u65e5\u7d2f\u8ba1\u6b20\u503a\uff1amath-1\uff0ccn-2.5\uff0c\u7ec3\u5b574\u5929\uff0c\u6570\u5e38\u5fae\u5206\u65b9\u7a0b\u3002 02 \u6708 07 \u65e5 8:00getup 8:20-8:45leetcode 21:20-22:00read total=65min conclusion:fullfilled 02 \u6708 08 \u65e5 7:15-8:05e-word 8:05-9:00leetcode 9:00-11:00cn 11:50-12:10e-word 12:15-13:35cn 14:50-16:50cn 17:30-18:20cn 19:30-21:20cn total:50+55+120+20+80+120+50+110=605min conclusion:efficient, but a little casual, cn exercise not do well. debt:math-2, calligraphy-5 02 \u6708 09 \u65e5 \u4eca\u5929\u526a\u4e86\u4e00\u4e2a\u89c6\u9891\uff0c\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8tql \u4e0b\u5348\u53bb\u540c\u5b66\u5bb6uno\uff0chappy 02 \u6708 10 \u65e5 \u653e\u5047\u7684\u7b2c\u4e00\u5929\uff0c\u5feb\u4e50\uff01 02 \u6708 11 \u65e5 \u653e\u5047\u7b2c\u4e8c\u5929\u5feb\u4e50\uff01 02 \u6708 12 \u65e5 \u653e\u5047\u7b2c\u4e09\u5929\u5feb\u4e50\uff01 02 \u6708 13 \u65e5 \u6210\u529f\u5229\u7528app.netlify.com\u521b\u5efa\u7f51\u9875\u6210\u529f\u3002\u5f00\u5fc3\uff01\uff01\uff01 XD 02 \u6708 14 \u65e5 \u7b2c\u4e94\u5929\u653e\u5047\uff01\uff01\uff01 \u660e\u5929\u5f00\u59cb\u5b66\u4e60 02 \u6708 15 \u65e5 7:45-8:05ew 8:25-8:50ew 9:05-9:50ds 9:50-10:30leetcode 10:30-10:55er 11:30-11:40er 11:40-12:00m 12:15-12:40m 13:15-13:50m 15:25-16:10m310-340p 17:40-18:10ew 18:30-19:10ew 20:00-20:40r 21:00-22:00leetcode total:20+25+45+40+25+10+20+25+35+45+30+40+40+60=460min conclusion:fucus!!! debt:none 02 \u6708 16 \u65e5 7:30-7:55ew 8:05-8:30leetcode 8:30-8:45ew 9:00-10:30m 16:30-16:50m 18:15-18:30ew 19:00-19:25ew 19:25-19:50ds 20:00-22:00ds total:25+25+15+90+20+15+25+25+120=360min conclusion:fucus!!! debt:ds-1, m-0.5 02 \u6708 17 \u65e5 9:00-9:10ew 9:10-10:10leetcode 02 \u6708 18 \u65e5 happyb!!! 02 \u6708 19 \u65e5 \u6478\u9c7c\u4e00\u6574\u5929md 02 \u6708 20 \u65e5 7:30s 7:30-7:50ew 8:20-8:50ew 9:20-9:40ew 11:40-12:20ds 13:00-15:00ds 17:30-18:30leetcode 19:30-20:00ew 02 \u6708 21 \u65e5 \u4eca\u5929\u7ed9\u676d\u5dde\u7684\u65b0\u5bb6\u7f6e\u529e\u4e86\u5bb6\u5177\u3002 02 \u6708 22 \u65e5 essential C++ 02 \u6708 23 \u65e5 KMP over 02 \u6708 24 \u65e5 \u54a3 02 \u6708 25 \u65e5 \u54a3 02 \u6708 26 \u65e5 \u54a3 02 \u6708 27 \u65e5 \u54a3 02 \u6708 28 \u65e5 \u4eca\u5929\u8fd4\u6821\uff0c\u548c\u5988\u5988\u4e89\u6267\u4e86\uff0c\u72ec\u7acb\u4e86\u3002 03 \u6708 01 \u65e5 \u6253\u4e86\u4e00\u5929\u7684\u6e38\u620f\u723d 03 \u6708 02 \u65e5 \u54a3 03 \u6708 03 \u65e5 \u54a3 03 \u6708 04 \u65e5 \u54a3 03 \u6708 05 \u65e5 \u54a3 03 \u6708 06 \u65e5 \u54a3 03 \u6708 07 \u65e5 \u54a3 03 \u6708 08 \u65e5 \u54a3 03 \u6708 09 \u65e5 \u54a3 03 \u6708 10 \u65e5 \u54a3 03 \u6708 11 \u65e5 \u54a3 03 \u6708 12 \u65e5 \u54a3","title":"Y2021"},{"location":"content/leetcode/0001/","text":"\u9898\u76ee \u4e24\u6570\u4e4b\u548c \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c target\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 \u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002 \u6837\u4f8b \u8f93\u5165\uff1anums = [2,7,11,15], target = 9 \u8f93\u51fa\uff1a[0,1] \u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002 \u9898\u76ee\u5927\u610f \u627e\u5230\u4e24\u4e2a\u6570\u5b57\u548c\u7b49\u4e8e\u76ee\u6807\u6570\u5b57\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u4e0b\u6807\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u66b4\u529b\uff0c\u53cc\u5c42for\u5faa\u73af\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc724.86%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(2)\uff0c\u8d85\u8fc793.48%\u3002 C++\u601d\u8def\u4e8c \u4f7f\u7528map\u91cd\u65b0\u5b58\u50a8\uff0c\u7528\u4e00\u904dfor\u6765\u5bfb\u627e\u9700\u8981\u6570\u5b57\u3002 \u56e0\u4e3a\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u5b57\u6765\u8bf4\uff0c\u5b83\u7684\u914d\u5bf9\u7684\u6570\u5b57\u4e00\u5b9a\u5728\u4ed6\u7684\u524d\u9762\uff0c\u6240\u4ee5\u4e00\u8fb9for\u5faa\u73af\u8db3\u591f\u3002 \u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0cmap\u7684find\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(logN)\uff0c\u8d85\u8fc799%\u3002\u6700\u6709\u5229\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528O(1)\u7684\u7a7a\u95f4\uff0c\u6700\u4e0d\u5229\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528O(n-1)\u7684\u7a7a\u95f4\uff0c\u8d85\u8fc785%\u3002 Python\u601d\u8def\u4e00 \u4f7f\u7528List\u81ea\u5e26\u7684\u4e00\u4e9b\u65b9\u6cd5\uff0c\u5982in\u65b9\u6cd5\u53ef\u4ee5\u5224\u65ad\u67d0\u4e2a\u503c\u662f\u5426\u5728\u5217\u8868\u4e2d\uff0cindex\u65b9\u6cd5\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u4e0b\u6807\u3002 in\u5728\u5217\u8868\u4e2d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(N)\u7684\uff0cindex\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\u7684\uff0c\u8d85\u8fc726.55%\uff0cin\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u672a\u77e5(?)\uff0cindex\u7a7a\u95f4\u590d\u6742\u5ea6\u672a\u77e5(?)\uff0c\u8d85\u8fc745.45%\u3002 Python\u601d\u8def\u4e8c \u540cC++\u601d\u8def\u4e8c\u3002 \u65f6\u95f4\u8d85\u8fc749.20%\uff0c\u7a7a\u95f4\u8d85\u8fc757.44%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { int len=nums.size(); vector<int> ans; for(int i=0;i<len-1;++i){ for(int j=i+1;j<len;++j){ if(nums[i]+nums[j]==target){ ans.push_back(i);ans.push_back(j); } } } return ans; } }; C++\u601d\u8def\u4e8c class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { map<int,int> m; for(int i=0;i<nums.size();++i){ map<int,int>::iterator it; it=m.find(target-nums[i]); if(it!=m.end()){ return {it->second,i}; } m[nums[i]]=i; } return {}; } }; Python\u601d\u8def\u4e00 class Solution: def twoSum(self, nums: List[int], target: int) -> List[int]: for i in range(len(nums)): if target-nums[i] in nums: j=nums.index(target-nums[i]) if j!=i: return [i,j] Python\u601d\u8def\u4e8c class Solution: def twoSum(self, nums, target): hashmap={} for index,num in enumerate(nums): ano=target-num if ano in hashmap: return [hashmap[ano],index] hashmap[num]=index return None","title":"XD0001"},{"location":"content/leetcode/0001/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0001/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570\u76ee\u6807\u503c target\uff0c\u8bf7\u4f60\u5728\u8be5\u6570\u7ec4\u4e2d\u627e\u51fa \u548c\u4e3a\u76ee\u6807\u503c \u7684\u90a3 \u4e24\u4e2a \u6574\u6570\uff0c\u5e76\u8fd4\u56de\u5b83\u4eec\u7684\u6570\u7ec4\u4e0b\u6807\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6bcf\u79cd\u8f93\u5165\u53ea\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u7b54\u6848\u3002\u4f46\u662f\uff0c\u6570\u7ec4\u4e2d\u540c\u4e00\u4e2a\u5143\u7d20\u4e0d\u80fd\u4f7f\u7528\u4e24\u904d\u3002 \u4f60\u53ef\u4ee5\u6309\u4efb\u610f\u987a\u5e8f\u8fd4\u56de\u7b54\u6848\u3002","title":"\u4e24\u6570\u4e4b\u548c"},{"location":"content/leetcode/0001/#_3","text":"\u8f93\u5165\uff1anums = [2,7,11,15], target = 9 \u8f93\u51fa\uff1a[0,1] \u89e3\u91ca\uff1a\u56e0\u4e3a nums[0] + nums[1] == 9 \uff0c\u8fd4\u56de [0, 1] \u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0001/#_4","text":"\u627e\u5230\u4e24\u4e2a\u6570\u5b57\u548c\u7b49\u4e8e\u76ee\u6807\u6570\u5b57\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u4e0b\u6807\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0001/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0001/#c","text":"\u66b4\u529b\uff0c\u53cc\u5c42for\u5faa\u73af\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc724.86%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(2)\uff0c\u8d85\u8fc793.48%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0001/#c_1","text":"\u4f7f\u7528map\u91cd\u65b0\u5b58\u50a8\uff0c\u7528\u4e00\u904dfor\u6765\u5bfb\u627e\u9700\u8981\u6570\u5b57\u3002 \u56e0\u4e3a\u5bf9\u4e8e\u7b2c\u4e8c\u4e2a\u6570\u5b57\u6765\u8bf4\uff0c\u5b83\u7684\u914d\u5bf9\u7684\u6570\u5b57\u4e00\u5b9a\u5728\u4ed6\u7684\u524d\u9762\uff0c\u6240\u4ee5\u4e00\u8fb9for\u5faa\u73af\u8db3\u591f\u3002 \u5faa\u73af\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0cmap\u7684find\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(logN)\uff0c\u8d85\u8fc799%\u3002\u6700\u6709\u5229\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528O(1)\u7684\u7a7a\u95f4\uff0c\u6700\u4e0d\u5229\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528O(n-1)\u7684\u7a7a\u95f4\uff0c\u8d85\u8fc785%\u3002","title":"C++\u601d\u8def\u4e8c"},{"location":"content/leetcode/0001/#python","text":"\u4f7f\u7528List\u81ea\u5e26\u7684\u4e00\u4e9b\u65b9\u6cd5\uff0c\u5982in\u65b9\u6cd5\u53ef\u4ee5\u5224\u65ad\u67d0\u4e2a\u503c\u662f\u5426\u5728\u5217\u8868\u4e2d\uff0cindex\u65b9\u6cd5\u53ef\u4ee5\u627e\u5230\u5bf9\u5e94\u7684\u4e0b\u6807\u3002 in\u5728\u5217\u8868\u4e2d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(N)\u7684\uff0cindex\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(1)\u7684\uff0c\u8d85\u8fc726.55%\uff0cin\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u672a\u77e5(?)\uff0cindex\u7a7a\u95f4\u590d\u6742\u5ea6\u672a\u77e5(?)\uff0c\u8d85\u8fc745.45%\u3002","title":"Python\u601d\u8def\u4e00"},{"location":"content/leetcode/0001/#python_1","text":"\u540cC++\u601d\u8def\u4e8c\u3002 \u65f6\u95f4\u8d85\u8fc749.20%\uff0c\u7a7a\u95f4\u8d85\u8fc757.44%\u3002","title":"Python\u601d\u8def\u4e8c"},{"location":"content/leetcode/0001/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0001/#c_2","text":"class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { int len=nums.size(); vector<int> ans; for(int i=0;i<len-1;++i){ for(int j=i+1;j<len;++j){ if(nums[i]+nums[j]==target){ ans.push_back(i);ans.push_back(j); } } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0001/#c_3","text":"class Solution { public: vector<int> twoSum(vector<int>& nums, int target) { map<int,int> m; for(int i=0;i<nums.size();++i){ map<int,int>::iterator it; it=m.find(target-nums[i]); if(it!=m.end()){ return {it->second,i}; } m[nums[i]]=i; } return {}; } };","title":"C++\u601d\u8def\u4e8c"},{"location":"content/leetcode/0001/#python_2","text":"class Solution: def twoSum(self, nums: List[int], target: int) -> List[int]: for i in range(len(nums)): if target-nums[i] in nums: j=nums.index(target-nums[i]) if j!=i: return [i,j]","title":"Python\u601d\u8def\u4e00"},{"location":"content/leetcode/0001/#python_3","text":"class Solution: def twoSum(self, nums, target): hashmap={} for index,num in enumerate(nums): ano=target-num if ano in hashmap: return [hashmap[ano],index] hashmap[num]=index return None","title":"Python\u601d\u8def\u4e8c"},{"location":"content/leetcode/0002/","text":"\u9898\u76ee \u4e24\u6570\u76f8\u52a0 \u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002 \u6837\u4f8b \u8f93\u5165\uff1al1 = [2,4,3], l2 = [5,6,4] \u8f93\u51fa\uff1a[7,0,8] \u89e3\u91ca\uff1a342 + 465 = 807. \u9898\u76ee\u5927\u610f \u9898\u76ee\u7528\u94fe\u8868\u53cd\u5e8f\u5b58\u50a8\u4e86\u4e24\u4e2a\u6570\uff0c\u9700\u8981\u7528\u94fe\u8868\u8f93\u51fa\u76f8\u52a0\u4e4b\u540e\u7684\u7ed3\u679c\u53cd\u5e8f\u8f93\u51fa\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u76f4\u63a5\u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u52a0\uff0c\u5728\u4e00\u4e2a\u6570\u52a0\u5b8c\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u5269\u4f59\u7684\u52a00\u5373\u53ef\uff0c\u6700\u540e\u591a\u51fa\u6765\u7684\u8fdb\u4f4d\u5728\u8fdb\u884c\u4e00\u6b65\u64cd\u4f5c\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc785.09%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc784.61%\u3002 Python\u601d\u8def\u4e00 \u540cC++\u601d\u8def\u4e00\uff0c\u65f6\u95f4\u8d85\u8fc799.22%\uff0c\u7a7a\u95f4\u8d85\u8fc718.23% Java\u601d\u8def\u4e00 \u540cC++\u601d\u8def\u4e00\uff0c\u65f6\u95f4\u8d85\u8fc799.93%\uff0c\u7a7a\u95f4\u8d85\u8fc715.76%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { int len1=0,len2=0; ListNode *p=new ListNode(-1),*q=p; int tmp=0; while(l1||l2){ int val1=l1?l1->val:0; int val2=l2?l2->val:0; int sum=val1+val2+tmp; tmp=sum/10; q->next=new ListNode(sum%10); q=q->next; if(l1!=nullptr){ l1=l1->next; } if(l2!=nullptr){ l2=l2->next; } } if(tmp==1){ q->next=new ListNode(1); } return p->next; } }; Python\u601d\u8def\u4e00 # Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: tmp=0 p=ListNode(-1) q=p while(l1 or l2): val1=l1.val if l1 else 0 val2=l2.val if l2 else 0 cnt=val1+val2+tmp # print(tmp) tmp=cnt//10 q.next=ListNode(cnt%10) q=q.next if l1: l1=l1.next if l2: l2=l2.next if tmp==1: q.next=ListNode(1) return p.next Java\u601d\u8def\u4e00 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { int tmp=0; ListNode p=new ListNode(-1); ListNode q=p; while(l1!=null||l2!=null){ int val1=l1!=null?l1.val:0; int val2=l2!=null?l2.val:0; int sum=tmp+val1+val2; tmp=sum/10; q.next=new ListNode(sum%10); q=q.next; if(l1!=null){ l1=l1.next; } if(l2!=null){ l2=l2.next; } } if(tmp==1){ q.next=new ListNode(1); } return p.next; } }","title":"XD0002"},{"location":"content/leetcode/0002/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0002/#_2","text":"\u7ed9\u4f60\u4e24\u4e2a \u975e\u7a7a \u7684\u94fe\u8868\uff0c\u8868\u793a\u4e24\u4e2a\u975e\u8d1f\u7684\u6574\u6570\u3002\u5b83\u4eec\u6bcf\u4f4d\u6570\u5b57\u90fd\u662f\u6309\u7167 \u9006\u5e8f \u7684\u65b9\u5f0f\u5b58\u50a8\u7684\uff0c\u5e76\u4e14\u6bcf\u4e2a\u8282\u70b9\u53ea\u80fd\u5b58\u50a8 \u4e00\u4f4d \u6570\u5b57\u3002 \u8bf7\u4f60\u5c06\u4e24\u4e2a\u6570\u76f8\u52a0\uff0c\u5e76\u4ee5\u76f8\u540c\u5f62\u5f0f\u8fd4\u56de\u4e00\u4e2a\u8868\u793a\u548c\u7684\u94fe\u8868\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6570\u5b57 0 \u4e4b\u5916\uff0c\u8fd9\u4e24\u4e2a\u6570\u90fd\u4e0d\u4f1a\u4ee5 0 \u5f00\u5934\u3002","title":"\u4e24\u6570\u76f8\u52a0"},{"location":"content/leetcode/0002/#_3","text":"\u8f93\u5165\uff1al1 = [2,4,3], l2 = [5,6,4] \u8f93\u51fa\uff1a[7,0,8] \u89e3\u91ca\uff1a342 + 465 = 807.","title":"\u6837\u4f8b"},{"location":"content/leetcode/0002/#_4","text":"\u9898\u76ee\u7528\u94fe\u8868\u53cd\u5e8f\u5b58\u50a8\u4e86\u4e24\u4e2a\u6570\uff0c\u9700\u8981\u7528\u94fe\u8868\u8f93\u51fa\u76f8\u52a0\u4e4b\u540e\u7684\u7ed3\u679c\u53cd\u5e8f\u8f93\u51fa\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0002/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0002/#c","text":"\u76f4\u63a5\u5bf9\u4e24\u4e2a\u6570\u8fdb\u884c\u76f8\u52a0\uff0c\u5728\u4e00\u4e2a\u6570\u52a0\u5b8c\u7684\u60c5\u51b5\u4e0b\uff0c\u5c06\u5269\u4f59\u7684\u52a00\u5373\u53ef\uff0c\u6700\u540e\u591a\u51fa\u6765\u7684\u8fdb\u4f4d\u5728\u8fdb\u884c\u4e00\u6b65\u64cd\u4f5c\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc785.09%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc784.61%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0002/#python","text":"\u540cC++\u601d\u8def\u4e00\uff0c\u65f6\u95f4\u8d85\u8fc799.22%\uff0c\u7a7a\u95f4\u8d85\u8fc718.23%","title":"Python\u601d\u8def\u4e00"},{"location":"content/leetcode/0002/#java","text":"\u540cC++\u601d\u8def\u4e00\uff0c\u65f6\u95f4\u8d85\u8fc799.93%\uff0c\u7a7a\u95f4\u8d85\u8fc715.76%\u3002","title":"Java\u601d\u8def\u4e00"},{"location":"content/leetcode/0002/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0002/#c_1","text":"/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) { int len1=0,len2=0; ListNode *p=new ListNode(-1),*q=p; int tmp=0; while(l1||l2){ int val1=l1?l1->val:0; int val2=l2?l2->val:0; int sum=val1+val2+tmp; tmp=sum/10; q->next=new ListNode(sum%10); q=q->next; if(l1!=nullptr){ l1=l1->next; } if(l2!=nullptr){ l2=l2->next; } } if(tmp==1){ q->next=new ListNode(1); } return p->next; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0002/#python_1","text":"# Definition for singly-linked list. # class ListNode: # def __init__(self, val=0, next=None): # self.val = val # self.next = next class Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode: tmp=0 p=ListNode(-1) q=p while(l1 or l2): val1=l1.val if l1 else 0 val2=l2.val if l2 else 0 cnt=val1+val2+tmp # print(tmp) tmp=cnt//10 q.next=ListNode(cnt%10) q=q.next if l1: l1=l1.next if l2: l2=l2.next if tmp==1: q.next=ListNode(1) return p.next","title":"Python\u601d\u8def\u4e00"},{"location":"content/leetcode/0002/#java_1","text":"/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { int tmp=0; ListNode p=new ListNode(-1); ListNode q=p; while(l1!=null||l2!=null){ int val1=l1!=null?l1.val:0; int val2=l2!=null?l2.val:0; int sum=tmp+val1+val2; tmp=sum/10; q.next=new ListNode(sum%10); q=q.next; if(l1!=null){ l1=l1.next; } if(l2!=null){ l2=l2.next; } } if(tmp==1){ q.next=new ListNode(1); } return p.next; } }","title":"Java\u601d\u8def\u4e00"},{"location":"content/leetcode/0003/","text":"\u9898\u76ee \u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b57\u4e32 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002 \u6837\u4f8b \u8f93\u5165: s = \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002 \u9898\u76ee\u5927\u610f \u5bfb\u627e\u4e00\u4e2a\u8fde\u7eed\u7684\uff0c\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u4e32\uff0c\u8f93\u51fa\u5176\u957f\u5ea6\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u7528map\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u51fa\u73b0\u91cd\u590d\u5c31\u66f4\u65b0\uff0c\u5e76\u66f4\u65b0\u6700\u957f\u4e32\u957f\u5ea6\uff0c\u7528\u4e00\u4e2a\u53d8\u91cf\u6807\u8bb0\u4f46\u524d\u5b57\u4e32\u7684\u4f4d\u7f6e\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc770.16%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(Llen(s))\uff0c\u5b57\u7b26\u4e32\u4e2d\u91cd\u590d\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u8d85\u8fc765%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int lengthOfLongestSubstring(string s) { int len=s.length(); int ans=0; map<int,int> m; int tmp=1; for(int i=0;i<len;++i){ if(m[s[i]]){ ans=max(ans,i+1-tmp); tmp=max(tmp,m[s[i]]+1); } m[s[i]]=i+1; } if(tmp){ ans=max(ans,len+1-tmp); } return ans; } };","title":"XD0003"},{"location":"content/leetcode/0003/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0003/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8bf7\u4f60\u627e\u51fa\u5176\u4e2d\u4e0d\u542b\u6709\u91cd\u590d\u5b57\u7b26\u7684 \u6700\u957f\u5b50\u4e32 \u7684\u957f\u5ea6\u3002","title":"\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b57\u4e32"},{"location":"content/leetcode/0003/#_3","text":"\u8f93\u5165: s = \"abcabcbb\" \u8f93\u51fa: 3 \u89e3\u91ca: \u56e0\u4e3a\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u5b50\u4e32\u662f \"abc\"\uff0c\u6240\u4ee5\u5176\u957f\u5ea6\u4e3a 3\u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0003/#_4","text":"\u5bfb\u627e\u4e00\u4e2a\u8fde\u7eed\u7684\uff0c\u65e0\u91cd\u590d\u5b57\u7b26\u7684\u6700\u957f\u4e32\uff0c\u8f93\u51fa\u5176\u957f\u5ea6\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0003/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0003/#c","text":"\u7528map\u8bb0\u5f55\u6bcf\u4e2a\u5b57\u7b26\u7684\u4f4d\u7f6e\uff0c\u51fa\u73b0\u91cd\u590d\u5c31\u66f4\u65b0\uff0c\u5e76\u66f4\u65b0\u6700\u957f\u4e32\u957f\u5ea6\uff0c\u7528\u4e00\u4e2a\u53d8\u91cf\u6807\u8bb0\u4f46\u524d\u5b57\u4e32\u7684\u4f4d\u7f6e\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc770.16%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(Llen(s))\uff0c\u5b57\u7b26\u4e32\u4e2d\u91cd\u590d\u5b57\u7b26\u7684\u4e2a\u6570\uff0c\u8d85\u8fc765%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0003/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0003/#c_1","text":"class Solution { public: int lengthOfLongestSubstring(string s) { int len=s.length(); int ans=0; map<int,int> m; int tmp=1; for(int i=0;i<len;++i){ if(m[s[i]]){ ans=max(ans,i+1-tmp); tmp=max(tmp,m[s[i]]+1); } m[s[i]]=i+1; } if(tmp){ ans=max(ans,len+1-tmp); } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0004/","text":"\u9898\u76ee \u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570 \u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 nums1 \u548c nums2\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002 \u8fdb\u9636\uff1a\u4f60\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log (m+n)) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f \u6837\u4f8b \u8f93\u5165\uff1anums1 = [1,3], nums2 = [2] \u8f93\u51fa\uff1a2.00000 \u89e3\u91ca\uff1a\u5408\u5e76\u6570\u7ec4 = [1,2,3] \uff0c\u4e2d\u4f4d\u6570 2 \u9898\u76ee\u5927\u610f \u7ed9\u4e24\u4e2a\u6570\u7ec4\uff0c\u627e\u4e24\u4e2a\u6570\u7ec4\u5408\u5e76\u540e\u7684\u4e2d\u4f4d\u6570\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u5148\u5408\u5e76\uff0c\u518d\u6392\u5e8f\uff0c\u518d\u627e\u4e2d\u95f4\u7684\u6570\u3002insert\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0csort\u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(NlogN)\uff0c\u65f6\u95f4\u8d85\u8fc779.27%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc786.34%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) { nums1.insert(nums1.end(),nums2.begin(),nums2.end()); sort(nums1.begin(),nums1.end()); int len=nums1.size(); double ans=0; if(len%2==0){ ans=(nums1[len/2]+nums1[len/2-1])/2.0; }else{ ans=nums1[(len-1)/2]; } return ans; } };","title":"XD0004"},{"location":"content/leetcode/0004/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0004/#_2","text":"\u7ed9\u5b9a\u4e24\u4e2a\u5927\u5c0f\u4e3a m \u548c n \u7684\u6b63\u5e8f\uff08\u4ece\u5c0f\u5230\u5927\uff09\u6570\u7ec4 nums1 \u548c nums2\u3002\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u8fd9\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570\u3002 \u8fdb\u9636\uff1a\u4f60\u80fd\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log (m+n)) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f","title":"\u5bfb\u627e\u4e24\u4e2a\u6b63\u5e8f\u6570\u7ec4\u7684\u4e2d\u4f4d\u6570"},{"location":"content/leetcode/0004/#_3","text":"\u8f93\u5165\uff1anums1 = [1,3], nums2 = [2] \u8f93\u51fa\uff1a2.00000 \u89e3\u91ca\uff1a\u5408\u5e76\u6570\u7ec4 = [1,2,3] \uff0c\u4e2d\u4f4d\u6570 2","title":"\u6837\u4f8b"},{"location":"content/leetcode/0004/#_4","text":"\u7ed9\u4e24\u4e2a\u6570\u7ec4\uff0c\u627e\u4e24\u4e2a\u6570\u7ec4\u5408\u5e76\u540e\u7684\u4e2d\u4f4d\u6570\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0004/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0004/#c","text":"\u5148\u5408\u5e76\uff0c\u518d\u6392\u5e8f\uff0c\u518d\u627e\u4e2d\u95f4\u7684\u6570\u3002insert\u65b9\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0csort\u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6O(NlogN)\uff0c\u65f6\u95f4\u8d85\u8fc779.27%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc786.34%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0004/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0004/#c_1","text":"class Solution { public: double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) { nums1.insert(nums1.end(),nums2.begin(),nums2.end()); sort(nums1.begin(),nums1.end()); int len=nums1.size(); double ans=0; if(len%2==0){ ans=(nums1[len/2]+nums1[len/2-1])/2.0; }else{ ans=nums1[(len-1)/2]; } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0005/","text":"\u9898\u76ee \u6700\u957f\u56de\u6587\u5b50\u4e32 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002 \u6837\u4f8b \u8f93\u5165\uff1as = \"babad\" \u8f93\u51fa\uff1a\"bab\" \u89e3\u91ca\uff1a\"aba\" \u540c\u6837\u662f\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848\u3002 \u9898\u76ee\u5927\u610f \u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\uff0c\u8f93\u51fa\u5b83\u7684\u5927\u5c0f\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 manacher\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc793.39%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc772.05% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: string longestPalindrome(string s) { if(size(s)<2)return s; string str=\"#\"; for(auto& x:s){ str+=x; str+='#'; } int sz=size(str); vector<int> p(sz); int start=0; int maxlen=0; int id=0; int mx=0; for(int i=0;i<sz;++i){ if(i<mx){ p[i]=min((mx-i),p[2*id-i]); }else if(i==mx){ p[i]=1; } while(i>=p[i]&&str[i-p[i]]==str[i+p[i]]){ ++p[i]; } if(mx<i+p[i]){ id=i; mx=i+p[i]; } if(p[i]-1>maxlen){ start=i; maxlen=p[i]-1; } } return s.substr((start-p[start]+1)/2,maxlen); } };","title":"XD0005"},{"location":"content/leetcode/0005/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0005/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u627e\u5230 s \u4e2d\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\u3002","title":"\u6700\u957f\u56de\u6587\u5b50\u4e32"},{"location":"content/leetcode/0005/#_3","text":"\u8f93\u5165\uff1as = \"babad\" \u8f93\u51fa\uff1a\"bab\" \u89e3\u91ca\uff1a\"aba\" \u540c\u6837\u662f\u7b26\u5408\u9898\u610f\u7684\u7b54\u6848\u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0005/#_4","text":"\u627e\u5230\u6700\u957f\u7684\u56de\u6587\u5b50\u4e32\uff0c\u8f93\u51fa\u5b83\u7684\u5927\u5c0f\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0005/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0005/#c","text":"manacher\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc793.39%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc772.05%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0005/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0005/#c_1","text":"class Solution { public: string longestPalindrome(string s) { if(size(s)<2)return s; string str=\"#\"; for(auto& x:s){ str+=x; str+='#'; } int sz=size(str); vector<int> p(sz); int start=0; int maxlen=0; int id=0; int mx=0; for(int i=0;i<sz;++i){ if(i<mx){ p[i]=min((mx-i),p[2*id-i]); }else if(i==mx){ p[i]=1; } while(i>=p[i]&&str[i-p[i]]==str[i+p[i]]){ ++p[i]; } if(mx<i+p[i]){ id=i; mx=i+p[i]; } if(p[i]-1>maxlen){ start=i; maxlen=p[i]-1; } } return s.substr((start-p[start]+1)/2,maxlen); } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0006/","text":"\u9898\u76ee Z\u5b57\u5f62\u53d8\u6362 \u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32 s \u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570 numRows \uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c Z \u5b57\u5f62\u6392\u5217\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a \"PAYPALISHIRING\" \u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a P A H N A P L S I I G Y I R \u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a\"PAHNAPLSIIGYIR\"\u3002 \u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a string convert(string s, int numRows); \u6837\u4f8b \u8f93\u5165\uff1as = \"PAYPALISHIRING\", numRows = 3 \u8f93\u51fa\uff1a\"PAHNAPLSIIGYIR\" \u9898\u76ee\u5927\u610f \u7ed9\u5b9a\u539f\u5b57\u7b26\u4e32\u548c\u53d8\u5f62\u9700\u8981\u7684\u884c\u6570\uff0c\u8f93\u51faZ\u53d8\u5f62\u540e\u7684\u7ed3\u679c\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u6839\u636e\u884c\u6570\u521b\u5efa\u76f8\u5e94\u7684\u5bb9\u5668\u5b58\u653e\u6bcf\u4e00\u884c\u7684\u5185\u5bb9\uff0c\u6700\u540e\u62fc\u63a5\u8f93\u51fa\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc751%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc790%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: string convert(string s, int numRows) { if(numRows==1) return s; string str[1005]; int sz=size(s); int cnt=0; int w=1; for(int i=0;i<sz;++i){ str[cnt]+=s[i]; if(w==1){ cnt++; if(cnt==numRows-1){ w=-1; } }else{ cnt--; if(cnt==0){ w=1; } } } string ans; for(int i=0;i<numRows;++i){ ans.append(str[i]); } return ans; } };","title":"XD0006"},{"location":"content/leetcode/0006/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0006/#z","text":"\u5c06\u4e00\u4e2a\u7ed9\u5b9a\u5b57\u7b26\u4e32 s \u6839\u636e\u7ed9\u5b9a\u7684\u884c\u6570 numRows \uff0c\u4ee5\u4ece\u4e0a\u5f80\u4e0b\u3001\u4ece\u5de6\u5230\u53f3\u8fdb\u884c Z \u5b57\u5f62\u6392\u5217\u3002 \u6bd4\u5982\u8f93\u5165\u5b57\u7b26\u4e32\u4e3a \"PAYPALISHIRING\" \u884c\u6570\u4e3a 3 \u65f6\uff0c\u6392\u5217\u5982\u4e0b\uff1a P A H N A P L S I I G Y I R \u4e4b\u540e\uff0c\u4f60\u7684\u8f93\u51fa\u9700\u8981\u4ece\u5de6\u5f80\u53f3\u9010\u884c\u8bfb\u53d6\uff0c\u4ea7\u751f\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\uff0c\u6bd4\u5982\uff1a\"PAHNAPLSIIGYIR\"\u3002 \u8bf7\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u5c06\u5b57\u7b26\u4e32\u8fdb\u884c\u6307\u5b9a\u884c\u6570\u53d8\u6362\u7684\u51fd\u6570\uff1a string convert(string s, int numRows);","title":"Z\u5b57\u5f62\u53d8\u6362"},{"location":"content/leetcode/0006/#_2","text":"\u8f93\u5165\uff1as = \"PAYPALISHIRING\", numRows = 3 \u8f93\u51fa\uff1a\"PAHNAPLSIIGYIR\"","title":"\u6837\u4f8b"},{"location":"content/leetcode/0006/#_3","text":"\u7ed9\u5b9a\u539f\u5b57\u7b26\u4e32\u548c\u53d8\u5f62\u9700\u8981\u7684\u884c\u6570\uff0c\u8f93\u51faZ\u53d8\u5f62\u540e\u7684\u7ed3\u679c\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0006/#_4","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0006/#c","text":"\u6839\u636e\u884c\u6570\u521b\u5efa\u76f8\u5e94\u7684\u5bb9\u5668\u5b58\u653e\u6bcf\u4e00\u884c\u7684\u5185\u5bb9\uff0c\u6700\u540e\u62fc\u63a5\u8f93\u51fa\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc751%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc790%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0006/#_5","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0006/#c_1","text":"class Solution { public: string convert(string s, int numRows) { if(numRows==1) return s; string str[1005]; int sz=size(s); int cnt=0; int w=1; for(int i=0;i<sz;++i){ str[cnt]+=s[i]; if(w==1){ cnt++; if(cnt==numRows-1){ w=-1; } }else{ cnt--; if(cnt==0){ w=1; } } } string ans; for(int i=0;i<numRows;++i){ ans.append(str[i]); } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0007/","text":"\u9898\u76ee \u6574\u6570\u53cd\u8f6c \u7ed9\u4f60\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570 x \uff0c\u8fd4\u56de x \u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u53cd\u8f6c\u540e\u7684\u7ed3\u679c\u3002 \u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u8d85\u8fc7 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4 [\u2212231, 231 \u2212 1] \uff0c\u5c31\u8fd4\u56de 0\u3002 \u5047\u8bbe\u73af\u5883\u4e0d\u5141\u8bb8\u5b58\u50a8 64 \u4f4d\u6574\u6570\uff08\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7\uff09\u3002 \u6837\u4f8b \u8f93\u5165\uff1ax = 123 \u8f93\u51fa\uff1a321 \u9898\u76ee\u5927\u610f \u5c06\u7ed9\u5b9a\u7684\u6b63\u6574\u6570\u6216\u8d1f\u6574\u6570\u53cd\u8f6c\u6210\u4e00\u4e2a\u65b0\u7684\u6570\uff0c\u5982\u679c\u8d85\u51faint\u8303\u56f4\u5c31\u8f93\u51fa0\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u53cd\u8f6c\u8f93\u51fa\uff0c\u8d85\u51fa\u8303\u56f4\u5224\u65ad\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(len(x))\uff0c\u8d85\u8fc7100%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc784.69% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int reverse(int x) { long long ans=0; int mx=0x7fffffff,mi=-mx-1; if(x>0){ while(x){ ans=ans*10+x%10; x/=10; } }else if(x==0){ return 0; }else{ while(x){ ans=ans*10+abs(x%10); x/=10; } ans*=-1; } if(ans>mx||ans<mi){ ans=0; } return ans; } };","title":"XD0007"},{"location":"content/leetcode/0007/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0007/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570 x \uff0c\u8fd4\u56de x \u4e2d\u6bcf\u4f4d\u4e0a\u7684\u6570\u5b57\u53cd\u8f6c\u540e\u7684\u7ed3\u679c\u3002 \u5982\u679c\u53cd\u8f6c\u540e\u6574\u6570\u8d85\u8fc7 32 \u4f4d\u7684\u6709\u7b26\u53f7\u6574\u6570\u7684\u8303\u56f4 [\u2212231, 231 \u2212 1] \uff0c\u5c31\u8fd4\u56de 0\u3002 \u5047\u8bbe\u73af\u5883\u4e0d\u5141\u8bb8\u5b58\u50a8 64 \u4f4d\u6574\u6570\uff08\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7\uff09\u3002","title":"\u6574\u6570\u53cd\u8f6c"},{"location":"content/leetcode/0007/#_3","text":"\u8f93\u5165\uff1ax = 123 \u8f93\u51fa\uff1a321","title":"\u6837\u4f8b"},{"location":"content/leetcode/0007/#_4","text":"\u5c06\u7ed9\u5b9a\u7684\u6b63\u6574\u6570\u6216\u8d1f\u6574\u6570\u53cd\u8f6c\u6210\u4e00\u4e2a\u65b0\u7684\u6570\uff0c\u5982\u679c\u8d85\u51faint\u8303\u56f4\u5c31\u8f93\u51fa0\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0007/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0007/#c","text":"\u53cd\u8f6c\u8f93\u51fa\uff0c\u8d85\u51fa\u8303\u56f4\u5224\u65ad\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(len(x))\uff0c\u8d85\u8fc7100%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc784.69%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0007/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0007/#c_1","text":"class Solution { public: int reverse(int x) { long long ans=0; int mx=0x7fffffff,mi=-mx-1; if(x>0){ while(x){ ans=ans*10+x%10; x/=10; } }else if(x==0){ return 0; }else{ while(x){ ans=ans*10+abs(x%10); x/=10; } ans*=-1; } if(ans>mx||ans<mi){ ans=0; } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0008/","text":"\u9898\u76ee \u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570 \u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a myAtoi(string s) \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff08\u7c7b\u4f3c C/C++ \u4e2d\u7684 atoi \u51fd\u6570\uff09\u3002 \u51fd\u6570 myAtoi(string s) \u7684\u7b97\u6cd5\u5982\u4e0b\uff1a \u8bfb\u5165\u5b57\u7b26\u4e32\u5e76\u4e22\u5f03\u65e0\u7528\u7684\u524d\u5bfc\u7a7a\u683c \u68c0\u67e5\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff08\u5047\u8bbe\u8fd8\u672a\u5230\u5b57\u7b26\u672b\u5c3e\uff09\u4e3a\u6b63\u8fd8\u662f\u8d1f\u53f7\uff0c\u8bfb\u53d6\u8be5\u5b57\u7b26\uff08\u5982\u679c\u6709\uff09\u3002 \u786e\u5b9a\u6700\u7ec8\u7ed3\u679c\u662f\u8d1f\u6570\u8fd8\u662f\u6b63\u6570\u3002 \u5982\u679c\u4e24\u8005\u90fd\u4e0d\u5b58\u5728\uff0c\u5219\u5047\u5b9a\u7ed3\u679c\u4e3a\u6b63\u3002 \u8bfb\u5165\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u76f4\u5230\u5230\u8fbe\u4e0b\u4e00\u4e2a\u975e\u6570\u5b57\u5b57\u7b26\u6216\u5230\u8fbe\u8f93\u5165\u7684\u7ed3\u5c3e\u3002\u5b57\u7b26\u4e32\u7684\u5176\u4f59\u90e8\u5206\u5c06\u88ab\u5ffd\u7565\u3002 \u5c06\u524d\u9762\u6b65\u9aa4\u8bfb\u5165\u7684\u8fd9\u4e9b\u6570\u5b57\u8f6c\u6362\u4e3a\u6574\u6570\uff08\u5373\uff0c\"123\" -> 123\uff0c \"0032\" -> 32\uff09\u3002\u5982\u679c\u6ca1\u6709\u8bfb\u5165\u6570\u5b57\uff0c\u5219\u6574\u6570\u4e3a 0 \u3002\u5fc5\u8981\u65f6\u66f4\u6539\u7b26\u53f7\uff08\u4ece\u6b65\u9aa4 2 \u5f00\u59cb\uff09\u3002 \u5982\u679c\u6574\u6570\u6570\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4 [\u2212231, 231 \u2212 1] \uff0c\u9700\u8981\u622a\u65ad\u8fd9\u4e2a\u6574\u6570\uff0c\u4f7f\u5176\u4fdd\u6301\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c0f\u4e8e \u2212231 \u7684\u6574\u6570\u5e94\u8be5\u88ab\u56fa\u5b9a\u4e3a \u2212231 \uff0c\u5927\u4e8e 231 \u2212 1 \u7684\u6574\u6570\u5e94\u8be5\u88ab\u56fa\u5b9a\u4e3a 231 \u2212 1 \u3002 \u8fd4\u56de\u6574\u6570\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002 \u6ce8\u610f\uff1a \u672c\u9898\u4e2d\u7684\u7a7a\u767d\u5b57\u7b26\u53ea\u5305\u62ec\u7a7a\u683c\u5b57\u7b26 ' ' \u3002 \u9664\u524d\u5bfc\u7a7a\u683c\u6216\u6570\u5b57\u540e\u7684\u5176\u4f59\u5b57\u7b26\u4e32\u5916\uff0c\u8bf7\u52ff\u5ffd\u7565 \u4efb\u4f55\u5176\u4ed6\u5b57\u7b26\u3002 \u6837\u4f8b \u8f93\u5165\uff1as = \"42\" \u8f93\u51fa\uff1a42 \u89e3\u91ca\uff1a\u52a0\u7c97\u7684\u5b57\u7b26\u4e32\u4e3a\u5df2\u7ecf\u8bfb\u5165\u7684\u5b57\u7b26\uff0c\u63d2\u5165\u7b26\u53f7\u662f\u5f53\u524d\u8bfb\u53d6\u7684\u5b57\u7b26\u3002 \u7b2c 1 \u6b65\uff1a\"42\"\uff08\u5f53\u524d\u6ca1\u6709\u8bfb\u5165\u5b57\u7b26\uff0c\u56e0\u4e3a\u6ca1\u6709\u524d\u5bfc\u7a7a\u683c\uff09 ^ \u7b2c 2 \u6b65\uff1a\"42\"\uff08\u5f53\u524d\u6ca1\u6709\u8bfb\u5165\u5b57\u7b26\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4e0d\u5b58\u5728 '-' \u6216\u8005 '+'\uff09 ^ \u7b2c 3 \u6b65\uff1a\"42\"\uff08\u8bfb\u5165 \"42\"\uff09 ^ \u89e3\u6790\u5f97\u5230\u6574\u6570 42 \u3002 \u7531\u4e8e \"42\" \u5728\u8303\u56f4 [-231, 231 - 1] \u5185\uff0c\u6700\u7ec8\u7ed3\u679c\u4e3a 42 \u3002 \u9898\u76ee\u5927\u610f \u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u4f4d\u4e8e\u6700\u524d\u9762\u7684\u6574\u6570\uff0c\u8d85\u8fc7int\u8303\u56f4\u7684\u8f93\u51faint\u8fb9\u754c\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u5148\u5728\u5b57\u7b26\u6700\u540e\u6dfb\u52a0\u4e00\u4f4d\u4e0d\u76f8\u5173\u7684\u5b9a\u754c\u7b26\uff0c\u2018#\u2019\uff0c\u7136\u540e\u53bb\u6389\u6700\u524d\u9762\u7684\u7a7a\u683c\uff0c\u7136\u540e\u5982\u679c\u7b2c\u4e00\u4f4d\u662f\u6b63\u8d1f\u53f7\uff0c\u5224\u65ad\u4e0b\u4e00\u4f4d\u662f\u4e0d\u662f\u6570\u5b57\uff0c\u5982\u679c\u7b2c\u4e00\u4f4d\u662f\u6570\u5b57\uff0c\u6807\u8bb0\u4e00\u4e0b\uff0c\u9632\u6b62\u540e\u9762\u51fa\u73b0\u6b63\u8d1f\u53f7\u3002\u5176\u4f59\u60c5\u51b5\u7686\u8df3\u51fa\u5faa\u73af\u5373\u53ef\uff0c\u9632\u6b62\u7206longlong\uff0c\u5728\u8d85\u8fc7int\u8303\u56f4\u5c31\u8df3\u51fa\u5faa\u73af\u3002\u5b9e\u8df5\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc734.06%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc786.50% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int myAtoi(string s) { int sz=size(s); if(sz==0) return 0; long long ans=0; int mx=0x7fffffff,mi=-mx-1; int i; int f=1; s[sz]='#'; int tmp=0; for(i=0;s[i]==' ';++i); for(int j=i;j<sz;++j){ if(s[j]=='+'&&s[j+1]>='0'&&s[j+1]<='9'&&tmp==0){ f=1; }else if(s[j]=='-'&&s[j+1]>='0'&&s[j+1]<='9'&&tmp==0){ f=-1; }else if(s[j]>='0'&&s[j]<='9'){ ans=ans*10+s[j]-'0'; tmp=1; if(ans>mx){ break; } }else{ break; } } ans*=f; if(ans>mx){ ans=mx; }else if(ans<mi){ ans=mi; } return ans; } };","title":"XD0008"},{"location":"content/leetcode/0008/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0008/#_2","text":"\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a myAtoi(string s) \u51fd\u6570\uff0c\u4f7f\u5176\u80fd\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u4e00\u4e2a 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\uff08\u7c7b\u4f3c C/C++ \u4e2d\u7684 atoi \u51fd\u6570\uff09\u3002 \u51fd\u6570 myAtoi(string s) \u7684\u7b97\u6cd5\u5982\u4e0b\uff1a \u8bfb\u5165\u5b57\u7b26\u4e32\u5e76\u4e22\u5f03\u65e0\u7528\u7684\u524d\u5bfc\u7a7a\u683c \u68c0\u67e5\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff08\u5047\u8bbe\u8fd8\u672a\u5230\u5b57\u7b26\u672b\u5c3e\uff09\u4e3a\u6b63\u8fd8\u662f\u8d1f\u53f7\uff0c\u8bfb\u53d6\u8be5\u5b57\u7b26\uff08\u5982\u679c\u6709\uff09\u3002 \u786e\u5b9a\u6700\u7ec8\u7ed3\u679c\u662f\u8d1f\u6570\u8fd8\u662f\u6b63\u6570\u3002 \u5982\u679c\u4e24\u8005\u90fd\u4e0d\u5b58\u5728\uff0c\u5219\u5047\u5b9a\u7ed3\u679c\u4e3a\u6b63\u3002 \u8bfb\u5165\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u76f4\u5230\u5230\u8fbe\u4e0b\u4e00\u4e2a\u975e\u6570\u5b57\u5b57\u7b26\u6216\u5230\u8fbe\u8f93\u5165\u7684\u7ed3\u5c3e\u3002\u5b57\u7b26\u4e32\u7684\u5176\u4f59\u90e8\u5206\u5c06\u88ab\u5ffd\u7565\u3002 \u5c06\u524d\u9762\u6b65\u9aa4\u8bfb\u5165\u7684\u8fd9\u4e9b\u6570\u5b57\u8f6c\u6362\u4e3a\u6574\u6570\uff08\u5373\uff0c\"123\" -> 123\uff0c \"0032\" -> 32\uff09\u3002\u5982\u679c\u6ca1\u6709\u8bfb\u5165\u6570\u5b57\uff0c\u5219\u6574\u6570\u4e3a 0 \u3002\u5fc5\u8981\u65f6\u66f4\u6539\u7b26\u53f7\uff08\u4ece\u6b65\u9aa4 2 \u5f00\u59cb\uff09\u3002 \u5982\u679c\u6574\u6570\u6570\u8d85\u8fc7 32 \u4f4d\u6709\u7b26\u53f7\u6574\u6570\u8303\u56f4 [\u2212231, 231 \u2212 1] \uff0c\u9700\u8981\u622a\u65ad\u8fd9\u4e2a\u6574\u6570\uff0c\u4f7f\u5176\u4fdd\u6301\u5728\u8fd9\u4e2a\u8303\u56f4\u5185\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u5c0f\u4e8e \u2212231 \u7684\u6574\u6570\u5e94\u8be5\u88ab\u56fa\u5b9a\u4e3a \u2212231 \uff0c\u5927\u4e8e 231 \u2212 1 \u7684\u6574\u6570\u5e94\u8be5\u88ab\u56fa\u5b9a\u4e3a 231 \u2212 1 \u3002 \u8fd4\u56de\u6574\u6570\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002 \u6ce8\u610f\uff1a \u672c\u9898\u4e2d\u7684\u7a7a\u767d\u5b57\u7b26\u53ea\u5305\u62ec\u7a7a\u683c\u5b57\u7b26 ' ' \u3002 \u9664\u524d\u5bfc\u7a7a\u683c\u6216\u6570\u5b57\u540e\u7684\u5176\u4f59\u5b57\u7b26\u4e32\u5916\uff0c\u8bf7\u52ff\u5ffd\u7565 \u4efb\u4f55\u5176\u4ed6\u5b57\u7b26\u3002","title":"\u5b57\u7b26\u4e32\u8f6c\u6362\u6574\u6570"},{"location":"content/leetcode/0008/#_3","text":"\u8f93\u5165\uff1as = \"42\" \u8f93\u51fa\uff1a42 \u89e3\u91ca\uff1a\u52a0\u7c97\u7684\u5b57\u7b26\u4e32\u4e3a\u5df2\u7ecf\u8bfb\u5165\u7684\u5b57\u7b26\uff0c\u63d2\u5165\u7b26\u53f7\u662f\u5f53\u524d\u8bfb\u53d6\u7684\u5b57\u7b26\u3002 \u7b2c 1 \u6b65\uff1a\"42\"\uff08\u5f53\u524d\u6ca1\u6709\u8bfb\u5165\u5b57\u7b26\uff0c\u56e0\u4e3a\u6ca1\u6709\u524d\u5bfc\u7a7a\u683c\uff09 ^ \u7b2c 2 \u6b65\uff1a\"42\"\uff08\u5f53\u524d\u6ca1\u6709\u8bfb\u5165\u5b57\u7b26\uff0c\u56e0\u4e3a\u8fd9\u91cc\u4e0d\u5b58\u5728 '-' \u6216\u8005 '+'\uff09 ^ \u7b2c 3 \u6b65\uff1a\"42\"\uff08\u8bfb\u5165 \"42\"\uff09 ^ \u89e3\u6790\u5f97\u5230\u6574\u6570 42 \u3002 \u7531\u4e8e \"42\" \u5728\u8303\u56f4 [-231, 231 - 1] \u5185\uff0c\u6700\u7ec8\u7ed3\u679c\u4e3a 42 \u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0008/#_4","text":"\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u4f4d\u4e8e\u6700\u524d\u9762\u7684\u6574\u6570\uff0c\u8d85\u8fc7int\u8303\u56f4\u7684\u8f93\u51faint\u8fb9\u754c\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0008/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0008/#c","text":"\u5148\u5728\u5b57\u7b26\u6700\u540e\u6dfb\u52a0\u4e00\u4f4d\u4e0d\u76f8\u5173\u7684\u5b9a\u754c\u7b26\uff0c\u2018#\u2019\uff0c\u7136\u540e\u53bb\u6389\u6700\u524d\u9762\u7684\u7a7a\u683c\uff0c\u7136\u540e\u5982\u679c\u7b2c\u4e00\u4f4d\u662f\u6b63\u8d1f\u53f7\uff0c\u5224\u65ad\u4e0b\u4e00\u4f4d\u662f\u4e0d\u662f\u6570\u5b57\uff0c\u5982\u679c\u7b2c\u4e00\u4f4d\u662f\u6570\u5b57\uff0c\u6807\u8bb0\u4e00\u4e0b\uff0c\u9632\u6b62\u540e\u9762\u51fa\u73b0\u6b63\u8d1f\u53f7\u3002\u5176\u4f59\u60c5\u51b5\u7686\u8df3\u51fa\u5faa\u73af\u5373\u53ef\uff0c\u9632\u6b62\u7206longlong\uff0c\u5728\u8d85\u8fc7int\u8303\u56f4\u5c31\u8df3\u51fa\u5faa\u73af\u3002\u5b9e\u8df5\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc734.06%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc786.50%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0008/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0008/#c_1","text":"class Solution { public: int myAtoi(string s) { int sz=size(s); if(sz==0) return 0; long long ans=0; int mx=0x7fffffff,mi=-mx-1; int i; int f=1; s[sz]='#'; int tmp=0; for(i=0;s[i]==' ';++i); for(int j=i;j<sz;++j){ if(s[j]=='+'&&s[j+1]>='0'&&s[j+1]<='9'&&tmp==0){ f=1; }else if(s[j]=='-'&&s[j+1]>='0'&&s[j+1]<='9'&&tmp==0){ f=-1; }else if(s[j]>='0'&&s[j]<='9'){ ans=ans*10+s[j]-'0'; tmp=1; if(ans>mx){ break; } }else{ break; } } ans*=f; if(ans>mx){ ans=mx; }else if(ans<mi){ ans=mi; } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0009/","text":"\u9898\u76ee \u56de\u6587\u6570 \u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 x \uff0c\u5982\u679c x \u662f\u4e00\u4e2a\u56de\u6587\u6574\u6570\uff0c\u8fd4\u56de ture \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002\u4f8b\u5982\uff0c121 \u662f\u56de\u6587\uff0c\u800c 123 \u4e0d\u662f\u3002 \u6837\u4f8b \u8f93\u5165\uff1ax = 121 \u8f93\u51fa\uff1atrue \u9898\u76ee\u5927\u610f \u5224\u65ad\u4e00\u4e2a\u6570\u6b63\u8fc7\u6765\u548c\u53cd\u8fc7\u6765\u662f\u5426\u4e00\u81f4\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u8d1f\u6570false\uff0c0\u7279\u5224\uff0c\u6b63\u6570\u628a\u53cd\u8fc7\u6765\u7684\u6570\u5b58\u4e0b\u6765\uff0c==\u5224\u65ad\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(len(N))\uff0c\u8d85\u8fc739.20%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc797.43% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: bool isPalindrome(int x) { if(x<0) return false; else if(x==0) return true; else{ int t=x; long long p=0; int mx=0x7fffffff; while(t){ p=p*10+t%10; if(p>mx) return false; t/=10; } if(p==x){ return true; }else{ return false; } } } };","title":"XD0009"},{"location":"content/leetcode/0009/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0009/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 x \uff0c\u5982\u679c x \u662f\u4e00\u4e2a\u56de\u6587\u6574\u6570\uff0c\u8fd4\u56de ture \uff1b\u5426\u5219\uff0c\u8fd4\u56de false \u3002 \u56de\u6587\u6570\u662f\u6307\u6b63\u5e8f\uff08\u4ece\u5de6\u5411\u53f3\uff09\u548c\u5012\u5e8f\uff08\u4ece\u53f3\u5411\u5de6\uff09\u8bfb\u90fd\u662f\u4e00\u6837\u7684\u6574\u6570\u3002\u4f8b\u5982\uff0c121 \u662f\u56de\u6587\uff0c\u800c 123 \u4e0d\u662f\u3002","title":"\u56de\u6587\u6570"},{"location":"content/leetcode/0009/#_3","text":"\u8f93\u5165\uff1ax = 121 \u8f93\u51fa\uff1atrue","title":"\u6837\u4f8b"},{"location":"content/leetcode/0009/#_4","text":"\u5224\u65ad\u4e00\u4e2a\u6570\u6b63\u8fc7\u6765\u548c\u53cd\u8fc7\u6765\u662f\u5426\u4e00\u81f4\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0009/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0009/#c","text":"\u8d1f\u6570false\uff0c0\u7279\u5224\uff0c\u6b63\u6570\u628a\u53cd\u8fc7\u6765\u7684\u6570\u5b58\u4e0b\u6765\uff0c==\u5224\u65ad\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(len(N))\uff0c\u8d85\u8fc739.20%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc797.43%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0009/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0009/#c_1","text":"class Solution { public: bool isPalindrome(int x) { if(x<0) return false; else if(x==0) return true; else{ int t=x; long long p=0; int mx=0x7fffffff; while(t){ p=p*10+t%10; if(p>mx) return false; t/=10; } if(p==x){ return true; }else{ return false; } } } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0010/","text":"\u9898\u76ee \u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b p\uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 '*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20 \u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 s\u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002 \u6837\u4f8b \u8f93\u5165\uff1as = \"aa\" p = \"a\" \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a\"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002 \u9898\u76ee\u5927\u610f \u7ed9\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219\uff0c\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5339\u914d\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u8fd0\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\uff0c\u540e\u9762\u4e00\u4e2a\u72b6\u6001\u7684\u5b9e\u73b0\u662f\u57fa\u4e8e\u524d\u9762\u4e00\u4e2a\u72b6\u6001\uff0c\u5bf9\u6574\u4e2a\u8868\u8fbe\u5f0f\u8fdb\u884c\u904d\u5386\uff0c\u603b\u7ed3\u76f8\u5e94\u7684\u7ed3\u679c\uff0c\u5f97\u5230\u6700\u540e\u7684\u7ed3\u8bba\u3002 \u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc769.84%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc768.85%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: bool isMatch(string s, string p) { vector<vector<bool>> dp(size(s)+1,vector<bool>(size(p)+1)); dp[0][0]=true; for(int i=0;i<size(p);++i){ if(p[i]=='*') dp[0][i+1]=dp[0][i-1]; } for(int i=0;i<size(s);++i){ for(int j=0;j<size(p);++j){ if(s[i]==p[j]||p[j]=='.'){ dp[i+1][j+1]=dp[i][j]; }else if(p[j]=='*'){ if(s[i]!=p[j-1]&&p[j-1]!='.'){ dp[i+1][j+1]=dp[i+1][j-1]; }else{ dp[i+1][j+1]=dp[i+1][j]||dp[i+1][j-1]||dp[i][j+1]; } } } } return dp[size(s)][size(p)]; } };","title":"XD0010"},{"location":"content/leetcode/0010/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0010/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u89c4\u5f8b p\uff0c\u8bf7\u4f60\u6765\u5b9e\u73b0\u4e00\u4e2a\u652f\u6301 '.' \u548c '*' \u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3002 '.' \u5339\u914d\u4efb\u610f\u5355\u4e2a\u5b57\u7b26 '*' \u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u524d\u9762\u7684\u90a3\u4e00\u4e2a\u5143\u7d20 \u6240\u8c13\u5339\u914d\uff0c\u662f\u8981\u6db5\u76d6 \u6574\u4e2a \u5b57\u7b26\u4e32 s\u7684\uff0c\u800c\u4e0d\u662f\u90e8\u5206\u5b57\u7b26\u4e32\u3002","title":"\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d"},{"location":"content/leetcode/0010/#_3","text":"\u8f93\u5165\uff1as = \"aa\" p = \"a\" \u8f93\u51fa\uff1afalse \u89e3\u91ca\uff1a\"a\" \u65e0\u6cd5\u5339\u914d \"aa\" \u6574\u4e2a\u5b57\u7b26\u4e32\u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0010/#_4","text":"\u7ed9\u4e86\u6b63\u5219\u8868\u8fbe\u5f0f\u89c4\u5219\uff0c\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u5339\u914d\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0010/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0010/#c","text":"\u8fd0\u7528\u52a8\u6001\u89c4\u5212\u7684\u601d\u60f3\uff0c\u540e\u9762\u4e00\u4e2a\u72b6\u6001\u7684\u5b9e\u73b0\u662f\u57fa\u4e8e\u524d\u9762\u4e00\u4e2a\u72b6\u6001\uff0c\u5bf9\u6574\u4e2a\u8868\u8fbe\u5f0f\u8fdb\u884c\u904d\u5386\uff0c\u603b\u7ed3\u76f8\u5e94\u7684\u7ed3\u679c\uff0c\u5f97\u5230\u6700\u540e\u7684\u7ed3\u8bba\u3002 \u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc769.84%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc768.85%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0010/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0010/#c_1","text":"class Solution { public: bool isMatch(string s, string p) { vector<vector<bool>> dp(size(s)+1,vector<bool>(size(p)+1)); dp[0][0]=true; for(int i=0;i<size(p);++i){ if(p[i]=='*') dp[0][i+1]=dp[0][i-1]; } for(int i=0;i<size(s);++i){ for(int j=0;j<size(p);++j){ if(s[i]==p[j]||p[j]=='.'){ dp[i+1][j+1]=dp[i][j]; }else if(p[j]=='*'){ if(s[i]!=p[j-1]&&p[j-1]!='.'){ dp[i+1][j+1]=dp[i+1][j-1]; }else{ dp[i+1][j+1]=dp[i+1][j]||dp[i+1][j-1]||dp[i][j+1]; } } } } return dp[size(s)][size(p)]; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0011/","text":"\u9898\u76ee \u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668 \u7ed9\u4f60 n \u4e2a\u975e\u8d1f\u6574\u6570 a1\uff0ca2\uff0c...\uff0can\uff0c\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 (i, ai) \u3002\u5728\u5750\u6807\u5185\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a (i, ai) \u548c (i, 0) \u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u8bf4\u660e\uff1a\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\u3002 \u6837\u4f8b \u8f93\u5165\uff1a[1,8,6,2,5,4,8,3,7] \u8f93\u51fa\uff1a49 \u89e3\u91ca\uff1a\u56fe\u4e2d\u5782\u76f4\u7ebf\u4ee3\u8868\u8f93\u5165\u6570\u7ec4 [1,8,6,2,5,4,8,3,7]\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u80fd\u591f\u5bb9\u7eb3\u6c34\uff08\u8868\u793a\u4e3a\u84dd\u8272\u90e8\u5206\uff09\u7684\u6700\u5927\u503c\u4e3a 49\u3002 \u9898\u76ee\u5927\u610f \u627e\u5230\u80fd\u76db\u653e\u6700\u591a\u6c34\u7684\u533a\u95f4\uff0c\u8f93\u51fa\u5176\u9762\u79ef \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u4ece\u4e24\u8fb9\u5f80\u91cc\u627e\uff0c\u77ed\u8fb9\u5148\u884c\uff0c\u78b0\u4e0a\u505c\u6b62\uff0c\u9762\u79ef\u4e0d\u65ad\u66f4\u65b0\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc7100%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc796.91%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int maxArea(vector<int>& height) { int l=0,r=size(height)-1; int ans=0; while(l<=r){ ans=max(ans,min(height[l],height[r])*(r-l)); if(height[l]>=height[r]){ r--; }else{ l++; } } return ans; } };","title":"XD0011"},{"location":"content/leetcode/0011/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0011/#_2","text":"\u7ed9\u4f60 n \u4e2a\u975e\u8d1f\u6574\u6570 a1\uff0ca2\uff0c...\uff0can\uff0c\u6bcf\u4e2a\u6570\u4ee3\u8868\u5750\u6807\u4e2d\u7684\u4e00\u4e2a\u70b9 (i, ai) \u3002\u5728\u5750\u6807\u5185\u753b n \u6761\u5782\u76f4\u7ebf\uff0c\u5782\u76f4\u7ebf i \u7684\u4e24\u4e2a\u7aef\u70b9\u5206\u522b\u4e3a (i, ai) \u548c (i, 0) \u3002\u627e\u51fa\u5176\u4e2d\u7684\u4e24\u6761\u7ebf\uff0c\u4f7f\u5f97\u5b83\u4eec\u4e0e x \u8f74\u5171\u540c\u6784\u6210\u7684\u5bb9\u5668\u53ef\u4ee5\u5bb9\u7eb3\u6700\u591a\u7684\u6c34\u3002 \u8bf4\u660e\uff1a\u4f60\u4e0d\u80fd\u503e\u659c\u5bb9\u5668\u3002","title":"\u76db\u6700\u591a\u6c34\u7684\u5bb9\u5668"},{"location":"content/leetcode/0011/#_3","text":"\u8f93\u5165\uff1a[1,8,6,2,5,4,8,3,7] \u8f93\u51fa\uff1a49 \u89e3\u91ca\uff1a\u56fe\u4e2d\u5782\u76f4\u7ebf\u4ee3\u8868\u8f93\u5165\u6570\u7ec4 [1,8,6,2,5,4,8,3,7]\u3002\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u5bb9\u5668\u80fd\u591f\u5bb9\u7eb3\u6c34\uff08\u8868\u793a\u4e3a\u84dd\u8272\u90e8\u5206\uff09\u7684\u6700\u5927\u503c\u4e3a 49\u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0011/#_4","text":"\u627e\u5230\u80fd\u76db\u653e\u6700\u591a\u6c34\u7684\u533a\u95f4\uff0c\u8f93\u51fa\u5176\u9762\u79ef","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0011/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0011/#c","text":"\u4ece\u4e24\u8fb9\u5f80\u91cc\u627e\uff0c\u77ed\u8fb9\u5148\u884c\uff0c\u78b0\u4e0a\u505c\u6b62\uff0c\u9762\u79ef\u4e0d\u65ad\u66f4\u65b0\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc7100%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc796.91%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0011/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0011/#c_1","text":"class Solution { public: int maxArea(vector<int>& height) { int l=0,r=size(height)-1; int ans=0; while(l<=r){ ans=max(ans,min(height[l],height[r])*(r-l)); if(height[l]>=height[r]){ r--; }else{ l++; } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0012/","text":"\u9898\u76ee \u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57 \u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a I\uff0c V\uff0c X\uff0c L\uff0cC\uff0cD \u548c M\u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII, \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII\uff0c\u800c\u662f IV\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002 \u6837\u4f8b \u8f93\u5165: 3 \u8f93\u51fa: \"III\" \u9898\u76ee\u5927\u610f \u6839\u636e\u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57\u7684\u89c4\u5219\uff0c\u5bf9\u6574\u6570\u8fdb\u884c\u8f6c\u6362\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u7f57\u9a6c\u6570\u5b57\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u56e0\u4e3a\u7f57\u9a6c\u6570\u5b57\u4ece\u5927\u5230\u5c0f\u6392\u5217\uff0c\u4e14\u5b58\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u6240\u4ee5\uff0c\u4ece\u5927\u5230\u5c0f\u8fdb\u884c\u5faa\u73af\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc7100%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc788.41% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: string intToRoman(int num) { string ans; while(num-1000>=0){ ans+='M'; num-=1000; } while(num-900>=0){ ans+=\"CM\"; num-=900; } while(num-500>=0){ ans+='D'; num-=500; } while(num-400>=0){ ans+=\"CD\"; num-=400; }while(num-100>=0){ ans+='C'; num-=100; } while(num-90>=0){ ans+=\"XC\"; num-=90; } while(num-50>=0){ ans+='L'; num-=50; } while(num-40>=0){ ans+=\"XL\"; num-=40; } while(num-10>=0){ ans+='X'; num-=10; } while(num-9>=0){ ans+=\"IX\"; num-=9; } while(num-5>=0){ ans+='V'; num-=5; } while(num-4>=0){ ans+=\"IV\"; num-=4; } while(num-1>=0){ ans+='I'; num-=1; } return ans; } };","title":"XD0012"},{"location":"content/leetcode/0012/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0012/#_2","text":"\u7f57\u9a6c\u6570\u5b57\u5305\u542b\u4ee5\u4e0b\u4e03\u79cd\u5b57\u7b26\uff1a I\uff0c V\uff0c X\uff0c L\uff0cC\uff0cD \u548c M\u3002 \u5b57\u7b26 \u6570\u503c I 1 V 5 X 10 L 50 C 100 D 500 M 1000 \u4f8b\u5982\uff0c \u7f57\u9a6c\u6570\u5b57 2 \u5199\u505a II \uff0c\u5373\u4e3a\u4e24\u4e2a\u5e76\u5217\u7684 1\u300212 \u5199\u505a XII \uff0c\u5373\u4e3a X + II \u3002 27 \u5199\u505a XXVII, \u5373\u4e3a XX + V + II \u3002 \u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u7f57\u9a6c\u6570\u5b57\u4e2d\u5c0f\u7684\u6570\u5b57\u5728\u5927\u7684\u6570\u5b57\u7684\u53f3\u8fb9\u3002\u4f46\u4e5f\u5b58\u5728\u7279\u4f8b\uff0c\u4f8b\u5982 4 \u4e0d\u5199\u505a IIII\uff0c\u800c\u662f IV\u3002\u6570\u5b57 1 \u5728\u6570\u5b57 5 \u7684\u5de6\u8fb9\uff0c\u6240\u8868\u793a\u7684\u6570\u7b49\u4e8e\u5927\u6570 5 \u51cf\u5c0f\u6570 1 \u5f97\u5230\u7684\u6570\u503c 4 \u3002\u540c\u6837\u5730\uff0c\u6570\u5b57 9 \u8868\u793a\u4e3a IX\u3002\u8fd9\u4e2a\u7279\u6b8a\u7684\u89c4\u5219\u53ea\u9002\u7528\u4e8e\u4ee5\u4e0b\u516d\u79cd\u60c5\u51b5\uff1a I \u53ef\u4ee5\u653e\u5728 V (5) \u548c X (10) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 4 \u548c 9\u3002 X \u53ef\u4ee5\u653e\u5728 L (50) \u548c C (100) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 40 \u548c 90\u3002 C \u53ef\u4ee5\u653e\u5728 D (500) \u548c M (1000) \u7684\u5de6\u8fb9\uff0c\u6765\u8868\u793a 400 \u548c 900\u3002 \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\uff0c\u5c06\u5176\u8f6c\u4e3a\u7f57\u9a6c\u6570\u5b57\u3002\u8f93\u5165\u786e\u4fdd\u5728 1 \u5230 3999 \u7684\u8303\u56f4\u5185\u3002","title":"\u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57"},{"location":"content/leetcode/0012/#_3","text":"\u8f93\u5165: 3 \u8f93\u51fa: \"III\"","title":"\u6837\u4f8b"},{"location":"content/leetcode/0012/#_4","text":"\u6839\u636e\u6574\u6570\u8f6c\u7f57\u9a6c\u6570\u5b57\u7684\u89c4\u5219\uff0c\u5bf9\u6574\u6570\u8fdb\u884c\u8f6c\u6362\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u7f57\u9a6c\u6570\u5b57\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0012/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0012/#c","text":"\u56e0\u4e3a\u7f57\u9a6c\u6570\u5b57\u4ece\u5927\u5230\u5c0f\u6392\u5217\uff0c\u4e14\u5b58\u5728\u4e00\u4e9b\u7279\u6b8a\u60c5\u51b5\uff0c\u6240\u4ee5\uff0c\u4ece\u5927\u5230\u5c0f\u8fdb\u884c\u5faa\u73af\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc7100%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc788.41%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0012/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0012/#c_1","text":"class Solution { public: string intToRoman(int num) { string ans; while(num-1000>=0){ ans+='M'; num-=1000; } while(num-900>=0){ ans+=\"CM\"; num-=900; } while(num-500>=0){ ans+='D'; num-=500; } while(num-400>=0){ ans+=\"CD\"; num-=400; }while(num-100>=0){ ans+='C'; num-=100; } while(num-90>=0){ ans+=\"XC\"; num-=90; } while(num-50>=0){ ans+='L'; num-=50; } while(num-40>=0){ ans+=\"XL\"; num-=40; } while(num-10>=0){ ans+='X'; num-=10; } while(num-9>=0){ ans+=\"IX\"; num-=9; } while(num-5>=0){ ans+='V'; num-=5; } while(num-4>=0){ ans+=\"IV\"; num-=4; } while(num-1>=0){ ans+='I'; num-=1; } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0013/","text":"\u9898\u76ee \u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570 \u9898\u76ee0012\u7684\u53cd\u9762\u610f\u601d \u6837\u4f8b \u8f93\u5165: \"III\" \u8f93\u51fa: 3 \u9898\u76ee\u5927\u610f \u9898\u76ee0012\u7684\u53cd\u9762\u610f\u601d \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u7279\u52244\uff0c9\uff0c40\uff0c90\uff0c400\uff0c900\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(len(N))\uff0c\u8d85\u8fc782.31%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc784.41% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int romanToInt(string s) { int ans=0; int cur=0; while(cur<size(s)){ if(s[cur]=='C'&&s[cur+1]=='M'){ ans+=900; cur+=2; continue; }else if(s[cur]=='C'&&s[cur+1]=='D'){ ans+=400; cur+=2; continue; }else{ } if(s[cur]=='X'&&s[cur+1]=='C'){ ans+=90; cur+=2; continue; }else if(s[cur]=='X'&&s[cur+1]=='L'){ ans+=40; cur+=2; continue; }else{ } if(s[cur]=='I'&&s[cur+1]=='X'){ ans+=9; cur+=2; continue; }else if(s[cur]=='I'&&s[cur+1]=='V'){ ans+=4; cur+=2; continue; }else{ } if(s[cur]=='M'){ ans+=1000; cur+=1; continue; } if(s[cur]=='D'){ ans+=500; cur+=1; continue; } if(s[cur]=='C'){ ans+=100; cur+=1; continue; } if(s[cur]=='L'){ ans+=50; cur+=1; continue; } if(s[cur]=='X'){ ans+=10; cur+=1; continue; } if(s[cur]=='V'){ ans+=5; cur+=1; continue; } if(s[cur]=='I'){ ans+=1; cur+=1; continue; } } return ans; } };","title":"XD0013"},{"location":"content/leetcode/0013/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0013/#_2","text":"\u9898\u76ee0012\u7684\u53cd\u9762\u610f\u601d","title":"\u7f57\u9a6c\u6570\u5b57\u8f6c\u6574\u6570"},{"location":"content/leetcode/0013/#_3","text":"\u8f93\u5165: \"III\" \u8f93\u51fa: 3","title":"\u6837\u4f8b"},{"location":"content/leetcode/0013/#_4","text":"\u9898\u76ee0012\u7684\u53cd\u9762\u610f\u601d","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0013/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0013/#c","text":"\u7279\u52244\uff0c9\uff0c40\uff0c90\uff0c400\uff0c900\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(len(N))\uff0c\u8d85\u8fc782.31%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\uff0c\u8d85\u8fc784.41%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0013/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0013/#c_1","text":"class Solution { public: int romanToInt(string s) { int ans=0; int cur=0; while(cur<size(s)){ if(s[cur]=='C'&&s[cur+1]=='M'){ ans+=900; cur+=2; continue; }else if(s[cur]=='C'&&s[cur+1]=='D'){ ans+=400; cur+=2; continue; }else{ } if(s[cur]=='X'&&s[cur+1]=='C'){ ans+=90; cur+=2; continue; }else if(s[cur]=='X'&&s[cur+1]=='L'){ ans+=40; cur+=2; continue; }else{ } if(s[cur]=='I'&&s[cur+1]=='X'){ ans+=9; cur+=2; continue; }else if(s[cur]=='I'&&s[cur+1]=='V'){ ans+=4; cur+=2; continue; }else{ } if(s[cur]=='M'){ ans+=1000; cur+=1; continue; } if(s[cur]=='D'){ ans+=500; cur+=1; continue; } if(s[cur]=='C'){ ans+=100; cur+=1; continue; } if(s[cur]=='L'){ ans+=50; cur+=1; continue; } if(s[cur]=='X'){ ans+=10; cur+=1; continue; } if(s[cur]=='V'){ ans+=5; cur+=1; continue; } if(s[cur]=='I'){ ans+=1; cur+=1; continue; } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0014/","text":"\u9898\u76ee \u6700\u957f\u516c\u5171\u524d\u7f00 \u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\"\u3002 \u6837\u4f8b \u8f93\u5165\uff1astrs = [\"flower\",\"flow\",\"flight\"] \u8f93\u51fa\uff1a\"fl\" \u9898\u76ee\u5927\u610f \u8f93\u51fa\u5b57\u7b26\u4e32\u6700\u524d\u9762\u4e00\u6837\u7684\u5b57\u7b26\uff0c\u4e0d\u5b58\u5728\u5c31\u8f93\u51fa\u7a7a\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc790.40%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc793.77% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: string longestCommonPrefix(vector<string>& strs) { string ans; if(size(strs)==0){ return ans; } if(size(strs)==1){ return strs[0]; } char cur; int f=0; int len=size(strs); int sz=0x7fffffff; for(int i=0;i<len;++i){ sz=sz<size(strs[i])?sz:size(strs[i]); } for(int j=0;j<sz;++j){ cur=strs[0][j]; for(int i=1;i<len;++i){ if(strs[i][j]!=cur){ f=1; break; } } if(f==1){ break; } ans+=cur; } return ans; } };","title":"XD0014"},{"location":"content/leetcode/0014/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0014/#_2","text":"\u7f16\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u67e5\u627e\u5b57\u7b26\u4e32\u6570\u7ec4\u4e2d\u7684\u6700\u957f\u516c\u5171\u524d\u7f00\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u516c\u5171\u524d\u7f00\uff0c\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32 \"\"\u3002","title":"\u6700\u957f\u516c\u5171\u524d\u7f00"},{"location":"content/leetcode/0014/#_3","text":"\u8f93\u5165\uff1astrs = [\"flower\",\"flow\",\"flight\"] \u8f93\u51fa\uff1a\"fl\"","title":"\u6837\u4f8b"},{"location":"content/leetcode/0014/#_4","text":"\u8f93\u51fa\u5b57\u7b26\u4e32\u6700\u524d\u9762\u4e00\u6837\u7684\u5b57\u7b26\uff0c\u4e0d\u5b58\u5728\u5c31\u8f93\u51fa\u7a7a\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0014/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0014/#c","text":"\u904d\u5386\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc790.40%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc793.77%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0014/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0014/#c_1","text":"class Solution { public: string longestCommonPrefix(vector<string>& strs) { string ans; if(size(strs)==0){ return ans; } if(size(strs)==1){ return strs[0]; } char cur; int f=0; int len=size(strs); int sz=0x7fffffff; for(int i=0;i<len;++i){ sz=sz<size(strs[i])?sz:size(strs[i]); } for(int j=0;j<sz;++j){ cur=strs[0][j]; for(int i=1;i<len;++i){ if(strs[i][j]!=cur){ f=1; break; } } if(f==1){ break; } ans+=cur; } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0015/","text":"\u9898\u76ee \u4e09\u6570\u4e4b\u548c \u7ed9\u4f60\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \uff0c\u4f7f\u5f97 a + b + c = 0 \uff1f\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u548c\u4e3a 0 \u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6837\u4f8b \u8f93\u5165\uff1anums = [-1,0,1,2,-1,-4] \u8f93\u51fa\uff1a[[-1,-1,2],[-1,0,1]] \u9898\u76ee\u5927\u610f \u8f93\u51fa\u4e09\u4e2a\u6570\u7684\u548c\u4e3a\u96f6\u7684\u6240\u6709\u60c5\u51b5\uff0c\u91cd\u590d\u7684\u7b97\u4e00\u79cd\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u904d\u5386\uff0c\u91cd\u590d\u5224\u65ad\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc751.33%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc792.71% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: vector<vector<int>> threeSum(vector<int>& nums) { vector<vector<int>> ans; int len=size(nums); if(len<3) return ans; sort(nums.begin(),nums.end()); for(int i=0;i<len-2;++i){ if(i>0&&nums[i]==nums[i-1]) continue; int l=i+1; int r=len-1; while(l<r){ if(nums[l]+nums[r]+nums[i]<0) l++; else if(nums[l]+nums[r]+nums[i]>0) r--; else{ ans.emplace_back(vector<int>{nums[i],nums[l],nums[r]}); while(l<r&&nums[l]==nums[l+1]) ++l; while(l<r&&nums[r]==nums[r-1]) --r; ++l; --r; } } } return ans; } };","title":"XD0015"},{"location":"content/leetcode/0015/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0015/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \uff0c\u4f7f\u5f97 a + b + c = 0 \uff1f\u8bf7\u4f60\u627e\u51fa\u6240\u6709\u548c\u4e3a 0 \u4e14\u4e0d\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a\u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u4e09\u5143\u7ec4\u3002","title":"\u4e09\u6570\u4e4b\u548c"},{"location":"content/leetcode/0015/#_3","text":"\u8f93\u5165\uff1anums = [-1,0,1,2,-1,-4] \u8f93\u51fa\uff1a[[-1,-1,2],[-1,0,1]]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0015/#_4","text":"\u8f93\u51fa\u4e09\u4e2a\u6570\u7684\u548c\u4e3a\u96f6\u7684\u6240\u6709\u60c5\u51b5\uff0c\u91cd\u590d\u7684\u7b97\u4e00\u79cd\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0015/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0015/#c","text":"\u904d\u5386\uff0c\u91cd\u590d\u5224\u65ad\u3002\u65f6\u95f4\u590d\u6742\u5ea6O(N^2)\uff0c\u8d85\u8fc751.33%\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(N)\uff0c\u8d85\u8fc792.71%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0015/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0015/#c_1","text":"class Solution { public: vector<vector<int>> threeSum(vector<int>& nums) { vector<vector<int>> ans; int len=size(nums); if(len<3) return ans; sort(nums.begin(),nums.end()); for(int i=0;i<len-2;++i){ if(i>0&&nums[i]==nums[i-1]) continue; int l=i+1; int r=len-1; while(l<r){ if(nums[l]+nums[r]+nums[i]<0) l++; else if(nums[l]+nums[r]+nums[i]>0) r--; else{ ans.emplace_back(vector<int>{nums[i],nums[l],nums[r]}); while(l<r&&nums[l]==nums[l+1]) ++l; while(l<r&&nums[r]==nums[r-1]) --r; ++l; --r; } } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0016/","text":"\u9898\u76ee \u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c \u7ed9\u5b9a\u4e00\u4e2a\u5305\u62ec n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c \u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u627e\u51fa nums \u4e2d\u7684\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e0e target \u6700\u63a5\u8fd1\u3002\u8fd4\u56de\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u3002\u5047\u5b9a\u6bcf\u7ec4\u8f93\u5165\u53ea\u5b58\u5728\u552f\u4e00\u7b54\u6848\u3002 \u6837\u4f8b \u8f93\u5165\uff1anums = [-1,2,1,-4], target = 1 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u4e0e target \u6700\u63a5\u8fd1\u7684\u548c\u662f 2 (-1 + 2 + 1 = 2) \u3002 \u9898\u76ee\u5927\u610f \u627e\u5230\u96c6\u5408\u4e2d\uff0c\u4e09\u4e2a\u6570\u7684\u548c\u4e0e\u76ee\u6807\u503c\u6700\u63a5\u8fd1\u7684\u4e09\u4e2a\u6570\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u548c\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u6392\u5e8f\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5934\u5230\u5c3e\u904d\u5386\uff0c\u53e6\u4e24\u6839\u6307\u9488\u4e00\u4e2a\u4ece\u524d\u9762\uff0c\u4e00\u4e2a\u4ece\u540e\u9762\u5f00\u59cb\u904d\u5386\uff0c\u76f8\u9047\u7684\u65f6\u5019\u505c\u6b62\u3002T(n)=O(n^2)\uff0cS(n)=O(1) \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int threeSumClosest(vector<int>& nums, int target) { sort(nums.begin(),nums.end()); int ans=0; int sum=0; int diff=0x7fffffff; for(int i=0;i<size(nums)-2;++i){ for(int j=i+1,k=size(nums)-1;j<k;){ sum=nums[i]+nums[j]+nums[k]; if(abs(sum-target)<diff){ diff=abs(sum-target); ans=sum; } if(sum==target){ return ans; }else if(sum<target){ j++; }else{ k--; } } } return ans; } };","title":"XD0016"},{"location":"content/leetcode/0016/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0016/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u62ec n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c \u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u627e\u51fa nums \u4e2d\u7684\u4e09\u4e2a\u6574\u6570\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e0e target \u6700\u63a5\u8fd1\u3002\u8fd4\u56de\u8fd9\u4e09\u4e2a\u6570\u7684\u548c\u3002\u5047\u5b9a\u6bcf\u7ec4\u8f93\u5165\u53ea\u5b58\u5728\u552f\u4e00\u7b54\u6848\u3002","title":"\u6700\u63a5\u8fd1\u7684\u4e09\u6570\u4e4b\u548c"},{"location":"content/leetcode/0016/#_3","text":"\u8f93\u5165\uff1anums = [-1,2,1,-4], target = 1 \u8f93\u51fa\uff1a2 \u89e3\u91ca\uff1a\u4e0e target \u6700\u63a5\u8fd1\u7684\u548c\u662f 2 (-1 + 2 + 1 = 2) \u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0016/#_4","text":"\u627e\u5230\u96c6\u5408\u4e2d\uff0c\u4e09\u4e2a\u6570\u7684\u548c\u4e0e\u76ee\u6807\u503c\u6700\u63a5\u8fd1\u7684\u4e09\u4e2a\u6570\uff0c\u8fd4\u56de\u4ed6\u4eec\u7684\u548c\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0016/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0016/#c","text":"\u6392\u5e8f\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5934\u5230\u5c3e\u904d\u5386\uff0c\u53e6\u4e24\u6839\u6307\u9488\u4e00\u4e2a\u4ece\u524d\u9762\uff0c\u4e00\u4e2a\u4ece\u540e\u9762\u5f00\u59cb\u904d\u5386\uff0c\u76f8\u9047\u7684\u65f6\u5019\u505c\u6b62\u3002T(n)=O(n^2)\uff0cS(n)=O(1)","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0016/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0016/#c_1","text":"class Solution { public: int threeSumClosest(vector<int>& nums, int target) { sort(nums.begin(),nums.end()); int ans=0; int sum=0; int diff=0x7fffffff; for(int i=0;i<size(nums)-2;++i){ for(int j=i+1,k=size(nums)-1;j<k;){ sum=nums[i]+nums[j]+nums[k]; if(abs(sum-target)<diff){ diff=abs(sum-target); ans=sum; } if(sum==target){ return ans; }else if(sum<target){ j++; }else{ k--; } } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0017/","text":"\u9898\u76ee \u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408 \u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002\u7b54\u6848\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u3002 \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002 \u6837\u4f8b \u8f93\u5165\uff1adigits = \"23\" \u8f93\u51fa\uff1a[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"] \u9898\u76ee\u5927\u610f \u8f93\u51fa\u6240\u6709\u5b57\u6bcd\u7ec4\u5408 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 dfs\uff0cT(n)=O(n^3)\uff0c\u8d85\u8fc737.71%\uff0cS(n)=O(n)\uff0c\u8d85\u8fc797.38% \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: vector<string> letterCombinations(string digits) { vector<string> res; if(empty(digits)) return res; dfs(digits,res,0,\"\"); return res; } void dfs(string digits,vector<string>& res,int n,string s){ if(n==size(digits)){ res.emplace_back(s); return; } for(auto& x:key[digits[n]-'2']){ s+=x; dfs(digits,res,n+1,s); s.pop_back(); } } private: vector<string> key={\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"}; };","title":"XD0017"},{"location":"content/leetcode/0017/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0017/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u4ec5\u5305\u542b\u6570\u5b57 2-9 \u7684\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u6240\u6709\u5b83\u80fd\u8868\u793a\u7684\u5b57\u6bcd\u7ec4\u5408\u3002\u7b54\u6848\u53ef\u4ee5\u6309 \u4efb\u610f\u987a\u5e8f \u8fd4\u56de\u3002 \u7ed9\u51fa\u6570\u5b57\u5230\u5b57\u6bcd\u7684\u6620\u5c04\u5982\u4e0b\uff08\u4e0e\u7535\u8bdd\u6309\u952e\u76f8\u540c\uff09\u3002\u6ce8\u610f 1 \u4e0d\u5bf9\u5e94\u4efb\u4f55\u5b57\u6bcd\u3002","title":"\u7535\u8bdd\u53f7\u7801\u7684\u5b57\u6bcd\u7ec4\u5408"},{"location":"content/leetcode/0017/#_3","text":"\u8f93\u5165\uff1adigits = \"23\" \u8f93\u51fa\uff1a[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0017/#_4","text":"\u8f93\u51fa\u6240\u6709\u5b57\u6bcd\u7ec4\u5408","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0017/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0017/#c","text":"dfs\uff0cT(n)=O(n^3)\uff0c\u8d85\u8fc737.71%\uff0cS(n)=O(n)\uff0c\u8d85\u8fc797.38%","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0017/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0017/#c_1","text":"class Solution { public: vector<string> letterCombinations(string digits) { vector<string> res; if(empty(digits)) return res; dfs(digits,res,0,\"\"); return res; } void dfs(string digits,vector<string>& res,int n,string s){ if(n==size(digits)){ res.emplace_back(s); return; } for(auto& x:key[digits[n]-'2']){ s+=x; dfs(digits,res,n+1,s); s.pop_back(); } } private: vector<string> key={\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"}; };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0018/","text":"\u9898\u76ee \u56db\u6570\u4e4b\u548c \u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \u548c d \uff0c\u4f7f\u5f97 a + b + c + d \u7684\u503c\u4e0e target \u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u6837\u4f8b \u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002 \u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ] \u9898\u76ee\u5927\u610f \u8f93\u51fa\u56db\u4e2a\u6570\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u6240\u6709\u60c5\u51b5\uff0c\u4e0d\u5305\u62ec\u91cd\u590d\u60c5\u51b5\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u5728\u4e09\u6570\u4e4b\u548c\u7684\u57fa\u7840\u4e0a\u518d\u5916\u5c42\u52a0\u4e00\u4e2a\u5faa\u73af\u3002T(n)=O(n^3)\uff0c\u8d85\u8fc748.25%\uff0cS(n)=O(n)\uff0c\u8d85\u8fc792.21\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: vector<vector<int>> fourSum(vector<int>& nums, int target) { sort(nums.begin(),nums.end()); int sz=size(nums); vector<vector<int>> ans; if(sz<4) return ans; for(int i=0;i<sz-3;++i){ if(i>0&&nums[i]==nums[i-1]) continue; int t=target-nums[i]; for(int j=i+1;j<sz-2;++j){ if(j>i+1&&nums[j]==nums[j-1]) continue; for(int l=j+1,r=sz-1;l<r;){ if(nums[j]+nums[l]+nums[r]<t){ l++; }else if(nums[j]+nums[l]+nums[r]>t){ r--; }else{ ans.emplace_back(vector<int>{nums[i],nums[j],nums[l],nums[r]}); while(l<r&&nums[l]==nums[l+1]) l++; while(l<r&&nums[r]==nums[r-1]) r--; l++;r--; } } } } return ans; } };","title":"XD0018"},{"location":"content/leetcode/0018/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0018/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5305\u542b n \u4e2a\u6574\u6570\u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u76ee\u6807\u503c target\uff0c\u5224\u65ad nums \u4e2d\u662f\u5426\u5b58\u5728\u56db\u4e2a\u5143\u7d20 a\uff0cb\uff0cc \u548c d \uff0c\u4f7f\u5f97 a + b + c + d \u7684\u503c\u4e0e target \u76f8\u7b49\uff1f\u627e\u51fa\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u4e14\u4e0d\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002 \u6ce8\u610f\uff1a \u7b54\u6848\u4e2d\u4e0d\u53ef\u4ee5\u5305\u542b\u91cd\u590d\u7684\u56db\u5143\u7ec4\u3002","title":"\u56db\u6570\u4e4b\u548c"},{"location":"content/leetcode/0018/#_3","text":"\u7ed9\u5b9a\u6570\u7ec4 nums = [1, 0, -1, 0, -2, 2]\uff0c\u548c target = 0\u3002 \u6ee1\u8db3\u8981\u6c42\u7684\u56db\u5143\u7ec4\u96c6\u5408\u4e3a\uff1a [ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0018/#_4","text":"\u8f93\u51fa\u56db\u4e2a\u6570\u7684\u548c\u7b49\u4e8e\u7ed9\u5b9a\u503c\u7684\u6240\u6709\u60c5\u51b5\uff0c\u4e0d\u5305\u62ec\u91cd\u590d\u60c5\u51b5\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0018/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0018/#c","text":"\u5728\u4e09\u6570\u4e4b\u548c\u7684\u57fa\u7840\u4e0a\u518d\u5916\u5c42\u52a0\u4e00\u4e2a\u5faa\u73af\u3002T(n)=O(n^3)\uff0c\u8d85\u8fc748.25%\uff0cS(n)=O(n)\uff0c\u8d85\u8fc792.21\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0018/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0018/#c_1","text":"class Solution { public: vector<vector<int>> fourSum(vector<int>& nums, int target) { sort(nums.begin(),nums.end()); int sz=size(nums); vector<vector<int>> ans; if(sz<4) return ans; for(int i=0;i<sz-3;++i){ if(i>0&&nums[i]==nums[i-1]) continue; int t=target-nums[i]; for(int j=i+1;j<sz-2;++j){ if(j>i+1&&nums[j]==nums[j-1]) continue; for(int l=j+1,r=sz-1;l<r;){ if(nums[j]+nums[l]+nums[r]<t){ l++; }else if(nums[j]+nums[l]+nums[r]>t){ r--; }else{ ans.emplace_back(vector<int>{nums[i],nums[j],nums[l],nums[r]}); while(l<r&&nums[l]==nums[l+1]) l++; while(l<r&&nums[r]==nums[r-1]) r--; l++;r--; } } } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0019/","text":"\u9898\u76ee \u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9 \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u7ed3\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u8fdb\u9636\uff1a\u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f \u6837\u4f8b \u8f93\u5165\uff1ahead = [1,2,3,4,5], n = 2 \u8f93\u51fa\uff1a[1,2,3,5] \u9898\u76ee\u5927\u610f \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u7ed9\u5b9a\u5220\u9664\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5220\u9664\u76f8\u5e94\u7684\u8282\u70b9\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u6b63\u5e8f\u904d\u5386\u4e00\u8fb9\uff0c\u5f97\u5230\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5728\u6b63\u5e8f\u904d\u5386\u4e00\u8fb9\uff0c\u627e\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\uff0c\u5c06\u5bf9\u5e94\u5143\u7d20\u5220\u9664\uff0cT(n)=O(n)\uff0c\u8d85\u8fc754%\uff0cS(n)=O(1)\uff0c\u8d85\u8fc780%\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* t=new ListNode(); t=head; int sz=1; while(t->next!=nullptr){ sz++; t=t->next; } if(sz==n){ head=head->next; return head; } n=sz-n; t=head; n-=1; while(n--){ t=t->next; } t->next=t->next->next; return head; } };","title":"XD0019"},{"location":"content/leetcode/0019/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0019/#n","text":"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2c n \u4e2a\u7ed3\u70b9\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u3002 \u8fdb\u9636\uff1a\u4f60\u80fd\u5c1d\u8bd5\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b9e\u73b0\u5417\uff1f","title":"\u5220\u9664\u94fe\u8868\u7684\u5012\u6570\u7b2cN\u4e2a\u8282\u70b9"},{"location":"content/leetcode/0019/#_2","text":"\u8f93\u5165\uff1ahead = [1,2,3,4,5], n = 2 \u8f93\u51fa\uff1a[1,2,3,5]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0019/#_3","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u7ed9\u5b9a\u5220\u9664\u8282\u70b9\u7684\u4f4d\u7f6e\uff0c\u5220\u9664\u76f8\u5e94\u7684\u8282\u70b9\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0019/#_4","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0019/#c","text":"\u6b63\u5e8f\u904d\u5386\u4e00\u8fb9\uff0c\u5f97\u5230\u94fe\u8868\u7684\u957f\u5ea6\uff0c\u5728\u6b63\u5e8f\u904d\u5386\u4e00\u8fb9\uff0c\u627e\u5230\u76f8\u5e94\u7684\u4f4d\u7f6e\uff0c\u5c06\u5bf9\u5e94\u5143\u7d20\u5220\u9664\uff0cT(n)=O(n)\uff0c\u8d85\u8fc754%\uff0cS(n)=O(1)\uff0c\u8d85\u8fc780%\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0019/#_5","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0019/#c_1","text":"/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* removeNthFromEnd(ListNode* head, int n) { ListNode* t=new ListNode(); t=head; int sz=1; while(t->next!=nullptr){ sz++; t=t->next; } if(sz==n){ head=head->next; return head; } n=sz-n; t=head; n-=1; while(n--){ t=t->next; } t->next=t->next->next; return head; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0020/","text":"\u9898\u76ee \u6709\u6548\u7684\u62ec\u53f7 \u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']' \u7684\u5b57\u7b26\u4e32 s \uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002 \u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a \u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002 \u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002 \u6837\u4f8b \u8f93\u5165\uff1as = \"()[]{}\" \u8f93\u51fa\uff1atrue \u9898\u76ee\u5927\u610f \u5224\u65ad\u62ec\u53f7\u7684\u5b8c\u6574\u6027 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u5b58\u50a8\u524d\u534a\u4e2a\u62ec\u53f7\uff0c\u5224\u65ad\u540e\u534a\u4e2a\u62ec\u53f7\uff0c\u5339\u914d\u7ee7\u7eed\uff0c\u4e0d\u5339\u914d\u505c\u6b62\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: bool isValid(string s) { int sz=size(s); char c[sz+1]; c[1]=s[0]; char cur; cur=c[1]; int cnt=1; int i; for(i=1;i<sz;++i){ if(s[i]=='('||s[i]=='['||s[i]=='{'){ c[++cnt]=s[i]; cur=s[i]; }else if(s[i]==')'&&cur=='('){ cnt--; cur=c[cnt]; }else if(s[i]==']'&&cur=='['){ cnt--; cur=c[cnt]; }else if(s[i]=='}'&&cur=='{'){ cnt--; cur=c[cnt]; }else{ break; } } if(cnt==0&&i==sz){ return true; }else{ return false; } } };","title":"XD0020"},{"location":"content/leetcode/0020/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0020/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u53ea\u5305\u62ec '('\uff0c')'\uff0c'{'\uff0c'}'\uff0c'['\uff0c']' \u7684\u5b57\u7b26\u4e32 s \uff0c\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u6709\u6548\u3002 \u6709\u6548\u5b57\u7b26\u4e32\u9700\u6ee1\u8db3\uff1a \u5de6\u62ec\u53f7\u5fc5\u987b\u7528\u76f8\u540c\u7c7b\u578b\u7684\u53f3\u62ec\u53f7\u95ed\u5408\u3002 \u5de6\u62ec\u53f7\u5fc5\u987b\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u95ed\u5408\u3002","title":"\u6709\u6548\u7684\u62ec\u53f7"},{"location":"content/leetcode/0020/#_3","text":"\u8f93\u5165\uff1as = \"()[]{}\" \u8f93\u51fa\uff1atrue","title":"\u6837\u4f8b"},{"location":"content/leetcode/0020/#_4","text":"\u5224\u65ad\u62ec\u53f7\u7684\u5b8c\u6574\u6027","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0020/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0020/#c","text":"\u5b58\u50a8\u524d\u534a\u4e2a\u62ec\u53f7\uff0c\u5224\u65ad\u540e\u534a\u4e2a\u62ec\u53f7\uff0c\u5339\u914d\u7ee7\u7eed\uff0c\u4e0d\u5339\u914d\u505c\u6b62\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0020/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0020/#c_1","text":"class Solution { public: bool isValid(string s) { int sz=size(s); char c[sz+1]; c[1]=s[0]; char cur; cur=c[1]; int cnt=1; int i; for(i=1;i<sz;++i){ if(s[i]=='('||s[i]=='['||s[i]=='{'){ c[++cnt]=s[i]; cur=s[i]; }else if(s[i]==')'&&cur=='('){ cnt--; cur=c[cnt]; }else if(s[i]==']'&&cur=='['){ cnt--; cur=c[cnt]; }else if(s[i]=='}'&&cur=='{'){ cnt--; cur=c[cnt]; }else{ break; } } if(cnt==0&&i==sz){ return true; }else{ return false; } } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0021/","text":"\u9898\u76ee \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868 \u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002 \u6837\u4f8b \u8f93\u5165\uff1al1 = [1,2,4], l2 = [1,3,4] \u8f93\u51fa\uff1a[1,1,2,3,4,4] \u9898\u76ee\u5927\u610f \u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u6210\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u65b0\u5efa\u4e00\u4e2a\u94fe\u8868\uff0c\u5f53\u4e24\u4e2a\u94fe\u8868\u90fd\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u6bd4\u8f83\u4e24\u8005val\u7684\u5927\u5c0f\uff0c\u5c06\u5c0f\u7684\u63d2\u5165\u65b0\u7684\u8282\u70b9\uff0c\u5426\u5219\u5c06\u672a\u7ed3\u675f\u7684\u94fe\u8868\u63d2\u5165\u65b0\u7684\u8282\u70b9\u3002T(n)=O(n)\uff0c\u8d85\u8fc790.40%\uff0cS(n)=O(n)\uff0c\u8d85\u8fc767.47%. \u4ee3\u7801 C++\u601d\u8def\u4e00 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) { ListNode* head=new ListNode(); ListNode* t=head; while(l1!=nullptr||l2!=nullptr){ if(l1==nullptr&&l2!=nullptr){ t->next=new ListNode(l2->val); l2=l2->next; t=t->next; continue; }else if(l1!=nullptr&&l2==nullptr){ t->next=new ListNode(l1->val); l1=l1->next; t=t->next; continue; } if(l1->val<l2->val){ t->next=new ListNode(l1->val); l1=l1->next; t=t->next; }else{ t->next=new ListNode(l2->val); l2=l2->next; t=t->next; } } return head->next; } };","title":"XD0021"},{"location":"content/leetcode/0021/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0021/#_2","text":"\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 \u5347\u5e8f \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002","title":"\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5217\u8868"},{"location":"content/leetcode/0021/#_3","text":"\u8f93\u5165\uff1al1 = [1,2,4], l2 = [1,3,4] \u8f93\u51fa\uff1a[1,1,2,3,4,4]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0021/#_4","text":"\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u6210\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0021/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0021/#c","text":"\u65b0\u5efa\u4e00\u4e2a\u94fe\u8868\uff0c\u5f53\u4e24\u4e2a\u94fe\u8868\u90fd\u4e0d\u4e3a\u7a7a\u65f6\uff0c\u6bd4\u8f83\u4e24\u8005val\u7684\u5927\u5c0f\uff0c\u5c06\u5c0f\u7684\u63d2\u5165\u65b0\u7684\u8282\u70b9\uff0c\u5426\u5219\u5c06\u672a\u7ed3\u675f\u7684\u94fe\u8868\u63d2\u5165\u65b0\u7684\u8282\u70b9\u3002T(n)=O(n)\uff0c\u8d85\u8fc790.40%\uff0cS(n)=O(n)\uff0c\u8d85\u8fc767.47%.","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0021/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0021/#c_1","text":"/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) { ListNode* head=new ListNode(); ListNode* t=head; while(l1!=nullptr||l2!=nullptr){ if(l1==nullptr&&l2!=nullptr){ t->next=new ListNode(l2->val); l2=l2->next; t=t->next; continue; }else if(l1!=nullptr&&l2==nullptr){ t->next=new ListNode(l1->val); l1=l1->next; t=t->next; continue; } if(l1->val<l2->val){ t->next=new ListNode(l1->val); l1=l1->next; t=t->next; }else{ t->next=new ListNode(l2->val); l2=l2->next; t=t->next; } } return head->next; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0022/","text":"\u9898\u76ee \u62ec\u53f7\u751f\u6210 \u6570\u5b57 n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002 \u6837\u4f8b \u8f93\u5165\uff1an = 3 \u8f93\u51fa\uff1a[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"] \u9898\u76ee\u5927\u610f \u8f93\u51fa\u6240\u6709\u7684\u5408\u6cd5\u62ec\u53f7\u7ec4\u5408\u53ef\u80fd \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u56de\u6eaf\u6cd5\uff0cdfs \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: vector<string> generateParenthesis(int n) { int nl,nr; nl=nr=n; vector<string> ans; dfs(nl,nr,ans,\"\"); return ans; } void dfs(int nl,int nr,vector<string>& ans,string s){ if(nl==0&&nr==0){ ans.emplace_back(s); return; } if(nl<=nr){ if(nl>0) dfs(nl-1,nr,ans,s+'('); if(nr>0) dfs(nl,nr-1,ans,s+')'); } } };","title":"XD0022"},{"location":"content/leetcode/0022/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0022/#_2","text":"\u6570\u5b57 n \u4ee3\u8868\u751f\u6210\u62ec\u53f7\u7684\u5bf9\u6570\uff0c\u8bf7\u4f60\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\uff0c\u7528\u4e8e\u80fd\u591f\u751f\u6210\u6240\u6709\u53ef\u80fd\u7684\u5e76\u4e14 \u6709\u6548\u7684 \u62ec\u53f7\u7ec4\u5408\u3002","title":"\u62ec\u53f7\u751f\u6210"},{"location":"content/leetcode/0022/#_3","text":"\u8f93\u5165\uff1an = 3 \u8f93\u51fa\uff1a[\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0022/#_4","text":"\u8f93\u51fa\u6240\u6709\u7684\u5408\u6cd5\u62ec\u53f7\u7ec4\u5408\u53ef\u80fd","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0022/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0022/#c","text":"\u56de\u6eaf\u6cd5\uff0cdfs","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0022/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0022/#c_1","text":"class Solution { public: vector<string> generateParenthesis(int n) { int nl,nr; nl=nr=n; vector<string> ans; dfs(nl,nr,ans,\"\"); return ans; } void dfs(int nl,int nr,vector<string>& ans,string s){ if(nl==0&&nr==0){ ans.emplace_back(s); return; } if(nl<=nr){ if(nl>0) dfs(nl-1,nr,ans,s+'('); if(nr>0) dfs(nl,nr-1,ans,s+')'); } } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0023/","text":"\u9898\u76ee \u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868 \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002 \u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002 \u6837\u4f8b \u8f93\u5165\uff1alists = [[1,4,5],[1,3,4],[2,6]] \u8f93\u51fa\uff1a[1,1,2,3,4,4,5,6] \u9898\u76ee\u5927\u610f \u4e24\u4e2a\u94fe\u8868\u5408\u5e76\u7684\u5347\u7ea7\u7248 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u4e8c\u5206\u6cd5\uff0c\u4e24\u4e24\u5408\u5e76\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* mergeKLists(vector<ListNode*>& lists) { if(empty(lists)) return nullptr; return mergeSomeLists(lists,0,size(lists)); } ListNode* mergeSomeLists(vector<ListNode*>& lists,int l,int r){ if(l==r-1) return lists[l]; int m=l+(r-l)/2; ListNode* l1=mergeSomeLists(lists,l,m); ListNode* l2=mergeSomeLists(lists,m,r); return mergeTwoLists(l1,l2); } ListNode* mergeTwoLists(ListNode* l1,ListNode* l2){ if(!l1) return l2; if(!l2) return l1; if(l1->val<l2->val){ l1->next=mergeTwoLists(l1->next,l2); return l1; } l2->next=mergeTwoLists(l1,l2->next); return l2; } };","title":"XD0023"},{"location":"content/leetcode/0023/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0023/#k","text":"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u6570\u7ec4\uff0c\u6bcf\u4e2a\u94fe\u8868\u90fd\u5df2\u7ecf\u6309\u5347\u5e8f\u6392\u5217\u3002 \u8bf7\u4f60\u5c06\u6240\u6709\u94fe\u8868\u5408\u5e76\u5230\u4e00\u4e2a\u5347\u5e8f\u94fe\u8868\u4e2d\uff0c\u8fd4\u56de\u5408\u5e76\u540e\u7684\u94fe\u8868\u3002","title":"\u5408\u5e76K\u4e2a\u5347\u5e8f\u94fe\u8868"},{"location":"content/leetcode/0023/#_2","text":"\u8f93\u5165\uff1alists = [[1,4,5],[1,3,4],[2,6]] \u8f93\u51fa\uff1a[1,1,2,3,4,4,5,6]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0023/#_3","text":"\u4e24\u4e2a\u94fe\u8868\u5408\u5e76\u7684\u5347\u7ea7\u7248","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0023/#_4","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0023/#c","text":"\u4e8c\u5206\u6cd5\uff0c\u4e24\u4e24\u5408\u5e76\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0023/#_5","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0023/#c_1","text":"/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* mergeKLists(vector<ListNode*>& lists) { if(empty(lists)) return nullptr; return mergeSomeLists(lists,0,size(lists)); } ListNode* mergeSomeLists(vector<ListNode*>& lists,int l,int r){ if(l==r-1) return lists[l]; int m=l+(r-l)/2; ListNode* l1=mergeSomeLists(lists,l,m); ListNode* l2=mergeSomeLists(lists,m,r); return mergeTwoLists(l1,l2); } ListNode* mergeTwoLists(ListNode* l1,ListNode* l2){ if(!l1) return l2; if(!l2) return l1; if(l1->val<l2->val){ l1->next=mergeTwoLists(l1->next,l2); return l1; } l2->next=mergeTwoLists(l1,l2->next); return l2; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0024/","text":"\u9898\u76ee \u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9 \u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002 \u6837\u4f8b \u8f93\u5165\uff1ahead = [1,2,3,4] \u8f93\u51fa\uff1a[2,1,4,3] \u9898\u76ee\u5927\u610f \u4e24\u4e24\u4ea4\u6362\u8282\u70b9 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u8bbe\u7f6e\u4e00\u4e2a\u524d\u9a71\u4e00\u4e2a\u540e\u7ee7\uff0c\u4e00\u4e2a\u81ea\u8eab\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* swapPairs(ListNode* L) { ListNode* head=new ListNode(); head->next=L; ListNode* p=head; while(p->next!=nullptr&&p->next->next!=nullptr){ ListNode *pre=p,*temp; p=p->next; temp=p->next; p->next=temp->next; temp->next=p; pre->next=temp; } return head->next; } };","title":"XD0024"},{"location":"content/leetcode/0024/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0024/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u4e24\u4e24\u4ea4\u6362\u5176\u4e2d\u76f8\u90bb\u7684\u8282\u70b9\uff0c\u5e76\u8fd4\u56de\u4ea4\u6362\u540e\u7684\u94fe\u8868\u3002 \u4f60\u4e0d\u80fd\u53ea\u662f\u5355\u7eaf\u7684\u6539\u53d8\u8282\u70b9\u5185\u90e8\u7684\u503c\uff0c\u800c\u662f\u9700\u8981\u5b9e\u9645\u7684\u8fdb\u884c\u8282\u70b9\u4ea4\u6362\u3002","title":"\u4e24\u4e24\u4ea4\u6362\u94fe\u8868\u4e2d\u7684\u8282\u70b9"},{"location":"content/leetcode/0024/#_3","text":"\u8f93\u5165\uff1ahead = [1,2,3,4] \u8f93\u51fa\uff1a[2,1,4,3]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0024/#_4","text":"\u4e24\u4e24\u4ea4\u6362\u8282\u70b9","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0024/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0024/#c","text":"\u8bbe\u7f6e\u4e00\u4e2a\u524d\u9a71\u4e00\u4e2a\u540e\u7ee7\uff0c\u4e00\u4e2a\u81ea\u8eab\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0024/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0024/#c_1","text":"/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* swapPairs(ListNode* L) { ListNode* head=new ListNode(); head->next=L; ListNode* p=head; while(p->next!=nullptr&&p->next->next!=nullptr){ ListNode *pre=p,*temp; p=p->next; temp=p->next; p->next=temp->next; temp->next=p; pre->next=temp; } return head->next; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0025/","text":"\u9898\u76ee K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 \u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002 k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002 \u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002 \u6837\u4f8b \u7ed9\u4f60\u8fd9\u4e2a\u94fe\u8868\uff1a1->2->3->4->5 \u5f53 k = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 2->1->4->3->5 \u5f53 k = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 3->2->1->4->5 \u9898\u76ee\u5927\u610f K\u4e2a\u4e3a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 K\u4e2a\u4e3a\u4e00\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* reverseKGroup(ListNode* head, int k) { if(k==1) return head; ListNode *t=head; for(int i=0;i<k;++i){ if(t==NULL) return head; t=t->next; } ListNode *newhead; newhead=reverse(head,t); head->next=reverseKGroup(t,k); return newhead; } ListNode* reverse(ListNode* first,ListNode* last){ ListNode *pre=last; while(first!=last){ ListNode* tmp=first->next; first->next=pre; pre=first; first=tmp; } return pre; } };","title":"XD0025"},{"location":"content/leetcode/0025/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0025/#k","text":"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf k \u4e2a\u8282\u70b9\u4e00\u7ec4\u8fdb\u884c\u7ffb\u8f6c\uff0c\u8bf7\u4f60\u8fd4\u56de\u7ffb\u8f6c\u540e\u7684\u94fe\u8868\u3002 k \u662f\u4e00\u4e2a\u6b63\u6574\u6570\uff0c\u5b83\u7684\u503c\u5c0f\u4e8e\u6216\u7b49\u4e8e\u94fe\u8868\u7684\u957f\u5ea6\u3002 \u5982\u679c\u8282\u70b9\u603b\u6570\u4e0d\u662f k \u7684\u6574\u6570\u500d\uff0c\u90a3\u4e48\u8bf7\u5c06\u6700\u540e\u5269\u4f59\u7684\u8282\u70b9\u4fdd\u6301\u539f\u6709\u987a\u5e8f\u3002","title":"K\u4e2a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868"},{"location":"content/leetcode/0025/#_2","text":"\u7ed9\u4f60\u8fd9\u4e2a\u94fe\u8868\uff1a1->2->3->4->5 \u5f53 k = 2 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 2->1->4->3->5 \u5f53 k = 3 \u65f6\uff0c\u5e94\u5f53\u8fd4\u56de: 3->2->1->4->5","title":"\u6837\u4f8b"},{"location":"content/leetcode/0025/#_3","text":"K\u4e2a\u4e3a\u4e00\u7ec4\u7ffb\u8f6c\u94fe\u8868","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0025/#_4","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0025/#c","text":"K\u4e2a\u4e3a\u4e00\u7ec4\u8fdb\u884c\u64cd\u4f5c\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0025/#_5","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0025/#c_1","text":"/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* reverseKGroup(ListNode* head, int k) { if(k==1) return head; ListNode *t=head; for(int i=0;i<k;++i){ if(t==NULL) return head; t=t->next; } ListNode *newhead; newhead=reverse(head,t); head->next=reverseKGroup(t,k); return newhead; } ListNode* reverse(ListNode* first,ListNode* last){ ListNode *pre=last; while(first!=last){ ListNode* tmp=first->next; first->next=pre; pre=first; first=tmp; } return pre; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0026/","text":"\u9898\u76ee \u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002 \u6837\u4f8b \u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0, 1, 2, 3, 4\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u9898\u76ee\u5927\u610f \u5728\u4ec5\u4f7f\u7528\u5e38\u6570\u8f85\u52a9\u7a7a\u95f4\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u5df2\u7ecf\u6392\u5e8f\u5b8c\u6210\u7684\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879\u8fdb\u884c\u5220\u9664\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u4e00\u4e2a\u6307\u9488\u6307\u793a\u5f53\u524d\u53ef\u63d2\u5165\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u6307\u9488\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u6700\u7ec8\u8fd4\u56de\u524d\u4e00\u4e2a\u6307\u9488\uff0c\u7a7a\u7279\u5224\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int removeDuplicates(vector<int>& nums) { if(empty(nums)) return 0; int l=0,r=1; while(r<size(nums)){ if(nums[r]!=nums[l]){ nums[++l]=nums[r]; } ++r; } return l+1; } };","title":"XD0026"},{"location":"content/leetcode/0026/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0026/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\uff0c\u4f60\u9700\u8981\u5728 \u539f\u5730 \u5220\u9664\u91cd\u590d\u51fa\u73b0\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\uff0c\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u5728 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4 \u5e76\u5728\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u7684\u6761\u4ef6\u4e0b\u5b8c\u6210\u3002","title":"\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879"},{"location":"content/leetcode/0026/#_3","text":"\u7ed9\u5b9a nums = [0,0,1,1,1,2,2,3,3,4], \u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14\u539f\u6570\u7ec4 nums \u7684\u524d\u4e94\u4e2a\u5143\u7d20\u88ab\u4fee\u6539\u4e3a 0, 1, 2, 3, 4\u3002 \u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002","title":"\u6837\u4f8b"},{"location":"content/leetcode/0026/#_4","text":"\u5728\u4ec5\u4f7f\u7528\u5e38\u6570\u8f85\u52a9\u7a7a\u95f4\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u5df2\u7ecf\u6392\u5e8f\u5b8c\u6210\u7684\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879\u8fdb\u884c\u5220\u9664\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0026/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0026/#c","text":"\u4e00\u4e2a\u6307\u9488\u6307\u793a\u5f53\u524d\u53ef\u63d2\u5165\u4f4d\u7f6e\uff0c\u4e00\u4e2a\u6307\u9488\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u6700\u7ec8\u8fd4\u56de\u524d\u4e00\u4e2a\u6307\u9488\uff0c\u7a7a\u7279\u5224\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0026/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0026/#c_1","text":"class Solution { public: int removeDuplicates(vector<int>& nums) { if(empty(nums)) return 0; int l=0,r=1; while(r<size(nums)){ if(nums[r]!=nums[l]){ nums[++l]=nums[r]; } ++r; } return l+1; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0027/","text":"\u9898\u76ee \u79fb\u9664\u5143\u7d20 \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u503c val\uff0c\u4f60\u9700\u8981 \u539f\u5730 \u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e val \u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u4ec5\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u5e76 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4\u3002 \u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002 \u6837\u4f8b \u8f93\u5165\uff1anums = [3,2,2,3], val = 3 \u8f93\u51fa\uff1a2, nums = [2,2] \u9898\u76ee\u5927\u610f \u5728\u4ec5\u4f7f\u7528\u5e38\u6570\u7684\u8f85\u52a9\u7a7a\u95f4\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u6307\u5b9a\u7684\u5143\u7d20\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u540e\u9762\u3002 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u904d\u5386\u4e00\u904d\uff0c\u9047\u5230\u6307\u5b9a\u6570\u5b57\u4ea4\u6362\u4f4d\u7f6e\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int removeElement(vector<int>& nums, int val) { int ans=0; for(int i=0;i<size(nums);++i){ if(nums[i]!=val){ if(i!=ans){ int t=nums[i]; nums[i]=nums[ans]; nums[ans]=t; } ++ans; } } return ans; } };","title":"XD0027"},{"location":"content/leetcode/0027/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0027/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u503c val\uff0c\u4f60\u9700\u8981 \u539f\u5730 \u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e val \u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u4ec5\u4f7f\u7528 O(1) \u989d\u5916\u7a7a\u95f4\u5e76 \u539f\u5730 \u4fee\u6539\u8f93\u5165\u6570\u7ec4\u3002 \u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002","title":"\u79fb\u9664\u5143\u7d20"},{"location":"content/leetcode/0027/#_3","text":"\u8f93\u5165\uff1anums = [3,2,2,3], val = 3 \u8f93\u51fa\uff1a2, nums = [2,2]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0027/#_4","text":"\u5728\u4ec5\u4f7f\u7528\u5e38\u6570\u7684\u8f85\u52a9\u7a7a\u95f4\u7684\u524d\u63d0\u4e0b\uff0c\u5c06\u6307\u5b9a\u7684\u5143\u7d20\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u6700\u540e\u9762\u3002","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0027/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0027/#c","text":"\u904d\u5386\u4e00\u904d\uff0c\u9047\u5230\u6307\u5b9a\u6570\u5b57\u4ea4\u6362\u4f4d\u7f6e\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0027/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0027/#c_1","text":"class Solution { public: int removeElement(vector<int>& nums, int val) { int ans=0; for(int i=0;i<size(nums);++i){ if(nums[i]!=val){ if(i!=ans){ int t=nums[i]; nums[i]=nums[ans]; nums[ans]=t; } ++ans; } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0028/","text":"\u9898\u76ee \u5b9e\u73b0strStr() \u7ed9\u5b9a\u4e00\u4e2a haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1\u3002 \u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002 \u6837\u4f8b \u8f93\u5165: haystack = \"hello\", needle = \"ll\" \u8f93\u51fa: 2 \u9898\u76ee\u5927\u610f \u5b57\u7b26\u4e32\u5339\u914d \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u66b4\u641c C++\u601d\u8def\u4e8c KMP \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int strStr(string haystack, string needle) { if(needle.size()==0) return 0; if(needle.size()>haystack.size()) return -1; int ans=-1; int f=1; for(int i=0;i<haystack.size()-needle.size()+1;++i){ f=1; for(int j=0;j<needle.size();++j){ if(haystack[i+j]!=needle[j]){ f=0; continue; } } if(f==1){ ans=i; break; } } return ans; } }; C++\u601d\u8def\u4e8c class Solution { public: int next[100005]; void get_next(string n){ int i=0,j=-1; next[i]=-1; while(i<size(n)){ if(j==-1||n[i]==n[j]){ ++i;++j; next[i]=j; }else{ j=next[j]; } } } int strStr(string haystack, string needle) { get_next(needle); int i=0,j=0; int sz1=size(haystack),sz2=size(needle); while(i<sz1&&j<sz2){ if(j==-1||haystack[i]==needle[j]){ ++i;++j; }else{ j=next[j]; } } if(j+1>sz2) return i-sz2; else return -1; } };","title":"XD0028"},{"location":"content/leetcode/0028/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0028/#strstr","text":"\u7ed9\u5b9a\u4e00\u4e2a haystack \u5b57\u7b26\u4e32\u548c\u4e00\u4e2a needle \u5b57\u7b26\u4e32\uff0c\u5728 haystack \u5b57\u7b26\u4e32\u4e2d\u627e\u51fa needle \u5b57\u7b26\u4e32\u51fa\u73b0\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e (\u4ece0\u5f00\u59cb)\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u8fd4\u56de -1\u3002 \u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002","title":"\u5b9e\u73b0strStr()"},{"location":"content/leetcode/0028/#_2","text":"\u8f93\u5165: haystack = \"hello\", needle = \"ll\" \u8f93\u51fa: 2","title":"\u6837\u4f8b"},{"location":"content/leetcode/0028/#_3","text":"\u5b57\u7b26\u4e32\u5339\u914d","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0028/#_4","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0028/#c","text":"\u66b4\u641c","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0028/#c_1","text":"KMP","title":"C++\u601d\u8def\u4e8c"},{"location":"content/leetcode/0028/#_5","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0028/#c_2","text":"class Solution { public: int strStr(string haystack, string needle) { if(needle.size()==0) return 0; if(needle.size()>haystack.size()) return -1; int ans=-1; int f=1; for(int i=0;i<haystack.size()-needle.size()+1;++i){ f=1; for(int j=0;j<needle.size();++j){ if(haystack[i+j]!=needle[j]){ f=0; continue; } } if(f==1){ ans=i; break; } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0028/#c_3","text":"class Solution { public: int next[100005]; void get_next(string n){ int i=0,j=-1; next[i]=-1; while(i<size(n)){ if(j==-1||n[i]==n[j]){ ++i;++j; next[i]=j; }else{ j=next[j]; } } } int strStr(string haystack, string needle) { get_next(needle); int i=0,j=0; int sz1=size(haystack),sz2=size(needle); while(i<sz1&&j<sz2){ if(j==-1||haystack[i]==needle[j]){ ++i;++j; }else{ j=next[j]; } } if(j+1>sz2) return i-sz2; else return -1; } };","title":"C++\u601d\u8def\u4e8c"},{"location":"content/leetcode/0029/","text":"\u9898\u76ee \u4e24\u6570\u76f8\u9664 \u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570 dividend \u548c\u9664\u6570 divisor\u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002 \u8fd4\u56de\u88ab\u9664\u6570 dividend \u9664\u4ee5\u9664\u6570 divisor \u5f97\u5230\u7684\u5546\u3002 \u6574\u6570\u9664\u6cd5\u7684\u7ed3\u679c\u5e94\u5f53\u622a\u53bb\uff08truncate\uff09\u5176\u5c0f\u6570\u90e8\u5206\uff0c\u4f8b\u5982\uff1atruncate(8.345) = 8 \u4ee5\u53ca truncate(-2.7335) = -2 \u6837\u4f8b \u8f93\u5165: dividend = 10, divisor = 3 \u8f93\u51fa: 3 \u89e3\u91ca: 10/3 = truncate(3.33333..) = truncate(3) = 3 \u9898\u76ee\u5927\u610f \u5728\u4e0d\u4f7f\u7528\u4e58\u9664\u6cd5\u548cmod\u8fd0\u7b97\u7684\u524d\u63d0\u6761\u4ef6\u4e0b\uff0c\u8fdb\u884c\u9664\u6cd5\u8fd0\u7b97 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u5229\u75282\u6b21\u5e42\u589e\u957f\u548c\u4f4d\u8fd0\u7b97 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int divide(int dividend, int divisor) { if(dividend==0) return 0; if(dividend==INT_MIN&&divisor==-1) return INT_MAX; long x=labs(dividend); long y=labs(divisor); long res=0; while(x>=y){ long tmp=y; long cnt=1; while(x>tmp+tmp){ tmp<<=1; cnt<<=1; } res+=cnt; x-=tmp; } return (dividend^divisor)<0?-res:res; } };","title":"XD0029"},{"location":"content/leetcode/0029/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0029/#_2","text":"\u7ed9\u5b9a\u4e24\u4e2a\u6574\u6570\uff0c\u88ab\u9664\u6570 dividend \u548c\u9664\u6570 divisor\u3002\u5c06\u4e24\u6570\u76f8\u9664\uff0c\u8981\u6c42\u4e0d\u4f7f\u7528\u4e58\u6cd5\u3001\u9664\u6cd5\u548c mod \u8fd0\u7b97\u7b26\u3002 \u8fd4\u56de\u88ab\u9664\u6570 dividend \u9664\u4ee5\u9664\u6570 divisor \u5f97\u5230\u7684\u5546\u3002 \u6574\u6570\u9664\u6cd5\u7684\u7ed3\u679c\u5e94\u5f53\u622a\u53bb\uff08truncate\uff09\u5176\u5c0f\u6570\u90e8\u5206\uff0c\u4f8b\u5982\uff1atruncate(8.345) = 8 \u4ee5\u53ca truncate(-2.7335) = -2","title":"\u4e24\u6570\u76f8\u9664"},{"location":"content/leetcode/0029/#_3","text":"\u8f93\u5165: dividend = 10, divisor = 3 \u8f93\u51fa: 3 \u89e3\u91ca: 10/3 = truncate(3.33333..) = truncate(3) = 3","title":"\u6837\u4f8b"},{"location":"content/leetcode/0029/#_4","text":"\u5728\u4e0d\u4f7f\u7528\u4e58\u9664\u6cd5\u548cmod\u8fd0\u7b97\u7684\u524d\u63d0\u6761\u4ef6\u4e0b\uff0c\u8fdb\u884c\u9664\u6cd5\u8fd0\u7b97","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0029/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0029/#c","text":"\u5229\u75282\u6b21\u5e42\u589e\u957f\u548c\u4f4d\u8fd0\u7b97","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0029/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0029/#c_1","text":"class Solution { public: int divide(int dividend, int divisor) { if(dividend==0) return 0; if(dividend==INT_MIN&&divisor==-1) return INT_MAX; long x=labs(dividend); long y=labs(divisor); long res=0; while(x>=y){ long tmp=y; long cnt=1; while(x>tmp+tmp){ tmp<<=1; cnt<<=1; } res+=cnt; x-=tmp; } return (dividend^divisor)<0?-res:res; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0030/","text":"\u9898\u76ee \u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32 \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002 \u6837\u4f8b \u8f93\u5165\uff1a s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] \u8f93\u51fa\uff1a[0,9] \u9898\u76ee\u5927\u610f \u627e\u51fa\u6240\u6709\u5e8f\u5217\u7684\u5b58\u5728\u7684\u8d77\u59cb\u4f4d\u7f6e \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u6309\u5355\u8bcd\u957f\u5ea6\u6ed1\u52a8\u7a97\u53e3\u641c\u7d22\uff0c\u7528map\u5b58\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: vector<int> findSubstring(string s, vector<string>& words) { int sz=size(s); int wnum=size(words); vector<int> ans; if(sz==0||wnum==0) return ans; int wsz=size(words[0]); unordered_map<string,int> targetMap; for(string& word : words){ ++targetMap[word]; } for(int i=0;i<wsz;++i){ int l=i; int r=i; int cnt=0; unordered_map<string,int> curMap; while(r+wsz<=sz){ string curw=s.substr(r,wsz); r+=wsz; if(targetMap.find(curw)!=targetMap.end()){ ++curMap[curw]; ++cnt; while(curMap[curw]>targetMap[curw]){ string ts=s.substr(l,wsz); l+=wsz; --cnt; --curMap[ts]; } if(cnt==wnum){ ans.push_back(l); } } else{ l=r; cnt=0; curMap.clear(); } } } return ans; } };","title":"XD0030"},{"location":"content/leetcode/0030/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0030/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e9b\u957f\u5ea6\u76f8\u540c\u7684\u5355\u8bcd words\u3002\u627e\u51fa s \u4e2d\u6070\u597d\u53ef\u4ee5\u7531 words \u4e2d\u6240\u6709\u5355\u8bcd\u4e32\u8054\u5f62\u6210\u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002 \u6ce8\u610f\u5b50\u4e32\u8981\u4e0e words \u4e2d\u7684\u5355\u8bcd\u5b8c\u5168\u5339\u914d\uff0c\u4e2d\u95f4\u4e0d\u80fd\u6709\u5176\u4ed6\u5b57\u7b26\uff0c\u4f46\u4e0d\u9700\u8981\u8003\u8651 words \u4e2d\u5355\u8bcd\u4e32\u8054\u7684\u987a\u5e8f\u3002","title":"\u4e32\u8054\u6240\u6709\u5355\u8bcd\u7684\u5b50\u4e32"},{"location":"content/leetcode/0030/#_3","text":"\u8f93\u5165\uff1a s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"] \u8f93\u51fa\uff1a[0,9]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0030/#_4","text":"\u627e\u51fa\u6240\u6709\u5e8f\u5217\u7684\u5b58\u5728\u7684\u8d77\u59cb\u4f4d\u7f6e","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0030/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0030/#c","text":"\u6309\u5355\u8bcd\u957f\u5ea6\u6ed1\u52a8\u7a97\u53e3\u641c\u7d22\uff0c\u7528map\u5b58\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0030/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0030/#c_1","text":"class Solution { public: vector<int> findSubstring(string s, vector<string>& words) { int sz=size(s); int wnum=size(words); vector<int> ans; if(sz==0||wnum==0) return ans; int wsz=size(words[0]); unordered_map<string,int> targetMap; for(string& word : words){ ++targetMap[word]; } for(int i=0;i<wsz;++i){ int l=i; int r=i; int cnt=0; unordered_map<string,int> curMap; while(r+wsz<=sz){ string curw=s.substr(r,wsz); r+=wsz; if(targetMap.find(curw)!=targetMap.end()){ ++curMap[curw]; ++cnt; while(curMap[curw]>targetMap[curw]){ string ts=s.substr(l,wsz); l+=wsz; --cnt; --curMap[ts]; } if(cnt==wnum){ ans.push_back(l); } } else{ l=r; cnt=0; curMap.clear(); } } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0031/","text":"\u9898\u76ee \u4e0b\u4e00\u4e2a\u6392\u5217 \u5b9e\u73b0\u83b7\u53d6 \u4e0b\u4e00\u4e2a\u6392\u5217 \u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002 \u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002 \u6837\u4f8b \u8f93\u5165\uff1anums = [1,2,3] \u8f93\u51fa\uff1a[1,3,2] \u9898\u76ee\u5927\u610f \u8f93\u51fa\u4e0b\u4e00\u4e2a\u6392\u5e8f\u60c5\u51b5\uff0c\u82e5\u5df2\u7ecf\u4e3a\u6700\u5927\u6392\u5217\u60c5\u51b5\uff0c\u8f93\u51fa\u6700\u5c0f\u6392\u5217\u60c5\u51b5 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u4ece\u540e\u5f80\u524d\u627e\u7b2c\u4e00\u4e2a\u9006\u5e8f\u6570\uff0c\u5c06\u540e\u9762\u6570\u6392\u5e8f\u540e\uff0c\u627e\u6bd4\u8be5\u6570\u5927\u7684\u6700\u5c0f\u6570\u3002\u4ea4\u6362 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: void nextPermutation(vector<int>& nums) { if(size(nums)<=1) return; for(int i=size(nums)-1;i>0;--i){ if(nums[i]>nums[i-1]){ sort(begin(nums)+i,end(nums)); for(int j=i;j<size(nums);++j){ if(nums[j]>nums[i-1]){ swap(nums[i-1],nums[j]); return ; } } } } reverse(begin(nums),end(nums)); } };","title":"XD0031"},{"location":"content/leetcode/0031/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0031/#_2","text":"\u5b9e\u73b0\u83b7\u53d6 \u4e0b\u4e00\u4e2a\u6392\u5217 \u7684\u51fd\u6570\uff0c\u7b97\u6cd5\u9700\u8981\u5c06\u7ed9\u5b9a\u6570\u5b57\u5e8f\u5217\u91cd\u65b0\u6392\u5217\u6210\u5b57\u5178\u5e8f\u4e2d\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u4e0b\u4e00\u4e2a\u66f4\u5927\u7684\u6392\u5217\uff0c\u5219\u5c06\u6570\u5b57\u91cd\u65b0\u6392\u5217\u6210\u6700\u5c0f\u7684\u6392\u5217\uff08\u5373\u5347\u5e8f\u6392\u5217\uff09\u3002 \u5fc5\u987b \u539f\u5730 \u4fee\u6539\uff0c\u53ea\u5141\u8bb8\u4f7f\u7528\u989d\u5916\u5e38\u6570\u7a7a\u95f4\u3002","title":"\u4e0b\u4e00\u4e2a\u6392\u5217"},{"location":"content/leetcode/0031/#_3","text":"\u8f93\u5165\uff1anums = [1,2,3] \u8f93\u51fa\uff1a[1,3,2]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0031/#_4","text":"\u8f93\u51fa\u4e0b\u4e00\u4e2a\u6392\u5e8f\u60c5\u51b5\uff0c\u82e5\u5df2\u7ecf\u4e3a\u6700\u5927\u6392\u5217\u60c5\u51b5\uff0c\u8f93\u51fa\u6700\u5c0f\u6392\u5217\u60c5\u51b5","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0031/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0031/#c","text":"\u4ece\u540e\u5f80\u524d\u627e\u7b2c\u4e00\u4e2a\u9006\u5e8f\u6570\uff0c\u5c06\u540e\u9762\u6570\u6392\u5e8f\u540e\uff0c\u627e\u6bd4\u8be5\u6570\u5927\u7684\u6700\u5c0f\u6570\u3002\u4ea4\u6362","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0031/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0031/#c_1","text":"class Solution { public: void nextPermutation(vector<int>& nums) { if(size(nums)<=1) return; for(int i=size(nums)-1;i>0;--i){ if(nums[i]>nums[i-1]){ sort(begin(nums)+i,end(nums)); for(int j=i;j<size(nums);++j){ if(nums[j]>nums[i-1]){ swap(nums[i-1],nums[j]); return ; } } } } reverse(begin(nums),end(nums)); } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0032/","text":"\u9898\u76ee \u6700\u957f\u6709\u6548\u62ec\u53f7 \u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b '(' \u548c ')' \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u6709\u6548\uff08\u683c\u5f0f\u6b63\u786e\u4e14\u8fde\u7eed\uff09\u62ec\u53f7\u5b50\u4e32\u7684\u957f\u5ea6\u3002 \u6837\u4f8b \u8f93\u5165\uff1as = \"(()\" \u8f93\u51fa\uff1a2 \u9898\u76ee\u5927\u610f \u627e\u5230\u8fde\u7eed\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u627e\u5230\u4e0e\u53f3\u62ec\u53f7\u5339\u914d\u7684\u6700\u8fd1\u5de6\u62ec\u53f7\uff0c\u5c06\u4f4d\u7f6e\u5b58\u4e0b\u6765\uff0c\u904d\u5386\u4e00\u904d\uff0c\u8ba1\u7b97\u6700\u957f\u62ec\u53f7\u6570\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int longestValidParentheses(string s) { int sz=size(s); if(sz==0||sz==1) return 0; vector<int> v; vector<int> res; for(int i=0;i<sz;++i){ if(s[i]==')'&&!empty(v)){ int t=v.back(); res.push_back(t); v.pop_back(); res.push_back(i); } if(s[i]=='('){ v.push_back(i); } } int ans=0; int tmp=0; sort(res.begin(),res.end()); if(size(res)==0) return 0; vector<int>::iterator it; for(it=res.begin();it<res.end()-1;++it){ if(*(it+1)-*it==1){ tmp++; } else{ ans=max(ans,tmp+1); tmp=0; } } if(*(it)-*(it-1)==1){ tmp++; } ans=max(ans,tmp); return ans; } };","title":"XD0032"},{"location":"content/leetcode/0032/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0032/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a\u53ea\u5305\u542b '(' \u548c ')' \u7684\u5b57\u7b26\u4e32\uff0c\u627e\u51fa\u6700\u957f\u6709\u6548\uff08\u683c\u5f0f\u6b63\u786e\u4e14\u8fde\u7eed\uff09\u62ec\u53f7\u5b50\u4e32\u7684\u957f\u5ea6\u3002","title":"\u6700\u957f\u6709\u6548\u62ec\u53f7"},{"location":"content/leetcode/0032/#_3","text":"\u8f93\u5165\uff1as = \"(()\" \u8f93\u51fa\uff1a2","title":"\u6837\u4f8b"},{"location":"content/leetcode/0032/#_4","text":"\u627e\u5230\u8fde\u7eed\u7684\u6700\u957f\u6709\u6548\u62ec\u53f7","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0032/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0032/#c","text":"\u627e\u5230\u4e0e\u53f3\u62ec\u53f7\u5339\u914d\u7684\u6700\u8fd1\u5de6\u62ec\u53f7\uff0c\u5c06\u4f4d\u7f6e\u5b58\u4e0b\u6765\uff0c\u904d\u5386\u4e00\u904d\uff0c\u8ba1\u7b97\u6700\u957f\u62ec\u53f7\u6570\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0032/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0032/#c_1","text":"class Solution { public: int longestValidParentheses(string s) { int sz=size(s); if(sz==0||sz==1) return 0; vector<int> v; vector<int> res; for(int i=0;i<sz;++i){ if(s[i]==')'&&!empty(v)){ int t=v.back(); res.push_back(t); v.pop_back(); res.push_back(i); } if(s[i]=='('){ v.push_back(i); } } int ans=0; int tmp=0; sort(res.begin(),res.end()); if(size(res)==0) return 0; vector<int>::iterator it; for(it=res.begin();it<res.end()-1;++it){ if(*(it+1)-*it==1){ tmp++; } else{ ans=max(ans,tmp+1); tmp=0; } } if(*(it)-*(it-1)==1){ tmp++; } ans=max(ans,tmp); return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0033/","text":"\u9898\u76ee \u641c\u7d22\u65cb\u8f6c\u6392\u5217\u6570\u7ec4 \u6574\u6570\u6570\u7ec4 nums \u6309\u5347\u5e8f\u6392\u5217\uff0c\u6570\u7ec4\u4e2d\u7684\u503c \u4e92\u4e0d\u76f8\u540c \u3002 \u5728\u4f20\u9012\u7ed9\u51fd\u6570\u4e4b\u524d\uff0cnums \u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u4e0b\u6807 k\uff080 <= k < nums.length\uff09\u4e0a\u8fdb\u884c\u4e86 \u65cb\u8f6c\uff0c\u4f7f\u6570\u7ec4\u53d8\u4e3a [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]\uff08\u4e0b\u6807 \u4ece 0 \u5f00\u59cb \u8ba1\u6570\uff09\u3002\u4f8b\u5982\uff0c [0,1,2,4,5,6,7] \u5728\u4e0b\u6807 3 \u5904\u7ecf\u65cb\u8f6c\u540e\u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] \u3002 \u7ed9\u4f60 \u65cb\u8f6c\u540e \u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 target \uff0c\u5982\u679c nums \u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c target \uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002 \u6837\u4f8b \u8f93\u5165\uff1anums = [4,5,6,7,0,1,2], target = 0 \u8f93\u51fa\uff1a4 \u9898\u76ee\u5927\u610f \u627e\u6570 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u66b4\u529b \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int search(vector<int>& nums, int target) { for(int i=0;i<size(nums);++i){ if(nums[i]==target){ return i; } } return -1; } };","title":"XD0033"},{"location":"content/leetcode/0033/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0033/#_2","text":"\u6574\u6570\u6570\u7ec4 nums \u6309\u5347\u5e8f\u6392\u5217\uff0c\u6570\u7ec4\u4e2d\u7684\u503c \u4e92\u4e0d\u76f8\u540c \u3002 \u5728\u4f20\u9012\u7ed9\u51fd\u6570\u4e4b\u524d\uff0cnums \u5728\u9884\u5148\u672a\u77e5\u7684\u67d0\u4e2a\u4e0b\u6807 k\uff080 <= k < nums.length\uff09\u4e0a\u8fdb\u884c\u4e86 \u65cb\u8f6c\uff0c\u4f7f\u6570\u7ec4\u53d8\u4e3a [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]\uff08\u4e0b\u6807 \u4ece 0 \u5f00\u59cb \u8ba1\u6570\uff09\u3002\u4f8b\u5982\uff0c [0,1,2,4,5,6,7] \u5728\u4e0b\u6807 3 \u5904\u7ecf\u65cb\u8f6c\u540e\u53ef\u80fd\u53d8\u4e3a [4,5,6,7,0,1,2] \u3002 \u7ed9\u4f60 \u65cb\u8f6c\u540e \u7684\u6570\u7ec4 nums \u548c\u4e00\u4e2a\u6574\u6570 target \uff0c\u5982\u679c nums \u4e2d\u5b58\u5728\u8fd9\u4e2a\u76ee\u6807\u503c target \uff0c\u5219\u8fd4\u56de\u5b83\u7684\u7d22\u5f15\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002","title":"\u641c\u7d22\u65cb\u8f6c\u6392\u5217\u6570\u7ec4"},{"location":"content/leetcode/0033/#_3","text":"\u8f93\u5165\uff1anums = [4,5,6,7,0,1,2], target = 0 \u8f93\u51fa\uff1a4","title":"\u6837\u4f8b"},{"location":"content/leetcode/0033/#_4","text":"\u627e\u6570","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0033/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0033/#c","text":"\u66b4\u529b","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0033/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0033/#c_1","text":"class Solution { public: int search(vector<int>& nums, int target) { for(int i=0;i<size(nums);++i){ if(nums[i]==target){ return i; } } return -1; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0034/","text":"\u9898\u76ee \u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e \u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c target\uff0c\u8fd4\u56de [-1, -1]\u3002 \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log n) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f \u6837\u4f8b \u8f93\u5165\uff1anums = [5,7,7,8,8,10], target = 8 \u8f93\u51fa\uff1a[3,4] \u9898\u76ee\u5927\u610f \u627e\u5230\u6709\u5e8f\u6570\u7ec4\u4e2d\u67d0\u4e2a\u6570\u5b57\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u66b4\u529bO(n) \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: vector<int> searchRange(vector<int>& nums, int target) { vector<int> ans={-1,-1}; if(size(nums)==0) return ans; if(size(nums)==1&&nums[0]==target){ ans[0]=ans[1]=0; return ans; } if(nums[0]==target) ans[0]=ans[1]=0; for(int i=1;i<size(nums)-1;++i){ if(nums[i]==target&&nums[i-1]!=target){ ans[0]=i; } if(nums[i]==target&&nums[i+1]!=target){ ans[1]=i; } } if(nums[size(nums)-1]==target){ if(ans[0]==-1){ ans[0]=ans[1]=size(nums)-1; } else{ ans[1]=size(nums)-1; } } return ans; } };","title":"XD0034"},{"location":"content/leetcode/0034/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0034/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6574\u6570\u6570\u7ec4 nums\uff0c\u548c\u4e00\u4e2a\u76ee\u6807\u503c target\u3002\u627e\u51fa\u7ed9\u5b9a\u76ee\u6807\u503c\u5728\u6570\u7ec4\u4e2d\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002 \u5982\u679c\u6570\u7ec4\u4e2d\u4e0d\u5b58\u5728\u76ee\u6807\u503c target\uff0c\u8fd4\u56de [-1, -1]\u3002 \u8fdb\u9636\uff1a \u4f60\u53ef\u4ee5\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(log n) \u7684\u7b97\u6cd5\u89e3\u51b3\u6b64\u95ee\u9898\u5417\uff1f","title":"\u5728\u6392\u5e8f\u6570\u7ec4\u4e2d\u67e5\u627e\u5143\u7d20\u7684\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e"},{"location":"content/leetcode/0034/#_3","text":"\u8f93\u5165\uff1anums = [5,7,7,8,8,10], target = 8 \u8f93\u51fa\uff1a[3,4]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0034/#_4","text":"\u627e\u5230\u6709\u5e8f\u6570\u7ec4\u4e2d\u67d0\u4e2a\u6570\u5b57\u7684\u5f00\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0034/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0034/#c","text":"\u66b4\u529bO(n)","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0034/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0034/#c_1","text":"class Solution { public: vector<int> searchRange(vector<int>& nums, int target) { vector<int> ans={-1,-1}; if(size(nums)==0) return ans; if(size(nums)==1&&nums[0]==target){ ans[0]=ans[1]=0; return ans; } if(nums[0]==target) ans[0]=ans[1]=0; for(int i=1;i<size(nums)-1;++i){ if(nums[i]==target&&nums[i-1]!=target){ ans[0]=i; } if(nums[i]==target&&nums[i+1]!=target){ ans[1]=i; } } if(nums[size(nums)-1]==target){ if(ans[0]==-1){ ans[0]=ans[1]=size(nums)-1; } else{ ans[1]=size(nums)-1; } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0035/","text":"\u9898\u76ee \u641c\u7d22\u63d2\u5165\u4f4d\u7f6e \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002 \u6837\u4f8b \u8f93\u5165: [1,3,5,6], 5 \u8f93\u51fa: 2 \u9898\u76ee\u5927\u610f \u627e\u4f4d\u7f6e \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u66b4\u529b \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int searchInsert(vector<int>& nums, int target) { int i=0; for(i=0;i<size(nums);++i){ if(target<=nums[i]) break; } return i; } };","title":"XD0035"},{"location":"content/leetcode/0035/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0035/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u6570\u7ec4\u548c\u4e00\u4e2a\u76ee\u6807\u503c\uff0c\u5728\u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u5e76\u8fd4\u56de\u5176\u7d22\u5f15\u3002\u5982\u679c\u76ee\u6807\u503c\u4e0d\u5b58\u5728\u4e8e\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5b83\u5c06\u4f1a\u88ab\u6309\u987a\u5e8f\u63d2\u5165\u7684\u4f4d\u7f6e\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20\u3002","title":"\u641c\u7d22\u63d2\u5165\u4f4d\u7f6e"},{"location":"content/leetcode/0035/#_3","text":"\u8f93\u5165: [1,3,5,6], 5 \u8f93\u51fa: 2","title":"\u6837\u4f8b"},{"location":"content/leetcode/0035/#_4","text":"\u627e\u4f4d\u7f6e","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0035/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0035/#c","text":"\u66b4\u529b","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0035/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0035/#c_1","text":"class Solution { public: int searchInsert(vector<int>& nums, int target) { int i=0; for(i=0;i<size(nums);++i){ if(target<=nums[i]) break; } return i; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0036/","text":"\u9898\u76ee \u6709\u6548\u7684\u6570\u72ec \u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6837\u4f8b \u8f93\u5165: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: true \u9898\u76ee\u5927\u610f \u5224\u65ad\u662f\u5426\u662f\u5408\u6cd5\u7684\u6570\u72ec \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u5224\u65ad\u884c\uff0c\u5224\u65ad\u5217\uff0c\u5224\u65ad\u65b9\u683c\uff0c\u7528map\u5b58\u5e76\u4e14\u8ba1\u6570 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: bool isValidSudoku(vector<vector<char>>& board) { for(auto& x:board){ unordered_map<char,int> m; for(auto& y:x){ if(y!='.'){ if(m.count(y)) return false; ++m[y]; } } } for(int i=0;i<9;++i){ unordered_map<char,int> m; for(int j=0;j<9;++j){ char tmp=board[j][i]; if(tmp!='.'){ if(m[tmp]) return false; ++m[tmp]; } } } for(int i=0;i<9;i+=3){ for(int j=0;j<9;j+=3){ unordered_map<char,int> m; for(int k=0;k<3;++k){ for(int t=0;t<3;++t){ char tmp=board[k+i][t+j]; if(tmp!='.'){ if(m[tmp]) return false; ++m[tmp]; } } } } } return true; } };","title":"XD0036"},{"location":"content/leetcode/0036/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0036/#_2","text":"\u5224\u65ad\u4e00\u4e2a 9x9 \u7684\u6570\u72ec\u662f\u5426\u6709\u6548\u3002\u53ea\u9700\u8981\u6839\u636e\u4ee5\u4e0b\u89c4\u5219\uff0c\u9a8c\u8bc1\u5df2\u7ecf\u586b\u5165\u7684\u6570\u5b57\u662f\u5426\u6709\u6548\u5373\u53ef\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u884c\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u5217\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002 \u6570\u5b57 1-9 \u5728\u6bcf\u4e00\u4e2a\u4ee5\u7c97\u5b9e\u7ebf\u5206\u9694\u7684 3x3 \u5bab\u5185\u53ea\u80fd\u51fa\u73b0\u4e00\u6b21\u3002","title":"\u6709\u6548\u7684\u6570\u72ec"},{"location":"content/leetcode/0036/#_3","text":"\u8f93\u5165: [ [\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"], [\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"], [\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"], [\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"], [\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"], [\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"], [\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"], [\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"], [\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"] ] \u8f93\u51fa: true","title":"\u6837\u4f8b"},{"location":"content/leetcode/0036/#_4","text":"\u5224\u65ad\u662f\u5426\u662f\u5408\u6cd5\u7684\u6570\u72ec","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0036/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0036/#c","text":"\u5224\u65ad\u884c\uff0c\u5224\u65ad\u5217\uff0c\u5224\u65ad\u65b9\u683c\uff0c\u7528map\u5b58\u5e76\u4e14\u8ba1\u6570","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0036/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0036/#c_1","text":"class Solution { public: bool isValidSudoku(vector<vector<char>>& board) { for(auto& x:board){ unordered_map<char,int> m; for(auto& y:x){ if(y!='.'){ if(m.count(y)) return false; ++m[y]; } } } for(int i=0;i<9;++i){ unordered_map<char,int> m; for(int j=0;j<9;++j){ char tmp=board[j][i]; if(tmp!='.'){ if(m[tmp]) return false; ++m[tmp]; } } } for(int i=0;i<9;i+=3){ for(int j=0;j<9;j+=3){ unordered_map<char,int> m; for(int k=0;k<3;++k){ for(int t=0;t<3;++t){ char tmp=board[k+i][t+j]; if(tmp!='.'){ if(m[tmp]) return false; ++m[tmp]; } } } } } return true; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0038/","text":"\u9898\u76ee \u5916\u89c2\u6570\u5217 \u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u8f93\u51fa\u5916\u89c2\u6570\u5217\u7684\u7b2c n \u9879\u3002 \u300c\u5916\u89c2\u6570\u5217\u300d\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u6570\u5b57 1 \u5f00\u59cb\uff0c\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u5bf9\u524d\u4e00\u9879\u7684\u63cf\u8ff0\u3002 \u4f60\u53ef\u4ee5\u5c06\u5176\u89c6\u4f5c\u662f\u7531\u9012\u5f52\u516c\u5f0f\u5b9a\u4e49\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u5e8f\u5217\uff1a countAndSay(1) = \"1\" countAndSay(n) \u662f\u5bf9 countAndSay(n-1) \u7684\u63cf\u8ff0\uff0c\u7136\u540e\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u3002 \u6837\u4f8b \u8f93\u5165\uff1an = 4 \u8f93\u51fa\uff1a\"1211\" \u89e3\u91ca\uff1a countAndSay(1) = \"1\" countAndSay(2) = \u8bfb \"1\" = \u4e00 \u4e2a 1 = \"11\" countAndSay(3) = \u8bfb \"11\" = \u4e8c \u4e2a 1 = \"21\" countAndSay(4) = \u8bfb \"21\" = \u4e00 \u4e2a 2 + \u4e00 \u4e2a 1 = \"12\" + \"11\" = \"1211\" \u9898\u76ee\u5927\u610f \u5982\u9898\u4e49 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u8ba1\u6570 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: string countAndSay(int n) { vector<string> dp(n+1); dp[1]='1'; for(int i=1;i<n;++i){ string s; int j=0; while(j<size(dp[i])){ int k=1; while(j+k<size(dp[i])&&dp[i][j]==dp[i][j+k]){ ++k; } s+=('0'+k); s+=dp[i][j]; j+=k; } dp[i+1]=s; } return dp[n]; } };","title":"XD0038"},{"location":"content/leetcode/0038/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0038/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570 n \uff0c\u8f93\u51fa\u5916\u89c2\u6570\u5217\u7684\u7b2c n \u9879\u3002 \u300c\u5916\u89c2\u6570\u5217\u300d\u662f\u4e00\u4e2a\u6574\u6570\u5e8f\u5217\uff0c\u4ece\u6570\u5b57 1 \u5f00\u59cb\uff0c\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e00\u9879\u90fd\u662f\u5bf9\u524d\u4e00\u9879\u7684\u63cf\u8ff0\u3002 \u4f60\u53ef\u4ee5\u5c06\u5176\u89c6\u4f5c\u662f\u7531\u9012\u5f52\u516c\u5f0f\u5b9a\u4e49\u7684\u6570\u5b57\u5b57\u7b26\u4e32\u5e8f\u5217\uff1a countAndSay(1) = \"1\" countAndSay(n) \u662f\u5bf9 countAndSay(n-1) \u7684\u63cf\u8ff0\uff0c\u7136\u540e\u8f6c\u6362\u6210\u53e6\u4e00\u4e2a\u6570\u5b57\u5b57\u7b26\u4e32\u3002","title":"\u5916\u89c2\u6570\u5217"},{"location":"content/leetcode/0038/#_3","text":"\u8f93\u5165\uff1an = 4 \u8f93\u51fa\uff1a\"1211\" \u89e3\u91ca\uff1a countAndSay(1) = \"1\" countAndSay(2) = \u8bfb \"1\" = \u4e00 \u4e2a 1 = \"11\" countAndSay(3) = \u8bfb \"11\" = \u4e8c \u4e2a 1 = \"21\" countAndSay(4) = \u8bfb \"21\" = \u4e00 \u4e2a 2 + \u4e00 \u4e2a 1 = \"12\" + \"11\" = \"1211\"","title":"\u6837\u4f8b"},{"location":"content/leetcode/0038/#_4","text":"\u5982\u9898\u4e49","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0038/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0038/#c","text":"\u8ba1\u6570","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0038/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0038/#c_1","text":"class Solution { public: string countAndSay(int n) { vector<string> dp(n+1); dp[1]='1'; for(int i=1;i<n;++i){ string s; int j=0; while(j<size(dp[i])){ int k=1; while(j+k<size(dp[i])&&dp[i][j]==dp[i][j+k]){ ++k; } s+=('0'+k); s+=dp[i][j]; j+=k; } dp[i+1]=s; } return dp[n]; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0039/","text":"\u9898\u76ee \u7ec4\u5408\u603b\u548c \u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002 \u6837\u4f8b \u8f93\u5165\uff1acandidates = [2,3,6,7], target = 7, \u6240\u6c42\u89e3\u96c6\u4e3a\uff1a [ [7], [2,2,3] ] \u9898\u76ee\u5927\u610f \u627e\u5230\u7ed9\u5b9a\u6570\u7ec4\u4e2d\uff0c\u80fd\u591f\u7ec4\u6210\u76ee\u6807\u503c\u7684\u6570\u7ec4 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u56de\u6eaf\u6cd5\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: vector<vector<int>> combinationSum(vector<int>& candidates, int target) { vector<vector<int>> res; vector<int> tmp; dfs(res,tmp,candidates,0,target); return res; } void dfs(vector<vector<int>>& res,vector<int>& tmp,vector<int>& candidates,int n,int target){ if(!target){ res.emplace_back(tmp); return; } for(int i=n;i<size(candidates);++i){ if(target-candidates[i]>=0){ tmp.emplace_back(candidates[i]); dfs(res,tmp,candidates,i,target-candidates[i]); tmp.pop_back(); } } } };","title":"XD0039"},{"location":"content/leetcode/0039/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0039/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u91cd\u590d\u5143\u7d20\u7684\u6570\u7ec4 candidates \u548c\u4e00\u4e2a\u76ee\u6807\u6570 target \uff0c\u627e\u51fa candidates \u4e2d\u6240\u6709\u53ef\u4ee5\u4f7f\u6570\u5b57\u548c\u4e3a target \u7684\u7ec4\u5408\u3002 candidates \u4e2d\u7684\u6570\u5b57\u53ef\u4ee5\u65e0\u9650\u5236\u91cd\u590d\u88ab\u9009\u53d6\u3002 \u8bf4\u660e\uff1a \u6240\u6709\u6570\u5b57\uff08\u5305\u62ec target\uff09\u90fd\u662f\u6b63\u6574\u6570\u3002 \u89e3\u96c6\u4e0d\u80fd\u5305\u542b\u91cd\u590d\u7684\u7ec4\u5408\u3002","title":"\u7ec4\u5408\u603b\u548c"},{"location":"content/leetcode/0039/#_3","text":"\u8f93\u5165\uff1acandidates = [2,3,6,7], target = 7, \u6240\u6c42\u89e3\u96c6\u4e3a\uff1a [ [7], [2,2,3] ]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0039/#_4","text":"\u627e\u5230\u7ed9\u5b9a\u6570\u7ec4\u4e2d\uff0c\u80fd\u591f\u7ec4\u6210\u76ee\u6807\u503c\u7684\u6570\u7ec4","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0039/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0039/#c","text":"\u56de\u6eaf\u6cd5\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0039/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0039/#c_1","text":"class Solution { public: vector<vector<int>> combinationSum(vector<int>& candidates, int target) { vector<vector<int>> res; vector<int> tmp; dfs(res,tmp,candidates,0,target); return res; } void dfs(vector<vector<int>>& res,vector<int>& tmp,vector<int>& candidates,int n,int target){ if(!target){ res.emplace_back(tmp); return; } for(int i=n;i<size(candidates);++i){ if(target-candidates[i]>=0){ tmp.emplace_back(candidates[i]); dfs(res,tmp,candidates,i,target-candidates[i]); tmp.pop_back(); } } } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0053/","text":"\u9898\u76ee \u6700\u5927\u81ea\u5e8f\u548c \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002 \u6837\u4f8b \u8f93\u5165\uff1anums = [-2,1,-3,4,-1,2,1,-5,4] \u8f93\u51fa\uff1a6 \u9898\u76ee\u5927\u610f \u627e\u5230\u5176\u4e2d\u6700\u5927\u7684\u5b50\u5e8f\u5217\uff0c\u8f93\u51fa\u4ed6\u7684\u548c \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u66b4\u529b\u3002 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int maxSubArray(vector<int>& nums) { int ans=INT_MIN; int sum=0; for(int i=0;i<size(nums);++i){ if(sum>=0){ sum+=nums[i]; }else{ sum=nums[i]; } ans=max(ans,sum); } return ans; } };","title":"XD0053"},{"location":"content/leetcode/0053/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0053/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570\u6570\u7ec4 nums \uff0c\u627e\u5230\u4e00\u4e2a\u5177\u6709\u6700\u5927\u548c\u7684\u8fde\u7eed\u5b50\u6570\u7ec4\uff08\u5b50\u6570\u7ec4\u6700\u5c11\u5305\u542b\u4e00\u4e2a\u5143\u7d20\uff09\uff0c\u8fd4\u56de\u5176\u6700\u5927\u548c\u3002","title":"\u6700\u5927\u81ea\u5e8f\u548c"},{"location":"content/leetcode/0053/#_3","text":"\u8f93\u5165\uff1anums = [-2,1,-3,4,-1,2,1,-5,4] \u8f93\u51fa\uff1a6","title":"\u6837\u4f8b"},{"location":"content/leetcode/0053/#_4","text":"\u627e\u5230\u5176\u4e2d\u6700\u5927\u7684\u5b50\u5e8f\u5217\uff0c\u8f93\u51fa\u4ed6\u7684\u548c","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0053/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0053/#c","text":"\u66b4\u529b\u3002","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0053/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0053/#c_1","text":"class Solution { public: int maxSubArray(vector<int>& nums) { int ans=INT_MIN; int sum=0; for(int i=0;i<size(nums);++i){ if(sum>=0){ sum+=nums[i]; }else{ sum=nums[i]; } ans=max(ans,sum); } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0058/","text":"\u9898\u76ee \u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6 \u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u7531\u82e5\u5e72\u5355\u8bcd\u7ec4\u6210\uff0c\u5355\u8bcd\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u8fd4\u56de 0 \u3002 \u5355\u8bcd \u662f\u6307\u4ec5\u7531\u5b57\u6bcd\u7ec4\u6210\u3001\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u5b57\u7b26\u7684\u6700\u5927\u5b50\u5b57\u7b26\u4e32\u3002 \u6837\u4f8b \u8f93\u5165\uff1as = \"Hello World\" \u8f93\u51fa\uff1a5 \u9898\u76ee\u5927\u610f \u5982\u9898\u76ee \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u5148\u53bb\u9664\u6700\u540e\u7684\u7a7a\u683c\uff0c\u4ece\u6700\u540e\u5bfb\u627e\u6700\u5148\u9047\u5230\u7684\u7a7a\u683c\uff0c\u8f93\u51fa\u957f\u5ea6 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int lengthOfLastWord(string s) { int sz=size(s); int t=sz-1; while(s[t]==' '){ t--; sz--; if(t==-1) break; } if(sz==0) return 0; t=0; for(int i=sz-1;i>=0;--i){ if(s[i]==' '){ t=i; break; } } if(t==0&&s[t]!=' ') return sz; return sz-t-1; } };","title":"XD0058"},{"location":"content/leetcode/0058/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0058/#_2","text":"\u7ed9\u4f60\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u7531\u82e5\u5e72\u5355\u8bcd\u7ec4\u6210\uff0c\u5355\u8bcd\u4e4b\u95f4\u7528\u7a7a\u683c\u9694\u5f00\u3002\u8fd4\u56de\u5b57\u7b26\u4e32\u4e2d\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\uff0c\u8bf7\u8fd4\u56de 0 \u3002 \u5355\u8bcd \u662f\u6307\u4ec5\u7531\u5b57\u6bcd\u7ec4\u6210\u3001\u4e0d\u5305\u542b\u4efb\u4f55\u7a7a\u683c\u5b57\u7b26\u7684\u6700\u5927\u5b50\u5b57\u7b26\u4e32\u3002","title":"\u6700\u540e\u4e00\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6"},{"location":"content/leetcode/0058/#_3","text":"\u8f93\u5165\uff1as = \"Hello World\" \u8f93\u51fa\uff1a5","title":"\u6837\u4f8b"},{"location":"content/leetcode/0058/#_4","text":"\u5982\u9898\u76ee","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0058/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0058/#c","text":"\u5148\u53bb\u9664\u6700\u540e\u7684\u7a7a\u683c\uff0c\u4ece\u6700\u540e\u5bfb\u627e\u6700\u5148\u9047\u5230\u7684\u7a7a\u683c\uff0c\u8f93\u51fa\u957f\u5ea6","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0058/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0058/#c_1","text":"class Solution { public: int lengthOfLastWord(string s) { int sz=size(s); int t=sz-1; while(s[t]==' '){ t--; sz--; if(t==-1) break; } if(sz==0) return 0; t=0; for(int i=sz-1;i>=0;--i){ if(s[i]==' '){ t=i; break; } } if(t==0&&s[t]!=' ') return sz; return sz-t-1; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0066/","text":"\u9898\u76ee \u52a0\u4e00 \u7ed9\u5b9a\u4e00\u4e2a\u7531 \u6574\u6570 \u7ec4\u6210\u7684 \u975e\u7a7a \u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002 \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002 \u6837\u4f8b \u8f93\u5165\uff1adigits = [1,2,3] \u8f93\u51fa\uff1a[1,2,4] \u9898\u76ee\u5927\u610f \u8f93\u51fa\u6570\u7ec4\u4e2d\u8868\u793a\u7684\u6570\u52a0\u4e00\u540e\u7684\u6570 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u6b63\u5e38\u52a0\u4e00\uff0c\u8fdb\u4f4d\u7279\u5224 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: vector<int> plusOne(vector<int>& digits) { int sz=size(digits); while(++digits[sz-1]==10){ digits[sz-1]=0; --sz; if(sz==0){ digits.insert(digits.begin(),1); break; } } return digits; } };","title":"XD0066"},{"location":"content/leetcode/0066/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0066/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u7531 \u6574\u6570 \u7ec4\u6210\u7684 \u975e\u7a7a \u6570\u7ec4\u6240\u8868\u793a\u7684\u975e\u8d1f\u6574\u6570\uff0c\u5728\u8be5\u6570\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u3002 \u6700\u9ad8\u4f4d\u6570\u5b57\u5b58\u653e\u5728\u6570\u7ec4\u7684\u9996\u4f4d\uff0c \u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u53ea\u5b58\u50a8\u5355\u4e2a\u6570\u5b57\u3002 \u4f60\u53ef\u4ee5\u5047\u8bbe\u9664\u4e86\u6574\u6570 0 \u4e4b\u5916\uff0c\u8fd9\u4e2a\u6574\u6570\u4e0d\u4f1a\u4ee5\u96f6\u5f00\u5934\u3002","title":"\u52a0\u4e00"},{"location":"content/leetcode/0066/#_3","text":"\u8f93\u5165\uff1adigits = [1,2,3] \u8f93\u51fa\uff1a[1,2,4]","title":"\u6837\u4f8b"},{"location":"content/leetcode/0066/#_4","text":"\u8f93\u51fa\u6570\u7ec4\u4e2d\u8868\u793a\u7684\u6570\u52a0\u4e00\u540e\u7684\u6570","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0066/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0066/#c","text":"\u6b63\u5e38\u52a0\u4e00\uff0c\u8fdb\u4f4d\u7279\u5224","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0066/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0066/#c_1","text":"class Solution { public: vector<int> plusOne(vector<int>& digits) { int sz=size(digits); while(++digits[sz-1]==10){ digits[sz-1]=0; --sz; if(sz==0){ digits.insert(digits.begin(),1); break; } } return digits; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0067/","text":"\u9898\u76ee \u4e8c\u8fdb\u5236\u6c42\u548c \u7ed9\u4f60\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b83\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002 \u8f93\u5165\u4e3a \u975e\u7a7a \u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57 1 \u548c 0\u3002 \u6837\u4f8b \u8f93\u5165: a = \"11\", b = \"1\" \u8f93\u51fa: \"100\" \u9898\u76ee\u5927\u610f \u5982\u9898\u76ee \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u4ece\u540e\u5f80\u524d\u52a0 \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: string addBinary(string a, string b) { int sz1=size(a); int sz2=size(b); int sz=max(sz1,sz2); int sum=0; int carry=0; string ans=\"\"; for(int i=0;i<sz;++i){ if(i>sz1-1){ sum+=b[sz2-i-1]-'0'; } else if(i>sz2-1){ sum+=a[sz1-i-1]-'0'; } else{ sum+=a[sz1-i-1]-'0'+b[sz2-i-1]-'0'; } sum+=carry; carry=0; if(sum>1){ carry=1; ans+='0'+sum-2; } else if(sum==1){ ans+='1'; } else{ ans+='0'; } sum=0; } if(carry==1){ ans+='1'; } reverse(begin(ans),end(ans)); return ans; } };","title":"XD0067"},{"location":"content/leetcode/0067/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0067/#_2","text":"\u7ed9\u4f60\u4e24\u4e2a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u8fd4\u56de\u5b83\u4eec\u7684\u548c\uff08\u7528\u4e8c\u8fdb\u5236\u8868\u793a\uff09\u3002 \u8f93\u5165\u4e3a \u975e\u7a7a \u5b57\u7b26\u4e32\u4e14\u53ea\u5305\u542b\u6570\u5b57 1 \u548c 0\u3002","title":"\u4e8c\u8fdb\u5236\u6c42\u548c"},{"location":"content/leetcode/0067/#_3","text":"\u8f93\u5165: a = \"11\", b = \"1\" \u8f93\u51fa: \"100\"","title":"\u6837\u4f8b"},{"location":"content/leetcode/0067/#_4","text":"\u5982\u9898\u76ee","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0067/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0067/#c","text":"\u4ece\u540e\u5f80\u524d\u52a0","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0067/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0067/#c_1","text":"class Solution { public: string addBinary(string a, string b) { int sz1=size(a); int sz2=size(b); int sz=max(sz1,sz2); int sum=0; int carry=0; string ans=\"\"; for(int i=0;i<sz;++i){ if(i>sz1-1){ sum+=b[sz2-i-1]-'0'; } else if(i>sz2-1){ sum+=a[sz1-i-1]-'0'; } else{ sum+=a[sz1-i-1]-'0'+b[sz2-i-1]-'0'; } sum+=carry; carry=0; if(sum>1){ carry=1; ans+='0'+sum-2; } else if(sum==1){ ans+='1'; } else{ ans+='0'; } sum=0; } if(carry==1){ ans+='1'; } reverse(begin(ans),end(ans)); return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0069/","text":"\u9898\u76ee x\u7684\u5e73\u65b9\u6839 \u5b9e\u73b0 int sqrt(int x) \u51fd\u6570\u3002 \u8ba1\u7b97\u5e76\u8fd4\u56de x \u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d x \u662f\u975e\u8d1f\u6574\u6570\u3002 \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002 \u6837\u4f8b \u8f93\u5165: 4 \u8f93\u51fa: 2 \u9898\u76ee\u5927\u610f \u5b9e\u73b0sqrt\u51fd\u6570 \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u66b4\u529b\u5bfb\u627e \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int mySqrt(int x) { long long i=0; int mx=INT_MAX; for(i=1;;++i){ if(i*i<mx&&i*i<=x) continue; else if(i*i>x) break; else{ i++; break; } } return i-1; } };","title":"XD0069"},{"location":"content/leetcode/0069/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0069/#x","text":"\u5b9e\u73b0 int sqrt(int x) \u51fd\u6570\u3002 \u8ba1\u7b97\u5e76\u8fd4\u56de x \u7684\u5e73\u65b9\u6839\uff0c\u5176\u4e2d x \u662f\u975e\u8d1f\u6574\u6570\u3002 \u7531\u4e8e\u8fd4\u56de\u7c7b\u578b\u662f\u6574\u6570\uff0c\u7ed3\u679c\u53ea\u4fdd\u7559\u6574\u6570\u7684\u90e8\u5206\uff0c\u5c0f\u6570\u90e8\u5206\u5c06\u88ab\u820d\u53bb\u3002","title":"x\u7684\u5e73\u65b9\u6839"},{"location":"content/leetcode/0069/#_2","text":"\u8f93\u5165: 4 \u8f93\u51fa: 2","title":"\u6837\u4f8b"},{"location":"content/leetcode/0069/#_3","text":"\u5b9e\u73b0sqrt\u51fd\u6570","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0069/#_4","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0069/#c","text":"\u66b4\u529b\u5bfb\u627e","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0069/#_5","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0069/#c_1","text":"class Solution { public: int mySqrt(int x) { long long i=0; int mx=INT_MAX; for(i=1;;++i){ if(i*i<mx&&i*i<=x) continue; else if(i*i>x) break; else{ i++; break; } } return i-1; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0070/","text":"\u9898\u76ee \u722c\u697c\u68af \u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f \u6ce8\u610f\uff1a\u7ed9\u5b9a n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002 \u6837\u4f8b \u8f93\u5165\uff1a 2 \u8f93\u51fa\uff1a 2 \u9898\u76ee\u5927\u610f \u8d70\u697c\u68af \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 f[n]=f[n-1]+f[n-2]; \u4ee3\u7801 C++\u601d\u8def\u4e00 class Solution { public: int climbStairs(int n) { long long f[10000]={0,1,2}; for(int i=3;i<=n;++i){ f[i]=f[i-1]+f[i-2]; } return f[n]; } };","title":"XD0070"},{"location":"content/leetcode/0070/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0070/#_2","text":"\u5047\u8bbe\u4f60\u6b63\u5728\u722c\u697c\u68af\u3002\u9700\u8981 n \u9636\u4f60\u624d\u80fd\u5230\u8fbe\u697c\u9876\u3002 \u6bcf\u6b21\u4f60\u53ef\u4ee5\u722c 1 \u6216 2 \u4e2a\u53f0\u9636\u3002\u4f60\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\u53ef\u4ee5\u722c\u5230\u697c\u9876\u5462\uff1f \u6ce8\u610f\uff1a\u7ed9\u5b9a n \u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002","title":"\u722c\u697c\u68af"},{"location":"content/leetcode/0070/#_3","text":"\u8f93\u5165\uff1a 2 \u8f93\u51fa\uff1a 2","title":"\u6837\u4f8b"},{"location":"content/leetcode/0070/#_4","text":"\u8d70\u697c\u68af","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0070/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0070/#c","text":"f[n]=f[n-1]+f[n-2];","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0070/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0070/#c_1","text":"class Solution { public: int climbStairs(int n) { long long f[10000]={0,1,2}; for(int i=3;i<=n;++i){ f[i]=f[i-1]+f[i-2]; } return f[n]; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0083/","text":"\u9898\u76ee \u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20 \u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002 \u6837\u4f8b \u8f93\u5165: 1->1->2 \u8f93\u51fa: 1->2 \u9898\u76ee\u5927\u610f \u5982\u9898\u76ee \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u641c\u7d22 \u4ee3\u7801 C++\u601d\u8def\u4e00 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* deleteDuplicates(ListNode* head) { if(head==NULL) return head; ListNode* ans=head; while(head->next!=NULL){ if(head->next->val==head->val){ head->next=head->next->next; } else{ head=head->next; } } return ans; } };","title":"XD0083"},{"location":"content/leetcode/0083/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/0083/#_2","text":"\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5e8f\u94fe\u8868\uff0c\u5220\u9664\u6240\u6709\u91cd\u590d\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u3002","title":"\u5220\u9664\u6392\u5e8f\u94fe\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20"},{"location":"content/leetcode/0083/#_3","text":"\u8f93\u5165: 1->1->2 \u8f93\u51fa: 1->2","title":"\u6837\u4f8b"},{"location":"content/leetcode/0083/#_4","text":"\u5982\u9898\u76ee","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/0083/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/0083/#c","text":"\u641c\u7d22","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/0083/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/0083/#c_1","text":"/** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public: ListNode* deleteDuplicates(ListNode* head) { if(head==NULL) return head; ListNode* ans=head; while(head->next!=NULL){ if(head->next->val==head->val){ head->next=head->next->next; } else{ head=head->next; } } return ans; } };","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/template/","text":"\u9898\u76ee \u6837\u4f8b \u9898\u76ee\u5927\u610f \u89e3\u9898\u601d\u8def C++\u601d\u8def\u4e00 \u4ee3\u7801 C++\u601d\u8def\u4e00","title":"template"},{"location":"content/leetcode/template/#_1","text":"","title":"\u9898\u76ee"},{"location":"content/leetcode/template/#_2","text":"","title":""},{"location":"content/leetcode/template/#_3","text":"","title":"\u6837\u4f8b"},{"location":"content/leetcode/template/#_4","text":"","title":"\u9898\u76ee\u5927\u610f"},{"location":"content/leetcode/template/#_5","text":"","title":"\u89e3\u9898\u601d\u8def"},{"location":"content/leetcode/template/#c","text":"","title":"C++\u601d\u8def\u4e00"},{"location":"content/leetcode/template/#_6","text":"","title":"\u4ee3\u7801"},{"location":"content/leetcode/template/#c_1","text":"","title":"C++\u601d\u8def\u4e00"},{"location":"content/misc/my_c%2B%2Bstandard/","text":"C++\u7f16\u7a0b\u89c4\u8303 ahhhh","title":"C++\u7f16\u7a0b\u89c4\u8303"},{"location":"content/misc/my_c%2B%2Bstandard/#c","text":"ahhhh","title":"C++\u7f16\u7a0b\u89c4\u8303"}]}